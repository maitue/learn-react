import _extends from '@babel/runtime/helpers/extends';
import _css from '@emotion/css';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';
import { jsx } from '@emotion/core';

var makeStyles = function makeStyles(customStyles) {
  return {
    container: _extends({}, defaultStyles.container, customStyles.container),
    containerDisabled: _extends({}, defaultStyles.containerDisabled, customStyles.containerDisabled),
    track: _extends({}, defaultStyles.track, customStyles.track),
    trackChecked: _extends({}, defaultStyles.trackChecked, customStyles.trackChecked),
    button: _extends({}, defaultStyles.button, customStyles.button),
    buttonChecked: _extends({}, defaultStyles.buttonChecked, customStyles.buttonChecked)
  };
};
var defaultStyles = {
  container: {
    position: 'relative',
    display: 'inline-block',
    width: 24,
    height: 14,
    verticalAlign: 'middle',
    cursor: 'pointer',
    userSelect: 'none'
  },
  containerDisabled: {
    opacity: 0.7,
    cursor: 'not-allowed'
  },
  track: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderRadius: 7,
    backgroundColor: '#cccccc'
  },
  trackChecked: {
    backgroundColor: '#5e72e4'
  },
  button: {
    position: 'absolute',
    top: 2,
    bottom: 2,
    right: 11,
    left: 2,
    backgroundColor: '#fff',
    borderRadius: 9,
    transition: 'all 100ms ease'
  },
  buttonChecked: {
    right: 2,
    left: 11
  }
};

var Switch = function Switch(_ref) {
  var customStyles = _ref.styles,
      on = _ref.on,
      off = _ref.off,
      value = _ref.value,
      onChange = _ref.onChange,
      name = _ref.name,
      disabled = _ref.disabled,
      props = _objectWithoutPropertiesLoose(_ref, ["styles", "on", "off", "value", "onChange", "name", "disabled"]);

  var checked = value === on;
  var styles = makeStyles(customStyles);

  function handleClick() {
    if (onChange) {
      onChange(checked ? off : on);
    }
  }

  return jsx("label", _extends({}, props, {
    css:
    /*#__PURE__*/
    _css([styles.container, disabled && styles.containerDisabled]),
    onClick: disabled ? null : handleClick
  }), jsx("input", {
    type: "hidden",
    name: name,
    value: value
  }), jsx("span", {
    css:
    /*#__PURE__*/
    _css([styles.track, checked && styles.trackChecked])
  }), jsx("span", {
    css:
    /*#__PURE__*/
    _css([styles.button, checked && styles.buttonChecked])
  }));
};

Switch.defaultProps = {
  value: 1,
  on: 1,
  off: 0,
  disabled: false,
  styles: {}
};

export default Switch;
