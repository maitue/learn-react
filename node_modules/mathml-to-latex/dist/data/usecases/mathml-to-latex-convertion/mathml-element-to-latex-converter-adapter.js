"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MathMLElementToLatexConverterAdapter = void 0;
var ToLatexConverters = __importStar(require("./converters"));
var MathMLElementToLatexConverterAdapter = /** @class */ (function () {
    function MathMLElementToLatexConverterAdapter(mathMLElement) {
        this._mathMLElement = mathMLElement;
    }
    MathMLElementToLatexConverterAdapter.prototype.toLatexConverter = function () {
        var name = this._mathMLElement.name;
        var Converter = fromMathMLElementToLatexConverter[name] || ToLatexConverters.GenericSpacingWrapper;
        return new Converter(this._mathMLElement);
    };
    return MathMLElementToLatexConverterAdapter;
}());
exports.MathMLElementToLatexConverterAdapter = MathMLElementToLatexConverterAdapter;
var fromMathMLElementToLatexConverter = {
    math: ToLatexConverters.Math,
    mi: ToLatexConverters.MI,
    mo: ToLatexConverters.MO,
    mn: ToLatexConverters.MN,
    msqrt: ToLatexConverters.MSqrt,
    mfenced: ToLatexConverters.MFenced,
    mfrac: ToLatexConverters.MFrac,
    mroot: ToLatexConverters.MRoot,
    maction: ToLatexConverters.MAction,
    menclose: ToLatexConverters.MEnclose,
    merror: ToLatexConverters.MError,
    mphantom: ToLatexConverters.MPhantom,
    msup: ToLatexConverters.MSup,
    msub: ToLatexConverters.MSub,
    msubsup: ToLatexConverters.MSubsup,
    mmultiscripts: ToLatexConverters.MMultiscripts,
    mtext: ToLatexConverters.MText,
    munderover: ToLatexConverters.MUnderover,
    mtable: ToLatexConverters.MTable,
    mtr: ToLatexConverters.MTr,
    mover: ToLatexConverters.GenericUnderOver,
    munder: ToLatexConverters.GenericUnderOver,
    mrow: ToLatexConverters.GenericSpacingWrapper,
    mpadded: ToLatexConverters.GenericSpacingWrapper,
};
