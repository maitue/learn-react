{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { formatUrl } from \"@aws-sdk/util-format-url\";\nimport { S3RequestPresigner } from \"./presigner\";\nexport var getSignedUrl = function getSignedUrl(client, command, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var s3Presigner, presignInterceptMiddleware, middlewareName, presigned, output;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          s3Presigner = new S3RequestPresigner(__assign({}, client.config));\n\n          presignInterceptMiddleware = function presignInterceptMiddleware(next, context) {\n            return function (args) {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var request, presigned;\n\n                var _a, _b;\n\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      request = args.request;\n\n                      if (!HttpRequest.isInstance(request)) {\n                        throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n                      } // Retry information headers are not meaningful in presigned URLs\n\n\n                      delete request.headers[\"amz-sdk-invocation-id\"];\n                      delete request.headers[\"amz-sdk-request\"];\n                      return [4\n                      /*yield*/\n                      , s3Presigner.presign(request, __assign(__assign({}, options), {\n                        signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context[\"signing_region\"],\n                        signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context[\"signing_service\"]\n                      }))];\n\n                    case 1:\n                      presigned = _c.sent();\n                      return [2\n                      /*return*/\n                      , {\n                        // Intercept the middleware stack by returning fake response\n                        response: {},\n                        output: {\n                          $metadata: {\n                            httpStatusCode: 200\n                          },\n                          presigned: presigned\n                        }\n                      }];\n                  }\n                });\n              });\n            };\n          };\n\n          middlewareName = \"presignInterceptMiddleware\";\n          client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n            name: middlewareName,\n            relation: \"before\",\n            toMiddleware: \"awsAuthMiddleware\",\n            override: true\n          });\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1,, 3, 4]);\n\n          return [4\n          /*yield*/\n          , client.send(command)];\n\n        case 2:\n          output = _a.sent(); //@ts-ignore the output is faked, so it's not actually OutputType\n\n          presigned = output.presigned;\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          client.middlewareStack.remove(middlewareName);\n          return [7\n          /*endfinally*/\n          ];\n\n        case 4:\n          return [2\n          /*return*/\n          , formatUrl(presigned)];\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}