{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { waiterServiceDefaults, WaiterState } from \"./waiter\";\n\nvar abortTimeout = function abortTimeout(abortSignal) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , new Promise(function (resolve) {\n        abortSignal.onabort = function () {\n          return resolve({\n            state: WaiterState.ABORTED\n          });\n        };\n      })];\n    });\n  });\n};\n/**\n * Create a waiter promise that only resolves when:\n * 1. Abort controller is signaled\n * 2. Max wait time is reached\n * 3. `acceptorChecks` succeeds, or fails\n * Otherwise, it invokes `acceptorChecks` with exponential-backoff delay.\n *\n * @internal\n */\n\n\nexport var createWaiter = function createWaiter(options, input, acceptorChecks) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var params, exitConditions;\n    return __generator(this, function (_a) {\n      params = __assign(__assign({}, waiterServiceDefaults), options);\n      validateWaiterOptions(params);\n      exitConditions = [runPolling(params, input, acceptorChecks)];\n\n      if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n      }\n\n      return [2\n      /*return*/\n      , Promise.race(exitConditions)];\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}