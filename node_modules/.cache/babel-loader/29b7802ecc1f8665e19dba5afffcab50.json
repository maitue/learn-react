{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartLabelDetectionRequest, StartLabelDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartLabelDetectionCommand, serializeAws_json1_1StartLabelDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts asynchronous detection of labels in a stored video.</p>\n *          <p>Amazon Rekognition Video can detect labels in a video. Labels are instances of real-world entities.\n *        This includes objects like flower, tree, and table; events like\n *        wedding, graduation, and birthday party; concepts like landscape, evening, and nature; and activities\n *        like a person getting out of a car or a person skiing.</p>\n *\n *          <p>The video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *        and the filename of the video.\n *         <code>StartLabelDetection</code> returns a job identifier (<code>JobId</code>) which you use to get the\n *        results of the operation. When label detection is finished, Amazon Rekognition Video publishes a completion status\n *         to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p>\n *          <p>To get the results of the label detection operation, first check that the status value published to the Amazon SNS\n *         topic is <code>SUCCEEDED</code>. If so, call  <a>GetLabelDetection</a> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n *         <p></p>\n */\n\nvar StartLabelDetectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartLabelDetectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartLabelDetectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartLabelDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartLabelDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartLabelDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartLabelDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartLabelDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartLabelDetectionCommand(input, context);\n  };\n\n  StartLabelDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartLabelDetectionCommand(output, context);\n  };\n\n  return StartLabelDetectionCommand;\n}($Command);\n\nexport { StartLabelDetectionCommand };","map":null,"metadata":{},"sourceType":"module"}