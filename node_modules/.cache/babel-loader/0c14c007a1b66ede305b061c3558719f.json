{"ast":null,"code":"'use strict';\n\nvar util = require('./util');\n\nvar convertToJson = function convertToJson(node, options, parentTagName) {\n  var jObj = {}; // when no child node or attr is present\n\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  } // otherwise create a textnode if node has some text\n\n\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    var asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n  var keys = Object.keys(node.child);\n\n  for (var index = 0; index < keys.length; index++) {\n    var tagName = keys[index];\n\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n\n      for (var tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      var result = convertToJson(node.child[tagName][0], options, tagName);\n\n      var _asArray = options.arrayMode === true && typeof result === 'object' || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n\n      jObj[tagName] = _asArray ? [result] : result;\n    }\n  } //add value\n\n\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;","map":null,"metadata":{},"sourceType":"script"}