{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketCorsRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketCorsCommand, serializeAws_restXmlPutBucketCorsCommand } from \"../protocols/Aws_restXml\";\nimport { getApplyMd5BodyChecksumPlugin } from \"@aws-sdk/middleware-apply-body-checksum\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the <code>cors</code> configuration for your bucket. If the configuration exists,\n *          Amazon S3 replaces it.</p>\n *          <p>To use this operation, you must be allowed to perform the <code>s3:PutBucketCORS</code>\n *          action. By default, the bucket owner has this permission and can grant it to others.</p>\n *          <p>You set this configuration on a bucket so that the bucket can service cross-origin\n *          requests. For example, you might want to enable a request whose origin is\n *             <code>http://www.example.com</code> to access your Amazon S3 bucket at\n *             <code>my.example.bucket.com</code> by using the browser's <code>XMLHttpRequest</code>\n *          capability.</p>\n *          <p>To enable cross-origin resource sharing (CORS) on a bucket, you add the\n *             <code>cors</code> subresource to the bucket. The <code>cors</code> subresource is an XML\n *          document in which you configure rules that identify origins and the HTTP methods that can\n *          be executed on your bucket. The document is limited to 64 KB in size. </p>\n *          <p>When Amazon S3 receives a cross-origin request (or a pre-flight OPTIONS request) against a\n *          bucket, it evaluates the <code>cors</code> configuration on the bucket and uses the first\n *             <code>CORSRule</code> rule that matches the incoming browser request to enable a\n *          cross-origin request. For a rule to match, the following conditions must be met:</p>\n *          <ul>\n *             <li>\n *                <p>The request's <code>Origin</code> header must match <code>AllowedOrigin</code>\n *                elements.</p>\n *             </li>\n *             <li>\n *                <p>The request method (for example, GET, PUT, HEAD, and so on) or the\n *                   <code>Access-Control-Request-Method</code> header in case of a pre-flight\n *                   <code>OPTIONS</code> request must be one of the <code>AllowedMethod</code>\n *                elements. </p>\n *             </li>\n *             <li>\n *                <p>Every header specified in the <code>Access-Control-Request-Headers</code> request\n *                header of a pre-flight request must match an <code>AllowedHeader</code> element.\n *             </p>\n *             </li>\n *          </ul>\n *          <p> For more information about CORS, go to <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html\">Enabling\n *             Cross-Origin Resource Sharing</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketCors.html\">GetBucketCors</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketCors.html\">DeleteBucketCors</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTOPTIONSobject.html\">RESTOPTIONSobject</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar PutBucketCorsCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutBucketCorsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutBucketCorsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutBucketCorsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketCorsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketCorsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutBucketCorsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketCorsCommand(input, context);\n  };\n\n  PutBucketCorsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketCorsCommand(output, context);\n  };\n\n  return PutBucketCorsCommand;\n}($Command);\n\nexport { PutBucketCorsCommand };","map":null,"metadata":{},"sourceType":"module"}