{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectFacesRequest, DetectFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectFacesCommand, serializeAws_json1_1DetectFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects faces within an image that is provided as input.</p>\n *\n *          <p>\n *             <code>DetectFaces</code> detects the 100 largest faces in the image. For each face\n *       detected, the operation returns face details. These details include a bounding box of the\n *       face, a confidence value (that the bounding box contains a face), and a fixed set of\n *       attributes such as facial landmarks (for example, coordinates of eye and mouth),\n *       presence of beard, sunglasses, and so on. </p>\n *          <p>The face-detection algorithm is most effective on frontal faces. For non-frontal or\n *       obscured faces, the algorithm might not detect the faces or might detect faces with lower\n *       confidence. </p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the AWS CLI\n *        to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *          <note>\n *             <p>This is a stateless API operation. That is, the operation does not persist any\n *         data.</p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the\n *       <code>rekognition:DetectFaces</code> action. </p>\n */\n\nvar DetectFacesCommand =\n/** @class */\nfunction (_super) {\n  __extends(DetectFacesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DetectFacesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DetectFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DetectFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectFacesCommand(input, context);\n  };\n\n  DetectFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectFacesCommand(output, context);\n  };\n\n  return DetectFacesCommand;\n}($Command);\n\nexport { DetectFacesCommand };","map":null,"metadata":{},"sourceType":"module"}