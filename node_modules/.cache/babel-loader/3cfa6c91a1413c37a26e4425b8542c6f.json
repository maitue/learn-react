{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketWebsiteRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketWebsiteCommand, serializeAws_restXmlPutBucketWebsiteCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the configuration of the website that is specified in the <code>website</code>\n *          subresource. To configure a bucket as a website, you can add this subresource on the bucket\n *          with website configuration information such as the file name of the index document and any\n *          redirect rules. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting Websites on Amazon S3</a>.</p>\n *\n *          <p>This PUT operation requires the <code>S3:PutBucketWebsite</code> permission. By default,\n *          only the bucket owner can configure the website attached to a bucket; however, bucket\n *          owners can allow other users to set the website configuration by writing a bucket policy\n *          that grants them the <code>S3:PutBucketWebsite</code> permission.</p>\n *\n *          <p>To redirect all website requests sent to the bucket's website endpoint, you add a\n *          website configuration with the following elements. Because all requests are sent to another\n *          website, you don't need to provide index document name for the bucket.</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RedirectAllRequestsTo</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>If you want granular control over redirects, you can use the following elements to add\n *          routing rules that describe conditions for redirecting requests and information about the\n *          redirect destination. In this case, the website configuration must provide an index\n *          document for the bucket, because some requests might not be redirected. </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>IndexDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Suffix</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ErrorDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Key</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRules</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRule</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Condition</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpErrorCodeReturnedEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>KeyPrefixEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Redirect</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyPrefixWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpRedirectCode</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>Amazon S3 has a limitation of 50 routing rules per website configuration. If you require more\n *          than 50 routing rules, you can use object redirect. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html\">Configuring an\n *             Object Redirect</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\n\nvar PutBucketWebsiteCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutBucketWebsiteCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutBucketWebsiteCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutBucketWebsiteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketWebsiteCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketWebsiteRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutBucketWebsiteCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketWebsiteCommand(input, context);\n  };\n\n  PutBucketWebsiteCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketWebsiteCommand(output, context);\n  };\n\n  return PutBucketWebsiteCommand;\n}($Command);\n\nexport { PutBucketWebsiteCommand };","map":null,"metadata":{},"sourceType":"module"}