{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\laragon\\\\www\\\\Archive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"C:\\\\laragon\\\\www\\\\Archive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\laragon\\\\www\\\\Archive\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"key\", \"name\", \"fieldKey\"];\nvar _jsxFileName = \"C:\\\\laragon\\\\www\\\\Archive\\\\src\\\\app\\\\pages\\\\questions\\\\AddQuestion.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { showErrorMessage, showSuccessMessage } from \"../../actions/notification\";\nimport { Card, Col, Row } from \"react-bootstrap\";\nimport { InputNumber, Modal, Space } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setHeaderTitle } from \"../../store/actions/HeaderAction\";\nimport { Form, Input, Button, Select } from 'antd';\nimport \"./question.css\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { getChanged } from \"../../services/AppService\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport QuestionService from \"../../services/QuestionService\";\nimport EmojiStateService from \"../../services/EmojiStateService\";\nimport * as XLSX from \"xlsx\";\nimport { checkPermissionStyle, checkPermissionTextView } from \"../../services/CognitoService\";\nvar Option = Select.Option;\nexport var FREE_TEXT = 'free-text';\nexport default function AddQuestion(props) {\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalCancelVisible = _useState2[0],\n      setModalCancelVisible = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      workouts = _useState6[0],\n      setWorkouts = _useState6[1];\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var user = useSelector(function (state) {\n    return state.auth.user;\n  });\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      states = _useState8[0],\n      setStates = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      limit = _useState10[0],\n      setLimit = _useState10[1];\n\n  var _useState11 = useState('choice'),\n      _useState12 = _slicedToArray(_useState11, 2),\n      type = _useState12[0],\n      setType = _useState12[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var injectMode = props.inject;\n  var onSubmitUpdate = props.onSubmit;\n  var onCancelUpdate = props.onCancel;\n  id = injectMode ? props.id : id;\n  var isEditMode = !!id;\n  console.log('dÄ‘', id);\n  useEffect(function () {\n    dispatch(setHeaderTitle(isEditMode ? \"\".concat(checkPermissionTextView('edit', 'question-management'), \" Question\") : \"Add New Question\"));\n    EmojiStateService.search({\n      all: true\n    }).then(function (value) {\n      setStates(value.data.items);\n    });\n  }, []);\n  useEffect(function () {\n    if (isEditMode) {\n      QuestionService.getQuestion(id).then(function (value) {\n        if (value) {\n          setData(value.data);\n          form.setFieldsValue(value.data);\n          setType(value.data.type);\n          setLimit(value.data.allowUnlimitedChoice);\n        }\n      });\n    }\n  }, [isEditMode, id]);\n\n  var onCancel = function onCancel() {\n    if (!injectMode) {\n      props.history.goBack();\n    } else {\n      onCancelUpdate ? onCancelUpdate() : null;\n    }\n  };\n\n  var onFinish = function onFinish(values) {\n    values.title = (values.title || '').trim();\n    values.contents = (values.contents || '').trim();\n\n    if (!values.title) {\n      return showErrorMessage(\"Title must not be empty!\");\n    }\n\n    if (!values.stateId) {\n      return showErrorMessage(\"State must not be empty!\");\n    }\n\n    if (!values.contents) {\n      return showErrorMessage(\"Content must not be empty!\");\n    }\n\n    if (!values.quantityChoice) {\n      values.quantityChoice = 1;\n    }\n\n    if (values.answers) {\n      values.answers = values.answers.filter(function (x) {\n        x.value = (x.value || '').trim();\n        return x;\n      }).filter(function (x) {\n        return !!x.value;\n      });\n    }\n\n    if ((!values.answers || values.answers.length <= 0) && values.type !== 'linear-slider' && values.type !== FREE_TEXT) {\n      return showErrorMessage(\"Answers must not be empty!\");\n    }\n\n    if (values.type === 'linear-slider' || values.type === FREE_TEXT) {\n      values.answers = undefined;\n    }\n\n    if (values.type !== 'search-selection') {\n      delete values.allowUnlimitedChoice;\n      delete values.quantityChoice;\n    }\n\n    if (isEditMode) {\n      var changed = getChanged(data, values);\n\n      if (values.type === 'linear-slider') {\n        changed.ranges = getChanged(data.ranges, changed.ranges);\n\n        if (Object.keys(changed.ranges).length === 0) {\n          delete changed.ranges;\n        }\n      }\n\n      if (values.type !== 'linear-slider' && values.type !== FREE_TEXT) {\n        var changedAnswers = false;\n\n        if (data.answers.length === values.answers.length) {\n          for (var i = 0; i < changed.answers.length; i++) {\n            if (changed.answers[i].value !== data.answers[i].value) {\n              changedAnswers = true;\n            }\n          }\n        } else {\n          changedAnswers = true;\n        }\n\n        if (!changedAnswers) {\n          delete changed.answers;\n        }\n      }\n\n      QuestionService.updateQuestion(data.id, changed).then(function (value) {\n        if (value) {\n          showSuccessMessage(\"Updated Question Successfully!!\");\n\n          if (!injectMode) {\n            history.goBack();\n          } else {\n            setData(_objectSpread(_objectSpread({}, data), changed));\n            onSubmitUpdate ? onSubmitUpdate(_objectSpread(_objectSpread({}, data), changed)) : null;\n          }\n        }\n      });\n    } else {\n      QuestionService.createQuestion(values).then(function (value) {\n        if (value) {\n          showSuccessMessage(\"Added Question Successfully!!\");\n          history.goBack();\n        }\n      });\n    }\n  };\n\n  var onFinishFailed = function onFinishFailed(errorInfo) {\n    console.log('Failed:', errorInfo);\n  };\n\n  var handleUpload = function handleUpload(e) {\n    e.preventDefault();\n    var files = e.target.files,\n        f = files[0];\n    var reader = new FileReader();\n\n    if (f.name.indexOf('.xlsx') > 0 || f.name.indexOf('.xls') > 0 || f.name.indexOf('.csv') > 0) {\n      reader.onload = function (e) {\n        var data = e.target.result;\n        var readedData = XLSX.read(data, {\n          type: 'binary'\n        });\n        var wsname = readedData.SheetNames[0];\n        var ws = readedData.Sheets[wsname];\n        /* Convert array to json*/\n\n        var dataParse = XLSX.utils.sheet_to_json(ws, {\n          header: 1\n        });\n        console.log(dataParse);\n        var answers = form.getFieldsValue().answers || [];\n        dataParse.map(function (value, index) {\n          if (index > 0) {\n            answers.push({\n              key: answers.length,\n              value: value[0]\n            });\n          }\n        });\n        form.setFieldsValue({\n          answers: answers\n        });\n      };\n\n      reader.readAsBinaryString(f);\n    } else {\n      showErrorMessage('Only accept .xlsx/.xls/.csv files');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !isEditMode || data ? /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    initialValues: data,\n    layout: \"vertical\",\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section \".concat(injectMode ? 'inject-mode' : ''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      display: injectMode ? 'none' : 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: 'Type',\n    name: \"type\",\n    initialValue: 'choice',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    disabled: isEditMode,\n    onChange: function onChange(value) {\n      return setType(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Select.Option, {\n    value: 'choice',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 61\n    }\n  }, \"Multiple Choice\"), /*#__PURE__*/React.createElement(Select.Option, {\n    value: 'multiple-selection',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 61\n    }\n  }, \"Multi Selection\"), /*#__PURE__*/React.createElement(Select.Option, {\n    value: 'linear-slider',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 61\n    }\n  }, \"Slider\"), /*#__PURE__*/React.createElement(Select.Option, {\n    value: 'search-selection',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 61\n    }\n  }, \"Search & Selection\"), /*#__PURE__*/React.createElement(Select.Option, {\n    value: 'free-text',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 61\n    }\n  }, \"Free Text\"))))), type === 'linear-slider' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: 'Min',\n    name: ['ranges', 'minRange'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 69\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: 'Max',\n    name: ['ranges', 'maxRange'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 69\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: 'Min label',\n    name: ['ranges', 'minTitle'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 69\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: 'Max label',\n    name: ['ranges', 'maxTitle'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 69\n    }\n  }))))) : null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Content\",\n    name: \"contents\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    rows: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 57\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"State\",\n    name: \"stateId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 57\n    }\n  }, states.map(function (value, index) {\n    return /*#__PURE__*/React.createElement(Select.Option, {\n      key: index.toString(),\n      value: value.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 65\n      }\n    }, value.name);\n  }))))), type === 'free-text' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Allow Multiple Answers\",\n    name: \"allowMultipleFreeText\",\n    initialValue: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 69\n    }\n  }, /*#__PURE__*/React.createElement(Select.Option, {\n    key: 1,\n    value: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 73\n    }\n  }, \"Yes\"), /*#__PURE__*/React.createElement(Select.Option, {\n    key: 2,\n    value: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 73\n    }\n  }, \"No\"))))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Required answer\",\n    name: \"requiredContentFreeText\",\n    initialValue: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 69\n    }\n  }, /*#__PURE__*/React.createElement(Select.Option, {\n    key: 1,\n    value: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 73\n    }\n  }, \"Mandatory\"), /*#__PURE__*/React.createElement(Select.Option, {\n    key: 2,\n    value: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 73\n    }\n  }, \"Optional\")))))) : null, type === 'search-selection' ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Allow Unlimited Choice\",\n    name: \"allowUnlimitedChoice\",\n    initialValue: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    onChange: function onChange(value) {\n      return setLimit(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(Select.Option, {\n    key: 1,\n    value: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 69\n    }\n  }, \"Yes\"), /*#__PURE__*/React.createElement(Select.Option, {\n    key: 2,\n    value: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 69\n    }\n  }, \"No\")))), !limit ? /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Quantity Choice\",\n    name: \"quantityChoice\",\n    initialValue: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 69\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    formatter: function formatter(value) {\n      return value.replace('.', '').replace(',', '').replace('-', '');\n    },\n    min: 1,\n    style: {\n      width: '100%'\n    },\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 73\n    }\n  }))) : null) : null, type !== 'linear-slider' && type !== 'free-text' ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 57\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'ant-col ant-form-item-label',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 61\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 65\n    }\n  }, \"Answers\"), /*#__PURE__*/React.createElement(\"input\", {\n    accept: \".xls,.xlsx,.csv\",\n    onChange: function onChange(event) {\n      return handleUpload(event);\n    },\n    id: \"file-upload\",\n    type: 'file',\n    style: {\n      display: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 65\n    }\n  }), type === 'search-selection' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    className: 'btn-import',\n    size: \"small\",\n    onClick: function onClick(event) {\n      document.querySelector('#file-upload').click();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 77\n    }\n  }, \"Import answers\"), /*#__PURE__*/React.createElement(Button, {\n    className: 'btn-import',\n    size: \"small\",\n    onClick: function onClick(event) {\n      window.open(\"/ListAnswer.xlsx\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 77\n    }\n  }, \"Download sample\")) : null), /*#__PURE__*/React.createElement(Form.List, {\n    name: \"answers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 61\n    }\n  }, function (fields, _ref) {\n    var add = _ref.add,\n        remove = _ref.remove;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, fields.map(function (_ref2) {\n      var key = _ref2.key,\n          name = _ref2.name,\n          fieldKey = _ref2.fieldKey,\n          restField = _objectWithoutProperties(_ref2, _excluded);\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: key,\n        style: {\n          display: 'flex',\n          marginBottom: 8\n        },\n        align: \"baseline\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, restField, {\n        style: {\n          flex: 1,\n          width: '100%'\n        },\n        name: [name, 'value'],\n        fieldKey: [fieldKey, 'value'],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 81\n        }\n      }), /*#__PURE__*/React.createElement(Input, {\n        style: {\n          flex: 1,\n          width: '100%'\n        },\n        placeholder: \"Answer content\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 85\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        initialValue: key,\n        hidden: true,\n        name: [name, 'key'],\n        style: {\n          marginLeft: 10\n        },\n        fieldKey: [fieldKey, 'key'],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 85\n        }\n      })), /*#__PURE__*/React.createElement(MinusCircleOutlined, {\n        style: {\n          height: 38,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          marginLeft: 10\n        },\n        onClick: function onClick() {\n          return remove(name);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 81\n        }\n      }));\n    }), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: function onClick() {\n        return add();\n      },\n      block: true,\n      icon: /*#__PURE__*/React.createElement(PlusOutlined, {\n        style: {\n          height: 38,\n          display: \"inline-flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          marginLeft: 10\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 91\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 77\n      }\n    }, \"Add answer\")));\n  }))) : null, /*#__PURE__*/React.createElement(Form.Item, {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Button, Object.assign({\n    style: {\n      marginRight: 12\n    }\n  }, checkPermissionStyle('edit', 'question-management', true, isEditMode), {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 49\n    }\n  }), \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    htmlType: \"button\",\n    onClick: function onClick() {\n      return injectMode ? onCancel() : setModalCancelVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 49\n    }\n  }, \"Cancel\")))), /*#__PURE__*/React.createElement(Modal, {\n    title: \"Cancel \".concat(isEditMode ? 'Edit' : 'Add', \" Question\"),\n    visible: modalCancelVisible,\n    onOk: function onOk() {\n      return onCancel();\n    },\n    onCancel: function onCancel() {\n      return setModalCancelVisible(false);\n    },\n    cancelText: \"Cancel\",\n    okText: \"Ok\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 41\n    }\n  }, \"Do you want to cancel and quit ?\")))))) : /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 21\n    }\n  }));\n}\n;","map":{"version":3,"names":["React","useState","useEffect","showErrorMessage","showSuccessMessage","Card","Col","Row","InputNumber","Modal","Space","useDispatch","useSelector","setHeaderTitle","Form","Input","Button","Select","useHistory","useParams","getChanged","CircularProgress","MinusCircleOutlined","PlusOutlined","QuestionService","EmojiStateService","XLSX","checkPermissionStyle","checkPermissionTextView","Option","FREE_TEXT","AddQuestion","props","dispatch","history","modalCancelVisible","setModalCancelVisible","data","setData","workouts","setWorkouts","id","user","state","auth","states","setStates","limit","setLimit","type","setType","useForm","form","injectMode","inject","onSubmitUpdate","onSubmit","onCancelUpdate","onCancel","isEditMode","console","log","search","all","then","value","items","getQuestion","setFieldsValue","allowUnlimitedChoice","goBack","onFinish","values","title","trim","contents","stateId","quantityChoice","answers","filter","x","length","undefined","changed","ranges","Object","keys","changedAnswers","i","updateQuestion","createQuestion","onFinishFailed","errorInfo","handleUpload","e","preventDefault","files","target","f","reader","FileReader","name","indexOf","onload","result","readedData","read","wsname","SheetNames","ws","Sheets","dataParse","utils","sheet_to_json","header","getFieldsValue","map","index","push","key","readAsBinaryString","display","width","toString","replace","event","document","querySelector","click","window","open","fields","add","remove","fieldKey","restField","marginBottom","flex","marginLeft","height","alignItems","justifyContent","marginTop","marginRight"],"sources":["C:/laragon/www/Archive/src/app/pages/questions/AddQuestion.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {showErrorMessage, showSuccessMessage} from \"../../actions/notification\";\nimport {Card, Col, Row} from \"react-bootstrap\";\nimport {InputNumber, Modal, Space} from \"antd\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setHeaderTitle} from \"../../store/actions/HeaderAction\";\nimport {Form, Input, Button, Select} from 'antd';\nimport \"./question.css\";\nimport {useHistory, useParams} from \"react-router-dom\";\nimport {getChanged} from \"../../services/AppService\";\nimport {CircularProgress} from \"@material-ui/core\";\nimport {MinusCircleOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport QuestionService from \"../../services/QuestionService\";\nimport EmojiStateService from \"../../services/EmojiStateService\";\nimport * as XLSX from \"xlsx\";\nimport {checkPermissionStyle, checkPermissionTextView} from \"../../services/CognitoService\";\n\nconst {Option} = Select;\n\nexport const FREE_TEXT = 'free-text';\n\n\nexport default function AddQuestion(props) {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [modalCancelVisible, setModalCancelVisible] = useState(false);\n    const [data, setData] = useState();\n    const [workouts, setWorkouts] = useState([]);\n    let {id} = useParams();\n\n    const user = useSelector(state => state.auth.user);\n    const [states, setStates] = useState([]);\n    const [limit, setLimit] = useState(true);\n    const [type, setType] = useState('choice');\n    const [form] = Form.useForm();\n    const injectMode = props.inject;\n    const onSubmitUpdate = props.onSubmit;\n    const onCancelUpdate = props.onCancel;\n    id = injectMode ? props.id : id;\n    const isEditMode = !(!id);\n    console.log('dÄ‘', id);\n\n    useEffect(() => {\n        dispatch(setHeaderTitle(isEditMode ? `${checkPermissionTextView('edit', 'question-management')} Question` : \"Add New Question\"));\n        EmojiStateService.search({all: true}).then(value => {\n            setStates(value.data.items);\n        })\n    }, []);\n\n    useEffect(() => {\n        if (isEditMode) {\n            QuestionService.getQuestion(id).then(value => {\n                if (value) {\n                    setData(value.data);\n                    form.setFieldsValue(value.data);\n                    setType(value.data.type);\n                    setLimit(value.data.allowUnlimitedChoice);\n                }\n            })\n        }\n    }, [isEditMode, id]);\n\n\n    const onCancel = () => {\n        if (!injectMode) {\n            props.history.goBack();\n        } else {\n            onCancelUpdate ? onCancelUpdate() : null;\n        }\n\n    };\n\n    const onFinish = (values) => {\n        values.title = (values.title || '').trim();\n        values.contents = (values.contents || '').trim();\n        if (!values.title) {\n            return showErrorMessage(\"Title must not be empty!\");\n        }\n        if (!values.stateId) {\n            return showErrorMessage(\"State must not be empty!\");\n        }\n        if (!values.contents) {\n            return showErrorMessage(\"Content must not be empty!\");\n        }\n        if (!values.quantityChoice) {\n            values.quantityChoice = 1;\n        }\n\n        if (values.answers) {\n            values.answers = values.answers.filter(x => {\n                x.value = (x.value || '').trim();\n                return x;\n            }).filter(x => {\n                return !(!x.value);\n            });\n        }\n\n        if ((!values.answers || values.answers.length <= 0) && values.type !== 'linear-slider' && values.type !== FREE_TEXT) {\n            return showErrorMessage(\"Answers must not be empty!\");\n        }\n\n        if (values.type === 'linear-slider' || values.type === FREE_TEXT) {\n            values.answers = undefined\n        }\n\n        if (values.type !== 'search-selection') {\n            delete values.allowUnlimitedChoice;\n            delete values.quantityChoice;\n        }\n\n        if (isEditMode) {\n            const changed = getChanged(data, values);\n            if (values.type === 'linear-slider') {\n                changed.ranges = getChanged(data.ranges, changed.ranges);\n                if (Object.keys(changed.ranges).length === 0) {\n                    delete changed.ranges;\n                }\n            }\n\n            if (values.type !== 'linear-slider' && values.type !== FREE_TEXT) {\n                let changedAnswers = false;\n                if (data.answers.length === values.answers.length) {\n                    for (let i = 0; i < changed.answers.length; i++) {\n\n                        if (changed.answers[i].value !== data.answers[i].value) {\n                            changedAnswers = true;\n                        }\n                    }\n                } else {\n                    changedAnswers = true;\n                }\n                if (!changedAnswers) {\n                    delete changed.answers;\n                }\n            }\n\n            QuestionService.updateQuestion(data.id, changed).then(value => {\n                if (value) {\n                    showSuccessMessage(\"Updated Question Successfully!!\");\n                    if (!injectMode) {\n                        history.goBack();\n                    } else {\n                        setData({...data, ...changed});\n                        onSubmitUpdate ? onSubmitUpdate({...data, ...changed}) : null;\n                    }\n                }\n            })\n        } else {\n            QuestionService.createQuestion(values).then(value => {\n                if (value) {\n                    showSuccessMessage(\"Added Question Successfully!!\");\n                    history.goBack();\n                }\n            })\n        }\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const handleUpload = (e) => {\n        e.preventDefault();\n\n        const files = e.target.files, f = files[0];\n        const reader = new FileReader();\n        if (f.name.indexOf('.xlsx') > 0 || f.name.indexOf('.xls') > 0 || f.name.indexOf('.csv') > 0) {\n            reader.onload = (e) => {\n                var data = e.target.result;\n                let readedData = XLSX.read(data, {type: 'binary'});\n                const wsname = readedData.SheetNames[0];\n                const ws = readedData.Sheets[wsname];\n\n                /* Convert array to json*/\n                const dataParse = XLSX.utils.sheet_to_json(ws, {header: 1});\n                console.log(dataParse);\n                const answers = form.getFieldsValue().answers || [];\n                dataParse.map((value, index) => {\n                    if (index > 0) {\n                        answers.push({\n                            key: answers.length,\n                            value: value[0]\n                        });\n                    }\n                });\n                form.setFieldsValue({answers});\n            };\n            reader.readAsBinaryString(f)\n        } else {\n            showErrorMessage('Only accept .xlsx/.xls/.csv files')\n        }\n\n    }\n\n    return (\n        <>\n            {\n                !isEditMode || data ? (\n                    <Form\n                        form={form}\n                        initialValues={data}\n                        layout=\"vertical\"\n                        onFinish={onFinish}\n                        onFinishFailed={onFinishFailed}\n                    >\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                                <div className={`kt-section ${injectMode ? 'inject-mode' : ''}`}>\n                                    <Card>\n                                        <Card.Body>\n\n                                            <Row>\n                                                <Col>\n                                                    <Form.Item label=\"Title\" name=\"title\">\n                                                        <Input/>\n                                                    </Form.Item>\n                                                </Col>\n                                            </Row>\n                                            <Row style={{display: injectMode ? 'none' : 'flex'}}>\n                                                <Col>\n                                                    <Form.Item label={'Type'} name=\"type\" initialValue={'choice'}>\n                                                        <Select disabled={isEditMode}\n                                                                onChange={value => setType(value)}>\n                                                            <Select.Option value={'choice'}>Multiple\n                                                                Choice</Select.Option>\n                                                            <Select.Option value={'multiple-selection'}>Multi\n                                                                Selection</Select.Option>\n                                                            <Select.Option\n                                                                value={'linear-slider'}>Slider</Select.Option>\n                                                            <Select.Option\n                                                                value={'search-selection'}>Search &\n                                                                Selection</Select.Option>\n                                                            <Select.Option\n                                                                value={'free-text'}>Free Text</Select.Option>\n                                                        </Select>\n                                                    </Form.Item>\n                                                </Col>\n                                            </Row>\n                                            {\n                                                type === 'linear-slider' ? (\n                                                    <>\n                                                        <Row>\n                                                            <Col>\n                                                                <Form.Item label={'Min'}\n                                                                           name={['ranges', 'minRange']}>\n                                                                    <InputNumber\n                                                                        style={{width: '100%'}}/>\n                                                                </Form.Item>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row>\n                                                            <Col>\n                                                                <Form.Item label={'Max'}\n                                                                           name={['ranges', 'maxRange']}>\n                                                                    <InputNumber\n                                                                        style={{width: '100%'}}/>\n                                                                </Form.Item>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row>\n                                                            <Col>\n                                                                <Form.Item label={'Min label'}\n                                                                           name={['ranges', 'minTitle']}>\n                                                                    <Input\n                                                                        style={{width: '100%'}}/>\n                                                                </Form.Item>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row>\n                                                            <Col>\n                                                                <Form.Item label={'Max label'}\n                                                                           name={['ranges', 'maxTitle']}>\n                                                                    <Input\n                                                                        style={{width: '100%'}}/>\n                                                                </Form.Item>\n                                                            </Col>\n                                                        </Row>\n                                                    </>\n                                                ) : null\n                                            }\n\n                                            <Row>\n                                                <Col>\n                                                    <Form.Item label=\"Content\" name=\"contents\">\n                                                        <Input.TextArea rows={3}/>\n                                                    </Form.Item>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col>\n                                                    <Form.Item label=\"State\" name=\"stateId\">\n                                                        <Select>\n                                                            {states.map((value, index) => (\n                                                                <Select.Option key={index.toString()}\n                                                                               value={value.id}>{value.name}</Select.Option>\n                                                            ))}\n                                                        </Select>\n                                                    </Form.Item>\n                                                </Col>\n                                            </Row>\n                                            {\n                                                type === 'free-text' ? (\n                                                    <>\n                                                        <Row>\n                                                            <Col>\n                                                                <Form.Item label=\"Allow Multiple Answers\"\n                                                                           name=\"allowMultipleFreeText\"\n                                                                           initialValue={false}\n                                                                >\n                                                                    <Select>\n                                                                        <Select.Option key={1}\n                                                                                       value={true}>Yes</Select.Option>\n                                                                        <Select.Option key={2}\n                                                                                       value={false}>No</Select.Option>\n                                                                    </Select>\n                                                                </Form.Item>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row>\n                                                            <Col>\n                                                                <Form.Item label=\"Required answer\"\n                                                                           name=\"requiredContentFreeText\"\n                                                                           initialValue={false}\n                                                                >\n                                                                    <Select>\n                                                                        <Select.Option key={1}\n                                                                                       value={true}>Mandatory</Select.Option>\n                                                                        <Select.Option key={2}\n                                                                                       value={false}>Optional</Select.Option>\n                                                                    </Select>\n                                                                </Form.Item>\n                                                            </Col>\n                                                        </Row>\n                                                    </>\n                                                ) : null\n                                            }\n                                            {\n                                                type === 'search-selection' ? (\n                                                    <Row>\n                                                        <Col>\n                                                            <Form.Item label=\"Allow Unlimited Choice\"\n                                                                       name=\"allowUnlimitedChoice\" initialValue={true}>\n                                                                <Select onChange={(value) => setLimit(value)}>\n                                                                    <Select.Option key={1}\n                                                                                   value={true}>Yes</Select.Option>\n                                                                    <Select.Option key={2}\n                                                                                   value={false}>No</Select.Option>\n                                                                </Select>\n                                                            </Form.Item>\n                                                        </Col>\n                                                        {\n                                                            !limit ? (\n                                                                <Col>\n                                                                    <Form.Item label=\"Quantity Choice\"\n                                                                               name=\"quantityChoice\" initialValue={1}>\n                                                                        <InputNumber\n                                                                            formatter={value => value.replace('.', '').replace(',', '').replace('-', '')}\n                                                                            min={1} style={{width: '100%'}}\n                                                                            size={\"large\"}/>\n                                                                    </Form.Item>\n                                                                </Col>\n                                                            ) : null\n                                                        }\n                                                    </Row>\n                                                ) : null\n                                            }\n                                            {\n                                                type !== 'linear-slider' && type !== 'free-text' ? (\n                                                    <Row>\n                                                        <Col>\n                                                            <div className={'ant-col ant-form-item-label'}>\n                                                                <label>Answers</label>\n                                                                <input accept=\".xls,.xlsx,.csv\"\n                                                                       onChange={event => handleUpload(event)}\n                                                                       id='file-upload'\n                                                                       type={'file'} style={{display: 'none'}}/>\n                                                                {\n                                                                    type === 'search-selection' ? (\n                                                                        <>\n                                                                            <Button className={'btn-import'}\n                                                                                    size={\"small\"}\n                                                                                    onClick={event => {\n                                                                                        document.querySelector('#file-upload').click();\n                                                                                    }}>Import answers</Button>\n                                                                            <Button className={'btn-import'}\n                                                                                    size={\"small\"}\n                                                                                    onClick={event => {\n                                                                                        window.open(`/ListAnswer.xlsx`);\n                                                                                    }}>Download sample</Button>\n                                                                        </>\n                                                                    ) : null\n                                                                }\n                                                            </div>\n                                                            <Form.List name=\"answers\">\n                                                                {(fields, {add, remove}) => (\n                                                                    <>\n                                                                        {fields.map(({\n                                                                                         key,\n                                                                                         name,\n                                                                                         fieldKey,\n                                                                                         ...restField\n                                                                                     }) => (\n                                                                            <div key={key}\n                                                                                 style={{\n                                                                                     display: 'flex',\n                                                                                     marginBottom: 8\n                                                                                 }}\n                                                                                 align=\"baseline\">\n                                                                                <Form.Item\n                                                                                    {...restField}\n                                                                                    style={{flex: 1, width: '100%'}}\n                                                                                    name={[name, 'value']}\n                                                                                    fieldKey={[fieldKey, 'value']}\n                                                                                >\n                                                                                    <Input\n                                                                                        style={{flex: 1, width: '100%'}}\n                                                                                        placeholder=\"Answer content\"/>\n                                                                                </Form.Item>\n                                                                                <Form.Item\n                                                                                    initialValue={key}\n                                                                                    hidden={true}\n                                                                                    name={[name, 'key']}\n                                                                                    style={{marginLeft: 10}}\n                                                                                    fieldKey={[fieldKey, 'key']}\n                                                                                >\n                                                                                    <Input/>\n                                                                                </Form.Item>\n                                                                                <MinusCircleOutlined\n                                                                                    style={{\n                                                                                        height: 38,\n                                                                                        display: \"flex\",\n                                                                                        alignItems: \"center\",\n                                                                                        justifyContent: \"center\",\n                                                                                        marginLeft: 10\n                                                                                    }}\n                                                                                    onClick={() => remove(name)}/>\n                                                                            </div>\n                                                                        ))}\n                                                                        <Form.Item>\n                                                                            <Button type=\"dashed\" onClick={() => add()}\n                                                                                    block\n                                                                                    icon={<PlusOutlined style={{\n                                                                                        height: 38,\n                                                                                        display: \"inline-flex\",\n                                                                                        alignItems: \"center\",\n                                                                                        justifyContent: \"center\",\n                                                                                        marginLeft: 10\n                                                                                    }}/>}>\n                                                                                Add answer\n                                                                            </Button>\n                                                                        </Form.Item>\n                                                                    </>\n                                                                )}\n                                                            </Form.List>\n                                                        </Col>\n                                                    </Row>\n                                                ) : null\n                                            }\n\n\n                                            <Form.Item style={{marginTop: 20}}>\n                                                <Button\n                                                    style={{marginRight: 12}} {...checkPermissionStyle('edit', 'question-management', true, isEditMode)}\n                                                    type=\"primary\" htmlType=\"submit\">\n                                                    Submit\n                                                </Button>\n\n                                                <Button htmlType=\"button\"\n                                                        onClick={() => injectMode ? onCancel() : setModalCancelVisible(true)}>\n                                                    Cancel\n                                                </Button>\n                                            </Form.Item>\n                                        </Card.Body>\n                                    </Card>\n                                    <Modal\n                                        title={`Cancel ${isEditMode ? 'Edit' : 'Add'} Question`}\n                                        visible={modalCancelVisible}\n                                        onOk={() => onCancel()}\n                                        onCancel={() => setModalCancelVisible(false)}\n                                        cancelText=\"Cancel\"\n                                        okText=\"Ok\">\n                                        <p>Do you want to cancel and quit ?</p>\n                                    </Modal>\n                                </div>\n                            </div>\n                        </div>\n                    </Form>\n                ) : <CircularProgress size={20}/>\n            }\n        </>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}