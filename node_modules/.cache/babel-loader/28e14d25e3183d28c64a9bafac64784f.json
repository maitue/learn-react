{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AnalyzeDocumentRequest, AnalyzeDocumentResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1AnalyzeDocumentCommand, serializeAws_json1_1AnalyzeDocumentCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Analyzes an input document for relationships between detected items.  </p>\n *          <p>The types of information returned are as follows: </p>\n *          <ul>\n *             <li>\n *                <p>Form data (key-value pairs). The related information is returned in two <a>Block</a> objects, each of type <code>KEY_VALUE_SET</code>: a KEY\n *                   <code>Block</code> object and a VALUE <code>Block</code> object. For example,\n *                   <i>Name: Ana Silva Carolina</i> contains a key and value.\n *                   <i>Name:</i> is the key. <i>Ana Silva Carolina</i> is\n *                the value.</p>\n *             </li>\n *             <li>\n *                <p>Table and table cell data. A TABLE <code>Block</code> object contains information about a detected table. A CELL\n *                <code>Block</code> object is returned for each cell in a table.</p>\n *             </li>\n *             <li>\n *                <p>Lines and words of text. A LINE <code>Block</code> object contains one or more WORD <code>Block</code> objects.\n *         All lines and words that are detected in the document are returned (including text that doesn't have a\n *                relationship with the value of <code>FeatureTypes</code>). </p>\n *             </li>\n *          </ul>\n *\n *          <p>Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.\n *          A SELECTION_ELEMENT <code>Block</code> object contains information about a selection element,\n *          including the selection status.</p>\n *          <p>You can choose which type of analysis to perform by specifying the <code>FeatureTypes</code> list.\n *       </p>\n *          <p>The output is returned in a list of <code>Block</code> objects.</p>\n *          <p>\n *             <code>AnalyzeDocument</code> is a synchronous operation. To analyze documents\n *       asynchronously, use <a>StartDocumentAnalysis</a>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\n\nvar AnalyzeDocumentCommand =\n/** @class */\nfunction (_super) {\n  __extends(AnalyzeDocumentCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function AnalyzeDocumentCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  AnalyzeDocumentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"AnalyzeDocumentCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: AnalyzeDocumentRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: AnalyzeDocumentResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  AnalyzeDocumentCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1AnalyzeDocumentCommand(input, context);\n  };\n\n  AnalyzeDocumentCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1AnalyzeDocumentCommand(output, context);\n  };\n\n  return AnalyzeDocumentCommand;\n}($Command);\n\nexport { AnalyzeDocumentCommand };","map":null,"metadata":{},"sourceType":"module"}