{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DeleteStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1DeleteStreamCommand, serializeAws_json1_1DeleteStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Deletes a Kinesis data stream and all its shards and data. You must shut down any\n *             applications that are operating on the stream before you delete the stream. If an\n *             application attempts to operate on a deleted stream, it receives the exception\n *                 <code>ResourceNotFoundException</code>.</p>\n *         <p>If the stream is in the <code>ACTIVE</code> state, you can delete it. After a\n *                 <code>DeleteStream</code> request, the specified stream is in the\n *                 <code>DELETING</code> state until Kinesis Data Streams completes the\n *             deletion.</p>\n *         <p>\n *             <b>Note:</b> Kinesis Data Streams might continue to accept\n *             data read and write operations, such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in the\n *                 <code>DELETING</code> state until the stream deletion is complete.</p>\n *         <p>When you delete a stream, any shards in that stream are also deleted, and any tags\n *             are dissociated from the stream.</p>\n *         <p>You can use the <a>DescribeStream</a> operation to check the state of\n *             the stream, which is returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>DeleteStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\n\nvar DeleteStreamCommand =\n/** @class */\nfunction (_super) {\n  __extends(DeleteStreamCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DeleteStreamCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DeleteStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"DeleteStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DeleteStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DeleteStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DeleteStreamCommand(input, context);\n  };\n\n  DeleteStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DeleteStreamCommand(output, context);\n  };\n\n  return DeleteStreamCommand;\n}($Command);\n\nexport { DeleteStreamCommand };","map":null,"metadata":{},"sourceType":"module"}