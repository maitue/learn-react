{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetFaceSearchRequest, GetFaceSearchResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetFaceSearchCommand, serializeAws_json1_1GetFaceSearchCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the face search results for Amazon Rekognition Video face search started by\n *       <a>StartFaceSearch</a>. The search returns faces in a collection that match the faces\n *     of persons detected in a video. It also includes the time(s) that faces are matched in the video.</p>\n *          <p>Face search in a video is an asynchronous operation. You start face search by calling\n *       to <a>StartFaceSearch</a> which returns a job identifier (<code>JobId</code>).\n *       When the search operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartFaceSearch</code>.\n *       To get the search results, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetFaceSearch</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.</p>\n *\n *          <p>For more information, see Searching Faces in a Collection in the\n *       Amazon Rekognition Developer Guide.</p>\n *          <p>The search results are retured in an array, <code>Persons</code>, of\n *     <a>PersonMatch</a> objects. Each<code>PersonMatch</code> element contains\n *     details about the matching faces in the input collection, person information (facial attributes,\n *     bounding boxes, and person identifer)\n *     for the matched person, and the time the person was matched in the video.</p>\n *          <note>\n *\n *             <p>\n *                <code>GetFaceSearch</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *\n *          <p>By default, the <code>Persons</code> array is sorted by the time, in milliseconds from the\n *     start of the video, persons are matched.\n *     You can also sort by persons by specifying <code>INDEX</code> for the <code>SORTBY</code> input\n *     parameter.</p>\n */\n\nvar GetFaceSearchCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetFaceSearchCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetFaceSearchCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetFaceSearchCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetFaceSearchCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetFaceSearchRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetFaceSearchResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetFaceSearchCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetFaceSearchCommand(input, context);\n  };\n\n  GetFaceSearchCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetFaceSearchCommand(output, context);\n  };\n\n  return GetFaceSearchCommand;\n}($Command);\n\nexport { GetFaceSearchCommand };","map":null,"metadata":{},"sourceType":"module"}