{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DeleteObjectsOutput, DeleteObjectsRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlDeleteObjectsCommand, serializeAws_restXmlDeleteObjectsCommand } from \"../protocols/Aws_restXml\";\nimport { getApplyMd5BodyChecksumPlugin } from \"@aws-sdk/middleware-apply-body-checksum\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This operation enables you to delete multiple objects from a bucket using a single HTTP\n *          request. If you know the object keys that you want to delete, then this operation provides\n *          a suitable alternative to sending individual delete requests, reducing per-request\n *          overhead.</p>\n *\n *          <p>The request contains a list of up to 1000 keys that you want to delete. In the XML, you\n *          provide the object key names, and optionally, version IDs if you want to delete a specific\n *          version of the object from a versioning-enabled bucket. For each key, Amazon S3 performs a\n *          delete operation and returns the result of that delete, success, or failure, in the\n *          response. Note that if the object specified in the request is not found, Amazon S3 returns the\n *          result as deleted.</p>\n *\n *          <p> The operation supports two modes for the response: verbose and quiet. By default, the\n *          operation uses verbose mode in which the response includes the result of deletion of each\n *          key in your request. In quiet mode the response includes only keys where the delete\n *          operation encountered an error. For a successful deletion, the operation does not return\n *          any information about the delete in the response body.</p>\n *\n *          <p>When performing this operation on an MFA Delete enabled bucket, that attempts to delete\n *          any versioned objects, you must include an MFA token. If you do not provide one, the entire\n *          request will fail, even if there are non-versioned objects you are trying to delete. If you\n *          provide an invalid token, whether there are versioned keys in the request or not, the\n *          entire Multi-Object Delete request will fail. For information about MFA Delete, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html#MultiFactorAuthenticationDelete\"> MFA\n *          Delete</a>.</p>\n *\n *          <p>Finally, the Content-MD5 header is required for all Multi-Object Delete requests. Amazon\n *          S3 uses the header value to ensure that your request body has not been altered in\n *          transit.</p>\n *\n *          <p>The following operations are related to <code>DeleteObjects</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar DeleteObjectsCommand =\n/** @class */\nfunction (_super) {\n  __extends(DeleteObjectsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DeleteObjectsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DeleteObjectsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    this.middlewareStack.use(getApplyMd5BodyChecksumPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"DeleteObjectsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DeleteObjectsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DeleteObjectsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DeleteObjectsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlDeleteObjectsCommand(input, context);\n  };\n\n  DeleteObjectsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlDeleteObjectsCommand(output, context);\n  };\n\n  return DeleteObjectsCommand;\n}($Command);\n\nexport { DeleteObjectsCommand };","map":null,"metadata":{},"sourceType":"module"}