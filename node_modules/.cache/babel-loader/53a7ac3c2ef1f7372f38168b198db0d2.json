{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport AsyncStorageDatabase from './AsyncStorageDatabase';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, traverseModel, validatePredicate, sortCompareFunction } from '../../util';\nvar logger = new Logger('DataStore');\n\nvar AsyncStorageAdapter =\n/** @class */\nfunction () {\n  function AsyncStorageAdapter() {}\n\n  AsyncStorageAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return this.getStorename(namespace, modelName);\n  };\n\n  AsyncStorageAdapter.prototype.getStorename = function (namespace, modelName) {\n    var storeName = namespace + \"_\" + modelName;\n    return storeName;\n  };\n\n  AsyncStorageAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.initPromise) return [3\n            /*break*/\n            , 1];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.initPromise];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 7,, 8]);\n\n            if (!!this.db) return [3\n            /*break*/\n            , 6];\n            this.db = new AsyncStorageDatabase();\n            return [4\n            /*yield*/\n            , this.db.init()];\n\n          case 5:\n            _a.sent();\n\n            this.resolve();\n            _a.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            error_1 = _a.sent();\n            this.reject(error_1);\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.save = function (model, condition) {\n    var e_1, _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, connectedModels, namespaceName, set, connectionStoreNames, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, id, fromDB_1, opType, e_1_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                  item = _a.item,\n                  instance = _a.instance;\n\n              var storeName = _this.getStorename(namespaceName, modelName);\n\n              set.add(storeName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance\n              };\n            });\n            return [4\n            /*yield*/\n            , this.db.get(model.id, storeName)];\n\n          case 1:\n            fromDB = _b.sent();\n\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n\n            result = [];\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 9, 10, 15]);\n\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , connectionStoreNames_1.next()];\n\n          case 4:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3\n            /*break*/\n            , 8];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance;\n            id = item.id;\n            return [4\n            /*yield*/\n            , this.db.get(id, storeName_1)];\n\n          case 5:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 ? OpType.UPDATE : OpType.INSERT;\n            if (!(id === model.id || opType === OpType.INSERT)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.db.save(item, storeName_1)];\n\n          case 6:\n            _b.sent();\n\n            result.push([instance, opType]);\n            _b.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 3];\n\n          case 8:\n            return [3\n            /*break*/\n            , 15];\n\n          case 9:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 15];\n\n          case 10:\n            _b.trys.push([10,, 13, 14]);\n\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , _a.call(connectionStoreNames_1)];\n\n          case 11:\n            _b.sent();\n\n            _b.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (e_1) throw e_1.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n\n    var e_2, _a, e_3, _b, e_4, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, relations_1, relations_1_1, relation, fieldName, modelName, targetName, relationType, storeName, modelConstructor_1, _d, recordItem, connectionRecord, e_3_1, recordItem, connectionRecord, e_4_1, e_2_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return _this.getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n\n            if (connectionStoreNames.length === 0) {\n              return [2\n              /*return*/\n              , records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 34, 35, 40]);\n\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , relations_1.next()];\n\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3\n            /*break*/\n            , 33];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName, relationType = relation.relationType;\n            storeName = this.getStorename(namespaceName, modelName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 4];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 30];\n            }\n\n            return [3\n            /*break*/\n            , 31];\n\n          case 4:\n            _e.trys.push([4, 10, 11, 16]);\n\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , records_1.next()];\n\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3\n            /*break*/\n            , 9];\n            recordItem = records_1_1.value;\n            if (!recordItem[fieldName]) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , this.db.get(recordItem[fieldName], storeName)];\n\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 5];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(records_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_3) throw e_3.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 32];\n\n          case 17:\n            _e.trys.push([17, 23, 24, 29]);\n\n            records_2 = __asyncValues(records);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , records_2.next()];\n\n          case 19:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3\n            /*break*/\n            , 22];\n            recordItem = records_2_1.value;\n            if (!recordItem[targetName]) return [3\n            /*break*/\n            , 21];\n            return [4\n            /*yield*/\n            , this.db.get(recordItem[targetName], storeName)];\n\n          case 20:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 21;\n\n          case 21:\n            return [3\n            /*break*/\n            , 18];\n\n          case 22:\n            return [3\n            /*break*/\n            , 29];\n\n          case 23:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 29];\n\n          case 24:\n            _e.trys.push([24,, 27, 28]);\n\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3\n            /*break*/\n            , 26];\n            return [4\n            /*yield*/\n            , _c.call(records_2)];\n\n          case 25:\n            _e.sent();\n\n            _e.label = 26;\n\n          case 26:\n            return [3\n            /*break*/\n            , 28];\n\n          case 27:\n            if (e_4) throw e_4.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [3\n            /*break*/\n            , 32];\n\n          case 30:\n            // TODO: Lazy loading\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 32];\n\n          case 32:\n            return [3\n            /*break*/\n            , 2];\n\n          case 33:\n            return [3\n            /*break*/\n            , 40];\n\n          case 34:\n            e_2_1 = _e.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 40];\n\n          case 35:\n            _e.trys.push([35,, 38, 39]);\n\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3\n            /*break*/\n            , 37];\n            return [4\n            /*yield*/\n            , _a.call(relations_1)];\n\n          case 36:\n            _e.sent();\n\n            _e.label = 37;\n\n          case 37:\n            return [3\n            /*break*/\n            , 39];\n\n          case 38:\n            if (e_2) throw e_2.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 39:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [2\n            /*return*/\n            , records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, queryById, hasSort, hasPagination, records;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            queryById = predicates && this.idFromPredicate(predicates);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4\n            /*yield*/\n            , function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryById) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , this.getById(storeName, queryById)];\n\n                    case 1:\n                      record = _a.sent();\n                      return [2\n                      /*return*/\n                      , record ? [record] : []];\n\n                    case 2:\n                      if (!predicates) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.filterOnPredicate(storeName, predicates)];\n\n                    case 3:\n                      filtered = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(filtered, pagination)];\n\n                    case 4:\n                      if (!(hasSort || hasPagination)) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , this.getAll(storeName)];\n\n                    case 5:\n                      all = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(all, pagination)];\n\n                    case 6:\n                      return [2\n                      /*return*/\n                      , this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n\n          case 1:\n            records = _a.sent();\n            return [4\n            /*yield*/\n            , this.load(namespaceName, modelConstructor.name, records)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.getById = function (storeName, id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.get(id, storeName)];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.idFromPredicate = function (predicates) {\n    var predicateObjs = predicates.predicates;\n    var idPredicate = predicateObjs.length === 1 && predicateObjs.find(function (p) {\n      return isPredicateObj(p) && p.field === 'id' && p.operator === 'eq';\n    });\n    return idPredicate && idPredicate.operand;\n  };\n\n  AsyncStorageAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4\n            /*yield*/\n            , this.getAll(storeName)];\n\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2\n            /*return*/\n            , filtered];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n\n      var _a = pagination.page,\n          page = _a === void 0 ? 0 : _a,\n          _b = pagination.limit,\n          limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n\n    return records;\n  };\n\n  AsyncStorageAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.db.getOne(firstOrLast, storeName)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3\n            /*break*/\n            , 8];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            return [4\n            /*yield*/\n            , this.query(modelConstructor, condition)];\n\n          case 1:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 3:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 5:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 6:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 7:\n            return [3\n            /*break*/\n            , 15];\n\n          case 8:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3\n            /*break*/\n            , 11];\n            return [4\n            /*yield*/\n            , this.db.get(model.id, storeName)];\n\n          case 9:\n            fromDB = _a.sent();\n\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2\n              /*return*/\n              , [[model], []]];\n            }\n\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 10:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 13];\n\n          case 11:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 12:\n            _a.sent();\n\n            _a.label = 13;\n\n          case 13:\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 14:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [[model], deletedModels]];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n\n    var e_5, _a, e_6, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteItem, storeName, items, items_1, items_1_1, item, id, e_6_1, e_5_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 17, 18, 23]);\n\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , deleteQueue_1.next()];\n\n          case 2:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3\n            /*break*/\n            , 16];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            _c.label = 3;\n\n          case 3:\n            _c.trys.push([3, 9, 10, 15]);\n\n            items_1 = __asyncValues(items);\n            _c.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , items_1.next()];\n\n          case 5:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3\n            /*break*/\n            , 8];\n            item = items_1_1.value;\n            if (!item) return [3\n            /*break*/\n            , 7];\n            if (!(typeof item === 'object')) return [3\n            /*break*/\n            , 7];\n            id = item['id'];\n            return [4\n            /*yield*/\n            , this.db.delete(id, storeName)];\n\n          case 6:\n            _c.sent();\n\n            _c.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 4];\n\n          case 8:\n            return [3\n            /*break*/\n            , 15];\n\n          case 9:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 15];\n\n          case 10:\n            _c.trys.push([10,, 13, 14]);\n\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , _b.call(items_1)];\n\n          case 11:\n            _c.sent();\n\n            _c.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (e_6) throw e_6.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [3\n            /*break*/\n            , 1];\n\n          case 16:\n            return [3\n            /*break*/\n            , 23];\n\n          case 17:\n            e_5_1 = _c.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 23];\n\n          case 18:\n            _c.trys.push([18,, 21, 22]);\n\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3\n            /*break*/\n            , 20];\n            return [4\n            /*yield*/\n            , _a.call(deleteQueue_1)];\n\n          case 19:\n            _c.sent();\n\n            _c.label = 20;\n\n          case 20:\n            return [3\n            /*break*/\n            , 22];\n\n          case 21:\n            if (e_5) throw e_5.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 22:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 23:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Populates the delete Queue with all the items to delete\n   * @param relations\n   * @param models\n   * @param srcModel\n   * @param nameSpace\n   * @param deleteQueue\n   */\n\n\n  AsyncStorageAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n\n    var e_7, _a, e_8, _b, e_9, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, storeName, index, _d, model, hasOneIndex, hasOneCustomField, value, allRecords, recordToDelete, e_8_1, model, allRecords, childrenArray, e_9_1, e_7_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 35, 36, 41]);\n\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , relations_2.next()];\n\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3\n            /*break*/\n            , 34];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName;\n            storeName = this.getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) || // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 31];\n            }\n\n            return [3\n            /*break*/\n            , 32];\n\n          case 3:\n            _e.trys.push([3, 10, 11, 16]);\n\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , models_1.next()];\n\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3\n            /*break*/\n            , 9];\n            model = models_1_1.value;\n            hasOneIndex = index || 'byId';\n            hasOneCustomField = targetName in model;\n            value = hasOneCustomField ? model[targetName] : model.id;\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 6:\n            allRecords = _e.sent();\n            recordToDelete = allRecords.filter(function (childItem) {\n              return childItem[hasOneIndex] === value;\n            });\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete, modelName, nameSpace, deleteQueue)];\n\n          case 7:\n            _e.sent();\n\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 4];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(models_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_8) throw e_8.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 33];\n\n          case 17:\n            _e.trys.push([17, 24, 25, 30]);\n\n            models_2 = __asyncValues(models);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , models_2.next()];\n\n          case 19:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3\n            /*break*/\n            , 23];\n            model = models_2_1.value;\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 20:\n            allRecords = _e.sent();\n            childrenArray = allRecords.filter(function (childItem) {\n              return childItem[index] === model.id;\n            });\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n\n          case 21:\n            _e.sent();\n\n            _e.label = 22;\n\n          case 22:\n            return [3\n            /*break*/\n            , 18];\n\n          case 23:\n            return [3\n            /*break*/\n            , 30];\n\n          case 24:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 30];\n\n          case 25:\n            _e.trys.push([25,, 28, 29]);\n\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3\n            /*break*/\n            , 27];\n            return [4\n            /*yield*/\n            , _c.call(models_2)];\n\n          case 26:\n            _e.sent();\n\n            _e.label = 27;\n\n          case 27:\n            return [3\n            /*break*/\n            , 29];\n\n          case 28:\n            if (e_9) throw e_9.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 30:\n            return [3\n            /*break*/\n            , 33];\n\n          case 31:\n            // Intentionally blank\n            return [3\n            /*break*/\n            , 33];\n\n          case 32:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 33];\n\n          case 33:\n            return [3\n            /*break*/\n            , 1];\n\n          case 34:\n            return [3\n            /*break*/\n            , 41];\n\n          case 35:\n            e_7_1 = _e.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 41];\n\n          case 36:\n            _e.trys.push([36,, 39, 40]);\n\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3\n            /*break*/\n            , 38];\n            return [4\n            /*yield*/\n            , _a.call(relations_2)];\n\n          case 37:\n            _e.sent();\n\n            _e.label = 38;\n\n          case 38:\n            return [3\n            /*break*/\n            , 40];\n\n          case 39:\n            if (e_7) throw e_7.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 41:\n            deleteQueue.push({\n              storeName: this.getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.clear()];\n\n          case 1:\n            _a.sent();\n\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelName, namespaceName, storeName, batch, _loop_1, this_1, items_2, items_2_1, item;\n\n      var e_10, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            modelName = modelConstructor.name;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorename(namespaceName, modelName);\n            batch = [];\n\n            _loop_1 = function _loop_1(item) {\n              var id = item.id;\n              var connectedModels = traverseModel(modelConstructor.name, this_1.modelInstanceCreator(modelConstructor, item), this_1.schema.namespaces[this_1.namespaceResolver(modelConstructor)], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n              var instance = connectedModels.find(function (_a) {\n                var instance = _a.instance;\n                return instance.id === id;\n              }).instance;\n              batch.push(instance);\n            };\n\n            this_1 = this;\n\n            try {\n              for (items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()) {\n                item = items_2_1.value;\n\n                _loop_1(item);\n              }\n            } catch (e_10_1) {\n              e_10 = {\n                error: e_10_1\n              };\n            } finally {\n              try {\n                if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n              } finally {\n                if (e_10) throw e_10.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.db.batchSave(storeName, batch)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  return AsyncStorageAdapter;\n}();\n\nexport { AsyncStorageAdapter };\nexport default new AsyncStorageAdapter();","map":null,"metadata":{},"sourceType":"module"}