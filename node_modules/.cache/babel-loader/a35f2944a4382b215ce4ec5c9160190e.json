{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ListShardsInput, ListShardsOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1ListShardsCommand, serializeAws_json1_1ListShardsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Lists the shards in a stream and provides information about each shard. This\n *             operation has a limit of 100 transactions per second per data stream.</p>\n *         <important>\n *             <p>This API is a new operation that is used by the Amazon Kinesis Client Library\n *                 (KCL). If you have a fine-grained IAM policy that only allows specific operations,\n *                 you must update your policy to allow calls to this API. For more information, see\n *                     <a href=\"https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html\">Controlling Access to Amazon Kinesis Data Streams Resources Using\n *                 IAM</a>.</p>\n *         </important>\n */\n\nvar ListShardsCommand =\n/** @class */\nfunction (_super) {\n  __extends(ListShardsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function ListShardsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  ListShardsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"ListShardsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: ListShardsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: ListShardsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  ListShardsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1ListShardsCommand(input, context);\n  };\n\n  ListShardsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1ListShardsCommand(output, context);\n  };\n\n  return ListShardsCommand;\n}($Command);\n\nexport { ListShardsCommand };","map":null,"metadata":{},"sourceType":"module"}