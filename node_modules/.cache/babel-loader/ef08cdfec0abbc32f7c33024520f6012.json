{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport { resolveEndpointsConfig, resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\n\nvar LexRuntimeServiceClient =\n/** @class */\nfunction (_super) {\n  __extends(LexRuntimeServiceClient, _super);\n\n  function LexRuntimeServiceClient(configuration) {\n    var _this = this;\n\n    var _config_0 = __assign(__assign({}, __ClientDefaultValues), configuration);\n\n    var _config_1 = resolveRegionConfig(_config_0);\n\n    var _config_2 = resolveEndpointsConfig(_config_1);\n\n    var _config_3 = resolveAwsAuthConfig(_config_2);\n\n    var _config_4 = resolveRetryConfig(_config_3);\n\n    var _config_5 = resolveHostHeaderConfig(_config_4);\n\n    var _config_6 = resolveUserAgentConfig(_config_5);\n\n    _this = _super.call(this, _config_6) || this;\n    _this.config = _config_6;\n\n    _this.middlewareStack.use(getAwsAuthPlugin(_this.config));\n\n    _this.middlewareStack.use(getRetryPlugin(_this.config));\n\n    _this.middlewareStack.use(getContentLengthPlugin(_this.config));\n\n    _this.middlewareStack.use(getHostHeaderPlugin(_this.config));\n\n    _this.middlewareStack.use(getLoggerPlugin(_this.config));\n\n    _this.middlewareStack.use(getUserAgentPlugin(_this.config));\n\n    return _this;\n  }\n\n  LexRuntimeServiceClient.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  return LexRuntimeServiceClient;\n}(__Client);\n\nexport { LexRuntimeServiceClient };","map":null,"metadata":{},"sourceType":"module"}