{"ast":null,"code":"import _objectSpread from \"C:\\\\laragon\\\\www\\\\LaylaUserGuide\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { LOGIN_URL, ME_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from '../../app/crud/auth.crud';\nimport userTableMock from './userTableMock';\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(function (_ref) {\n    var data = _ref.data;\n\n    var _JSON$parse = JSON.parse(data),\n        email = _JSON$parse.email,\n        password = _JSON$parse.password;\n\n    if (email && password) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase() && x.password === password;\n      });\n\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [400];\n  });\n  mock.onPost(REGISTER_URL).reply(function (_ref2) {\n    var data = _ref2.data;\n\n    var _JSON$parse2 = JSON.parse(data),\n        email = _JSON$parse2.email,\n        fullname = _JSON$parse2.fullname,\n        username = _JSON$parse2.username,\n        password = _JSON$parse2.password;\n\n    if (email && fullname && username && password) {\n      var user = {\n        email: email,\n        fullname: fullname,\n        username: username,\n        password: password,\n        roles: [2],\n        // Manager\n        accessToken: 'access-token-' + Math.random(),\n        refreshToken: 'access-token-' + Math.random(),\n        pic: process.env.PUBLIC_URL + '/media/users/default.jpg'\n      };\n      userTableMock.push(user);\n      return [200, _objectSpread(_objectSpread({}, user), {}, {\n        password: undefined\n      })];\n    }\n\n    return [400];\n  });\n  mock.onPost(REQUEST_PASSWORD_URL).reply(function (_ref3) {\n    var data = _ref3.data;\n\n    var _JSON$parse3 = JSON.parse(data),\n        email = _JSON$parse3.email;\n\n    if (email) {\n      var user = userTableMock.find(function (x) {\n        return x.email.toLowerCase() === email.toLowerCase();\n      });\n\n      if (user) {\n        user.password = undefined;\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [400];\n  });\n  mock.onGet(ME_URL).reply(function (_ref4) {\n    var Authorization = _ref4.headers.Authorization;\n    var accessToken = Authorization && Authorization.startsWith('Bearer ') && Authorization.slice('Bearer '.length);\n\n    if (accessToken) {\n      var user = userTableMock.find(function (x) {\n        return x.accessToken === accessToken;\n      });\n\n      if (user) {\n        return [200, _objectSpread(_objectSpread({}, user), {}, {\n          password: undefined\n        })];\n      }\n    }\n\n    return [401];\n  });\n}","map":{"version":3,"names":["LOGIN_URL","ME_URL","REGISTER_URL","REQUEST_PASSWORD_URL","userTableMock","mockAuth","mock","onPost","reply","data","JSON","parse","email","password","user","find","x","toLowerCase","undefined","fullname","username","roles","accessToken","Math","random","refreshToken","pic","process","env","PUBLIC_URL","push","onGet","Authorization","headers","startsWith","slice","length"],"sources":["C:/laragon/www/LaylaUserGuide/src/_metronic/__mocks__/mockAuth.js"],"sourcesContent":["import { LOGIN_URL, ME_URL, REGISTER_URL, REQUEST_PASSWORD_URL } from '../../app/crud/auth.crud';\nimport userTableMock from './userTableMock';\n\nexport default function mockAuth(mock) {\n  mock.onPost(LOGIN_URL).reply(({ data }) => {\n    const { email, password } = JSON.parse(data);\n\n    if (email && password) {\n      const user = userTableMock.find(\n        (x) => x.email.toLowerCase() === email.toLowerCase() && x.password === password,\n      );\n\n      if (user) {\n        return [200, { ...user, password: undefined }];\n      }\n    }\n\n    return [400];\n  });\n\n  mock.onPost(REGISTER_URL).reply(({ data }) => {\n    const { email, fullname, username, password } = JSON.parse(data);\n\n    if (email && fullname && username && password) {\n      const user = {\n        email,\n        fullname,\n        username,\n        password,\n        roles: [2], // Manager\n        accessToken: 'access-token-' + Math.random(),\n        refreshToken: 'access-token-' + Math.random(),\n        pic: process.env.PUBLIC_URL + '/media/users/default.jpg',\n      };\n\n      userTableMock.push(user);\n\n      return [200, { ...user, password: undefined }];\n    }\n\n    return [400];\n  });\n\n  mock.onPost(REQUEST_PASSWORD_URL).reply(({ data }) => {\n    const { email } = JSON.parse(data);\n\n    if (email) {\n      const user = userTableMock.find((x) => x.email.toLowerCase() === email.toLowerCase());\n\n      if (user) {\n        user.password = undefined;\n\n        return [200, { ...user, password: undefined }];\n      }\n    }\n\n    return [400];\n  });\n\n  mock.onGet(ME_URL).reply(({ headers: { Authorization } }) => {\n    const accessToken =\n      Authorization && Authorization.startsWith('Bearer ') && Authorization.slice('Bearer '.length);\n\n    if (accessToken) {\n      const user = userTableMock.find((x) => x.accessToken === accessToken);\n\n      if (user) {\n        return [200, { ...user, password: undefined }];\n      }\n    }\n\n    return [401];\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}