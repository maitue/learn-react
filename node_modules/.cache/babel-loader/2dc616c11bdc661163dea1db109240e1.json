{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { Logger, Mutex } from '@aws-amplify/core';\nimport PushStream from 'zen-push';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType, QueryOne, isTargetNameAssociation } from '../types';\nimport { isModelConstructor, STORAGE, validatePredicate, valuesEqual } from '../util';\nimport getDefaultAdapter from './adapter/getDefaultAdapter';\nvar logger = new Logger('DataStore');\n\nvar StorageClass =\n/** @class */\nfunction () {\n  function StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.getModelConstructorByModelName = getModelConstructorByModelName;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.adapter = adapter;\n    this.sessionId = sessionId;\n    this.adapter = getDefaultAdapter();\n    this.pushStream = new PushStream();\n  }\n\n  StorageClass.getNamespace = function () {\n    var namespace = {\n      name: STORAGE,\n      relationships: {},\n      enums: {},\n      models: {},\n      nonModels: {}\n    };\n    return namespace;\n  };\n\n  StorageClass.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolve, reject;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.initialized !== undefined)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.initialized];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            logger.debug('Starting Storage');\n            this.initialized = new Promise(function (res, rej) {\n              resolve = res;\n              reject = rej;\n            });\n            this.adapter.setUp(this.schema, this.namespaceResolver, this.modelInstanceCreator, this.getModelConstructorByModelName, this.sessionId).then(resolve, reject);\n            return [4\n            /*yield*/\n            , this.initialized];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.save(model, condition)];\n\n          case 2:\n            result = _a.sent();\n            result.forEach(function (r) {\n              var _a = __read(r, 2),\n                  originalElement = _a[0],\n                  opType = _a[1]; // truthy when save is called by the Merger\n\n\n              var syncResponse = !!mutator;\n              var updateMutationInput; // don't attempt to calc mutation input when storage.save\n              // is called by Merger, i.e., when processing an AppSync response\n\n              if (opType === OpType.UPDATE && !syncResponse) {\n                updateMutationInput = _this.getUpdateMutationInput(model, originalElement, patchesTuple); // // an update without changed user fields\n                // => don't create mutationEvent\n\n                if (updateMutationInput === null) {\n                  return result;\n                }\n              }\n\n              var element = updateMutationInput || originalElement;\n              var modelConstructor = Object.getPrototypeOf(originalElement).constructor;\n\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: ModelPredicateCreator.getPredicates(condition, false)\n              });\n            });\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleted, models, modelIds;\n\n      var _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.delete(modelOrModelConstructor, condition)];\n\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 2]), models = _a[0], deleted = _a[1];\n            modelIds = new Set(models.map(function (_a) {\n              var id = _a.id;\n              return id;\n            }));\n\n            if (!isModelConstructor(modelOrModelConstructor) && !Array.isArray(deleted)) {\n              deleted = [deleted];\n            }\n\n            deleted.forEach(function (model) {\n              var modelConstructor = Object.getPrototypeOf(model).constructor;\n              var theCondition;\n\n              if (!isModelConstructor(modelOrModelConstructor)) {\n                theCondition = modelIds.has(model.id) ? ModelPredicateCreator.getPredicates(condition, false) : undefined;\n              }\n\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: OpType.DELETE,\n                element: model,\n                mutator: mutator,\n                condition: theCondition\n              });\n            });\n            return [2\n            /*return*/\n            , [models, deleted]];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.query(modelConstructor, predicate, pagination)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.queryOne(modelConstructor, firstOrLast)];\n\n          case 2:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    var listenToAll = !modelConstructor;\n\n    var _a = ModelPredicateCreator.getPredicates(predicate, false) || {},\n        predicates = _a.predicates,\n        type = _a.type;\n\n    var hasPredicate = !!predicates;\n    var result = this.pushStream.observable.filter(function (_a) {\n      var mutator = _a.mutator;\n      return !skipOwn || mutator !== skipOwn;\n    }).map(function (_a) {\n      var _mutator = _a.mutator,\n          message = __rest(_a, [\"mutator\"]);\n\n      return message;\n    });\n\n    if (!listenToAll) {\n      result = result.filter(function (_a) {\n        var model = _a.model,\n            element = _a.element;\n\n        if (modelConstructor !== model) {\n          return false;\n        }\n\n        if (hasPredicate) {\n          return validatePredicate(element, type, predicates);\n        }\n\n        return true;\n      });\n    }\n\n    return result;\n  };\n\n  StorageClass.prototype.clear = function (completeObservable) {\n    if (completeObservable === void 0) {\n      completeObservable = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.initialized = undefined;\n            return [4\n            /*yield*/\n            , this.adapter.clear()];\n\n          case 1:\n            _a.sent();\n\n            if (completeObservable) {\n              this.pushStream.complete();\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.batchSave = function (modelConstructor, items, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.batchSave(modelConstructor, items)];\n\n          case 2:\n            result = _a.sent();\n            result.forEach(function (_a) {\n              var _b = __read(_a, 2),\n                  element = _b[0],\n                  opType = _b[1];\n\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: undefined\n              });\n            });\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  }; // returns null if no user fields were changed (determined by value comparison)\n\n\n  StorageClass.prototype.getUpdateMutationInput = function (model, originalElement, patchesTuple) {\n    var containsPatches = patchesTuple && patchesTuple.length;\n\n    if (!containsPatches) {\n      return null;\n    }\n\n    var _a = __read(patchesTuple, 2),\n        patches = _a[0],\n        source = _a[1];\n\n    var updatedElement = {}; // extract array of updated fields from patches\n\n    var updatedFields = patches.map(function (patch) {\n      return patch.path && patch.path[0];\n    }); // check model def for association and replace with targetName if exists\n\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespace = this.namespaceResolver(modelConstructor);\n    var fields = this.schema.namespaces[namespace].models[modelConstructor.name].fields; // set original values for these fields\n\n    updatedFields.forEach(function (field) {\n      var targetName = isTargetNameAssociation(fields[field].association); // if field refers to a belongsTo relation, use the target field instead\n\n      var key = targetName || field; // check field values by value. Ignore unchanged fields\n\n      if (!valuesEqual(source[key], originalElement[key])) {\n        updatedElement[key] = originalElement[key];\n      }\n    });\n\n    if (Object.keys(updatedElement).length === 0) {\n      return null;\n    }\n\n    var id = originalElement.id,\n        _version = originalElement._version,\n        _lastChangedAt = originalElement._lastChangedAt,\n        _deleted = originalElement._deleted; // For update mutations we only want to send fields with changes\n    // and the required internal fields\n\n    return __assign(__assign({}, updatedElement), {\n      id: id,\n      _version: _version,\n      _lastChangedAt: _lastChangedAt,\n      _deleted: _deleted\n    });\n  };\n\n  return StorageClass;\n}();\n\nvar ExclusiveStorage =\n/** @class */\nfunction () {\n  function ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.mutex = new Mutex();\n    this.storage = new StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId);\n  }\n\n  ExclusiveStorage.prototype.runExclusive = function (fn) {\n    return this.mutex.runExclusive(fn.bind(this, this.storage));\n  };\n\n  ExclusiveStorage.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          return storage.save(model, condition, mutator, patchesTuple);\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          if (isModelConstructor(modelOrModelConstructor)) {\n            var modelConstructor = modelOrModelConstructor;\n            return storage.delete(modelConstructor, condition, mutator);\n          } else {\n            var model = modelOrModelConstructor;\n            return storage.delete(model, condition, mutator);\n          }\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          return storage.query(modelConstructor, predicate, pagination);\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          return storage.queryOne(modelConstructor, firstOrLast);\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.getNamespace = function () {\n    return StorageClass.getNamespace();\n  };\n\n  ExclusiveStorage.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    return this.storage.observe(modelConstructor, predicate, skipOwn);\n  };\n\n  ExclusiveStorage.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storage.clear()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.batchSave = function (modelConstructor, items) {\n    return this.storage.batchSave(modelConstructor, items);\n  };\n\n  ExclusiveStorage.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.storage.init()];\n      });\n    });\n  };\n\n  return ExclusiveStorage;\n}();\n\nexport { ExclusiveStorage };","map":null,"metadata":{},"sourceType":"module"}