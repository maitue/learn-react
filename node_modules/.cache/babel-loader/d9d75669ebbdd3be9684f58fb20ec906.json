{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\n\nexport function fromCognitoIdentity(parameters) {\n  var _this = this;\n\n  return function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;\n\n      var _j;\n\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            _f = (_e = parameters.client).send;\n            _g = GetCredentialsForIdentityCommand.bind;\n            _j = {\n              CustomRoleArn: parameters.customRoleArn,\n              IdentityId: parameters.identityId\n            };\n            if (!parameters.logins) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , resolveLogins(parameters.logins)];\n\n          case 1:\n            _h = _k.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _h = undefined;\n            _k.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];\n\n          case 4:\n            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;\n            return [2\n            /*return*/\n            , {\n              identityId: parameters.identityId,\n              accessKeyId: AccessKeyId,\n              secretAccessKey: SecretKey,\n              sessionToken: SessionToken,\n              expiration: Expiration\n            }];\n        }\n      });\n    });\n  };\n}\n\nfunction throwOnMissingAccessKeyId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}","map":null,"metadata":{},"sourceType":"module"}