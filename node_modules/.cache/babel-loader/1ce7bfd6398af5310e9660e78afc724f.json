{"ast":null,"code":"'use strict';\n\nvar Observable = require('zen-observable');\n\nfunction addMethods(target, methods) {\n  Object.keys(methods).forEach(function (k) {\n    var desc = Object.getOwnPropertyDescriptor(methods, k);\n    desc.enumerable = false;\n    Object.defineProperty(target, k, desc);\n  });\n}\n\nfunction send(p, message, value) {\n  if (p._observer) {\n    sendMessage(p._observer, message, value);\n  } else if (p._observers) {\n    var list = [];\n\n    p._observers.forEach(function (to) {\n      list.push(to);\n    });\n\n    list.forEach(function (to) {\n      sendMessage(to, message, value);\n    });\n  }\n}\n\nfunction sendMessage(observer, message, value) {\n  if (observer.closed) {\n    return;\n  }\n\n  switch (message) {\n    case 'next':\n      return observer.next(value);\n\n    case 'error':\n      return observer.error(value);\n\n    case 'complete':\n      return observer.complete(value);\n  }\n}\n\nfunction hasObserver(p) {\n  return p._observer || p._observers && p._observers.size > 0;\n}\n\nfunction addObserver(p, observer) {\n  if (p._observers) {\n    p._observers.add(observer);\n  } else if (!p._observer) {\n    p._observer = observer;\n  } else {\n    p._observers = new Set();\n\n    p._observers.add(p._observer);\n\n    p._observers.add(observer);\n\n    p._observer = null;\n  }\n}\n\nfunction deleteObserver(p, observer) {\n  if (p._observers) {\n    p._observers.delete(observer);\n  } else if (p._observer === observer) {\n    p._observer = null;\n  }\n}\n\nfunction notifyStart(p, opts) {\n  !hasObserver(p) && opts && opts.start && opts.start();\n}\n\nfunction notifyPause(p, opts) {\n  !hasObserver(p) && opts && opts.pause && opts.pause();\n}\n\nfunction PushStream(opts) {\n  var p = this;\n  this._observer = null;\n  this._observers = null;\n  this._observable = new Observable(function (observer) {\n    notifyStart(p, opts);\n    addObserver(p, observer);\n    return function () {\n      deleteObserver(p, observer);\n      notifyPause(p, opts);\n    };\n  });\n}\n\naddMethods(PushStream.prototype, {\n  get observable() {\n    return this._observable;\n  },\n\n  get observed() {\n    return hasObserver(this);\n  },\n\n  next: function next(x) {\n    send(this, 'next', x);\n  },\n  error: function error(e) {\n    send(this, 'error', e);\n  },\n  complete: function complete(x) {\n    send(this, 'complete', x);\n  }\n});\nmodule.exports = PushStream;","map":null,"metadata":{},"sourceType":"script"}