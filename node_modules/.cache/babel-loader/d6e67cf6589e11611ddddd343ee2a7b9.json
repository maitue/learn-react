{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AddTagsToStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1AddTagsToStreamCommand, serializeAws_json1_1AddTagsToStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Adds or updates tags for the specified Kinesis data stream. Each time you invoke\n *             this operation, you can specify up to 10 tags. If you want to add more than 10 tags to\n *             your stream, you can invoke this operation multiple times. In total, each stream can\n *             have up to 50 tags.</p>\n *         <p>If tags have already been assigned to the stream, <code>AddTagsToStream</code>\n *             overwrites any existing tags that correspond to the specified tag keys.</p>\n *         <p>\n *             <a>AddTagsToStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\n\nvar AddTagsToStreamCommand =\n/** @class */\nfunction (_super) {\n  __extends(AddTagsToStreamCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function AddTagsToStreamCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  AddTagsToStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"AddTagsToStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: AddTagsToStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  AddTagsToStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1AddTagsToStreamCommand(input, context);\n  };\n\n  AddTagsToStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1AddTagsToStreamCommand(output, context);\n  };\n\n  return AddTagsToStreamCommand;\n}($Command);\n\nexport { AddTagsToStreamCommand };","map":null,"metadata":{},"sourceType":"module"}