{"ast":null,"code":"var STORE_NAME = \"IdentityIds\";\n\nvar IndexedDbStorage =\n/** @class */\nfunction () {\n  function IndexedDbStorage(dbName) {\n    if (dbName === void 0) {\n      dbName = \"aws:cognito-identity-ids\";\n    }\n\n    this.dbName = dbName;\n  }\n\n  IndexedDbStorage.prototype.getItem = function (key) {\n    return this.withObjectStore(\"readonly\", function (store) {\n      var req = store.get(key);\n      return new Promise(function (resolve) {\n        req.onerror = function () {\n          return resolve(null);\n        };\n\n        req.onsuccess = function () {\n          return resolve(req.result ? req.result.value : null);\n        };\n      });\n    }).catch(function () {\n      return null;\n    });\n  };\n\n  IndexedDbStorage.prototype.removeItem = function (key) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.delete(key);\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.setItem = function (id, value) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.put({\n        id: id,\n        value: value\n      });\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.getDb = function () {\n    var openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise(function (resolve, reject) {\n      openDbRequest.onsuccess = function () {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = function () {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = function () {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = function () {\n        var db = openDbRequest.result;\n\n        db.onerror = function () {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  };\n\n  IndexedDbStorage.prototype.withObjectStore = function (mode, action) {\n    return this.getDb().then(function (db) {\n      var tx = db.transaction(STORE_NAME, mode);\n\n      tx.oncomplete = function () {\n        return db.close();\n      };\n\n      return new Promise(function (resolve, reject) {\n        tx.onerror = function () {\n          return reject(tx.error);\n        };\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(function (err) {\n        db.close();\n        throw err;\n      });\n    });\n  };\n\n  return IndexedDbStorage;\n}();\n\nexport { IndexedDbStorage };","map":null,"metadata":{},"sourceType":"module"}