{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateDNSHostLabel, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateS3Service, validateService } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function bucketHostname(options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n      baseHostname = options.baseHostname,\n      dualstackEndpoint = options.dualstackEndpoint,\n      accelerateEndpoint = options.accelerateEndpoint;\n\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n\n  return isBucketNameOptions(options) ? // Construct endpoint when bucketName is a string referring to a bucket name\n  getEndpointFromBucketName(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  })) : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n  getEndpointFromArn(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  }));\n};\n\nvar getEndpointFromArn = function getEndpointFromArn(options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n      baseHostname = options.baseHostname;\n\n  var _a = __read(isCustomEndpoint ? [options.clientRegion, baseHostname] : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n  getSuffixForArnEndpoint(baseHostname), 2),\n      clientRegion = _a[0],\n      hostnameSuffix = _a[1];\n\n  var pathStyleEndpoint = options.pathStyleEndpoint,\n      _b = options.dualstackEndpoint,\n      dualstackEndpoint = _b === void 0 ? false : _b,\n      _c = options.accelerateEndpoint,\n      accelerateEndpoint = _c === void 0 ? false : _c,\n      _d = options.tlsCompatible,\n      tlsCompatible = _d === void 0 ? true : _d,\n      useArnRegion = options.useArnRegion,\n      bucketName = options.bucketName,\n      _e = options.clientPartition,\n      clientPartition = _e === void 0 ? \"aws\" : _e,\n      _f = options.clientSigningRegion,\n      clientSigningRegion = _f === void 0 ? clientRegion : _f;\n  validateArnEndpointOptions({\n    pathStyleEndpoint: pathStyleEndpoint,\n    accelerateEndpoint: accelerateEndpoint,\n    tlsCompatible: tlsCompatible\n  }); // Validate and parse the ARN supplied as a bucket name\n\n  var service = bucketName.service,\n      partition = bucketName.partition,\n      accountId = bucketName.accountId,\n      region = bucketName.region,\n      resource = bucketName.resource;\n  validateService(service);\n  validatePartition(partition, {\n    clientPartition: clientPartition\n  });\n  validateAccountId(accountId);\n  validateRegion(region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion\n  });\n\n  var _g = getArnResources(resource),\n      accesspointName = _g.accesspointName,\n      outpostId = _g.outpostId;\n\n  validateDNSHostLabel(accesspointName + \"-\" + accountId, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? region : clientRegion;\n  var signingRegion = useArnRegion ? region : clientSigningRegion;\n\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, {\n      tlsCompatible: tlsCompatible\n    });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    var hostnamePrefix_1 = accesspointName + \"-\" + accountId + \".\" + outpostId;\n    return {\n      bucketEndpoint: true,\n      hostname: \"\" + hostnamePrefix_1 + (isCustomEndpoint ? \"\" : \".s3-outposts.\" + endpointRegion) + \".\" + hostnameSuffix,\n      signingRegion: signingRegion,\n      signingService: \"s3-outposts\"\n    };\n  } // construct endpoint from Accesspoint ARN\n\n\n  validateS3Service(service);\n  var hostnamePrefix = accesspointName + \"-\" + accountId;\n  return {\n    bucketEndpoint: true,\n    hostname: \"\" + hostnamePrefix + (isCustomEndpoint ? \"\" : \".s3-accesspoint\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + endpointRegion) + \".\" + hostnameSuffix,\n    signingRegion: signingRegion\n  };\n};\n\nvar getEndpointFromBucketName = function getEndpointFromBucketName(_a) {\n  var _b = _a.accelerateEndpoint,\n      accelerateEndpoint = _b === void 0 ? false : _b,\n      region = _a.clientRegion,\n      baseHostname = _a.baseHostname,\n      bucketName = _a.bucketName,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.pathStyleEndpoint,\n      pathStyleEndpoint = _d === void 0 ? false : _d,\n      _e = _a.tlsCompatible,\n      tlsCompatible = _e === void 0 ? true : _e,\n      _f = _a.isCustomEndpoint,\n      isCustomEndpoint = _f === void 0 ? false : _f;\n\n  var _g = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2),\n      clientRegion = _g[0],\n      hostnameSuffix = _g[1];\n\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix : baseHostname\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: bucketName + \".\" + baseHostname\n  };\n};","map":null,"metadata":{},"sourceType":"module"}