{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { HttpResponse } from '@aws-sdk/protocol-http';\nimport { buildQueryString } from '@aws-sdk/querystring-builder';\nimport axios from 'axios';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('axios-http-handler');\nexport var SEND_PROGRESS_EVENT = 'sendProgress';\n\nvar AxiosHttpHandler =\n/** @class */\nfunction () {\n  function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n\n    this.httpOptions = httpOptions;\n    this.emitter = emitter;\n    this.cancelTokenSource = cancelTokenSource;\n  }\n\n  AxiosHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n\n  AxiosHttpHandler.prototype.handle = function (request, options) {\n    var requestTimeoutInMs = this.httpOptions.requestTimeout;\n    var emitter = this.emitter;\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : '') + path;\n    var axiosRequest = {};\n    axiosRequest.url = url;\n    axiosRequest.method = request.method;\n    axiosRequest.headers = request.headers; // The host header is automatically added by the browser and adding it explicitly in the\n    // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376\n    // This is because the host header is a forbidden header for the http client to set\n    // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and\n    // https://fetch.spec.whatwg.org/#forbidden-header-name\n    // The reason we are removing this header here instead of in the aws-sdk's client\n    // middleware is that the host header is required to be in the request signature and if\n    // we remove it from the middlewares, then the request fails because the header is added\n    // by the browser but is absent from the signature.\n\n    delete axiosRequest.headers['host'];\n\n    if (request.body) {\n      axiosRequest.data = request.body;\n    } else {\n      // Fix for https://github.com/aws-amplify/amplify-js/issues/5432\n      // If the POST request body is empty but content-type header is set, axios is forcibly removing it\n      // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755\n      // This change is a workaround to set the data as null (instead of undefined) to prevent axios from\n      // removing the content-type header. Link for the source code\n      // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123\n      if (axiosRequest.headers['Content-Type']) {\n        axiosRequest.data = null;\n      }\n    }\n\n    if (emitter) {\n      axiosRequest.onUploadProgress = function (event) {\n        emitter.emit(SEND_PROGRESS_EVENT, event);\n        logger.debug(event);\n      };\n    } // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests\n\n\n    if (this.cancelTokenSource) {\n      axiosRequest.cancelToken = this.cancelTokenSource.token;\n    } // From gamma release, aws-sdk now expects all response type to be of blob or streams\n\n\n    axiosRequest.responseType = 'blob';\n    var raceOfPromises = [axios.request(axiosRequest).then(function (response) {\n      return {\n        response: new HttpResponse({\n          headers: response.headers,\n          statusCode: response.status,\n          body: response.data\n        })\n      };\n    }).catch(function (error) {\n      // Error\n      logger.error(error);\n      throw error;\n    }), requestTimeout(requestTimeoutInMs)];\n    return Promise.race(raceOfPromises);\n  };\n\n  return AxiosHttpHandler;\n}();\n\nexport { AxiosHttpHandler };\n\nfunction requestTimeout(timeoutInMs) {\n  if (timeoutInMs === void 0) {\n    timeoutInMs = 0;\n  }\n\n  return new Promise(function (resolve, reject) {\n    if (timeoutInMs) {\n      setTimeout(function () {\n        var timeoutError = new Error(\"Request did not complete within \" + timeoutInMs + \" ms\");\n        timeoutError.name = 'TimeoutError';\n        reject(timeoutError);\n      }, timeoutInMs);\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}