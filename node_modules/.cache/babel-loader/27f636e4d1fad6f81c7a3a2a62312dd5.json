{"ast":null,"code":"import Cookies from 'universal-cookie';\nimport { browserOrNode } from '../JS';\nvar isBrowser = browserOrNode().isBrowser;\n\nvar UniversalStorage =\n/** @class */\nfunction () {\n  function UniversalStorage(context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    this.cookies = new Cookies();\n    this.store = isBrowser ? window.localStorage : Object.create(null);\n    this.cookies = context.req ? new Cookies(context.req.headers.cookie) : new Cookies();\n    Object.assign(this.store, this.cookies.getAll());\n  }\n\n  Object.defineProperty(UniversalStorage.prototype, \"length\", {\n    get: function get() {\n      return Object.entries(this.store).length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  UniversalStorage.prototype.clear = function () {\n    var _this = this;\n\n    Array.from(new Array(this.length)).map(function (_, i) {\n      return _this.key(i);\n    }).forEach(function (key) {\n      return _this.removeItem(key);\n    });\n  };\n\n  UniversalStorage.prototype.getItem = function (key) {\n    return this.getLocalItem(key);\n  };\n\n  UniversalStorage.prototype.getLocalItem = function (key) {\n    return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;\n  };\n\n  UniversalStorage.prototype.getUniversalItem = function (key) {\n    return this.cookies.get(key);\n  };\n\n  UniversalStorage.prototype.key = function (index) {\n    return Object.keys(this.store)[index];\n  };\n\n  UniversalStorage.prototype.removeItem = function (key) {\n    this.removeLocalItem(key);\n    this.removeUniversalItem(key);\n  };\n\n  UniversalStorage.prototype.removeLocalItem = function (key) {\n    delete this.store[key];\n  };\n\n  UniversalStorage.prototype.removeUniversalItem = function (key) {\n    this.cookies.remove(key, {\n      path: '/'\n    });\n  };\n\n  UniversalStorage.prototype.setItem = function (key, value) {\n    this.setLocalItem(key, value); // keys take the shape:\n    //  1. `${ProviderPrefix}.${userPoolClientId}.${username}.${tokenType}\n    //  2. `${ProviderPrefix}.${userPoolClientId}.LastAuthUser\n\n    var tokenType = key.split('.').pop();\n\n    switch (tokenType) {\n      // LastAuthUser is needed for computing other key names\n      case 'LastAuthUser': // accessToken is required for CognitoUserSession\n\n      case 'accessToken': // Required for CognitoUserSession\n\n      case 'idToken':\n        this.setUniversalItem(key, value);\n      // userData is used when `Auth.currentAuthenticatedUser({ bypassCache: false })`.\n      // Can be persisted to speed up calls to `Auth.currentAuthenticatedUser()`\n      // case 'userData':\n      // refreshToken isn't shared with the server so that the client handles refreshing\n      // case 'refreshToken':\n      // Ignoring clockDrift on the server for now, but needs testing\n      // case 'clockDrift':\n    }\n  };\n\n  UniversalStorage.prototype.setLocalItem = function (key, value) {\n    this.store[key] = value;\n  };\n\n  UniversalStorage.prototype.setUniversalItem = function (key, value) {\n    this.cookies.set(key, value, {\n      path: '/',\n      // `httpOnly` cannot be set via JavaScript: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#JavaScript_access_using_Document.cookie\n      sameSite: true,\n      // Allow unsecure requests to http://localhost:3000/ when in development.\n      secure: window.location.hostname === 'localhost' ? false : true\n    });\n  };\n\n  return UniversalStorage;\n}();\n\nexport { UniversalStorage };","map":null,"metadata":{},"sourceType":"module"}