{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DescribeDeliveryStreamInput, DescribeDeliveryStreamOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1DescribeDeliveryStreamCommand, serializeAws_json1_1DescribeDeliveryStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Describes the specified delivery stream and its status. For example, after your\n *          delivery stream is created, call <code>DescribeDeliveryStream</code> to see whether the\n *          delivery stream is <code>ACTIVE</code> and therefore ready for data to be sent to it. </p>\n *          <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status\n *          doesn't change, and you can't invoke <a>CreateDeliveryStream</a> again on it.\n *          However, you can invoke the <a>DeleteDeliveryStream</a> operation to delete it.\n *          If the status is <code>DELETING_FAILED</code>, you can force deletion by invoking <a>DeleteDeliveryStream</a> again but with <a>DeleteDeliveryStreamInput$AllowForceDelete</a> set to true.</p>\n */\n\nvar DescribeDeliveryStreamCommand =\n/** @class */\nfunction (_super) {\n  __extends(DescribeDeliveryStreamCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DescribeDeliveryStreamCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DescribeDeliveryStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"DescribeDeliveryStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DescribeDeliveryStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: DescribeDeliveryStreamOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DescribeDeliveryStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DescribeDeliveryStreamCommand(input, context);\n  };\n\n  DescribeDeliveryStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DescribeDeliveryStreamCommand(output, context);\n  };\n\n  return DescribeDeliveryStreamCommand;\n}($Command);\n\nexport { DescribeDeliveryStreamCommand };","map":null,"metadata":{},"sourceType":"module"}