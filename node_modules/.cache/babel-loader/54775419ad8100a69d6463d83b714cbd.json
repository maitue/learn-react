{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RegisterStreamConsumerInput, RegisterStreamConsumerOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1RegisterStreamConsumerCommand, serializeAws_json1_1RegisterStreamConsumerCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers a consumer with a Kinesis data stream. When you use this operation, the\n *             consumer you register can then call <a>SubscribeToShard</a> to receive data\n *             from the stream using enhanced fan-out, at a rate of up to 2 MiB per second for every\n *             shard you subscribe to. This rate is unaffected by the total number of consumers that\n *             read from the same stream.</p>\n *         <p>You can register up to 20 consumers per stream. A given consumer can only be\n *             registered with one stream at a time.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n *         <p>The use of this operation has a limit of five transactions per second per account.\n *             Also, only 5 consumers can be created simultaneously. In other words, you cannot have\n *             more than 5 consumers in a <code>CREATING</code> status at the same time. Registering a\n *             6th consumer while there are 5 in a <code>CREATING</code> status results in a\n *                 <code>LimitExceededException</code>.</p>\n */\n\nvar RegisterStreamConsumerCommand =\n/** @class */\nfunction (_super) {\n  __extends(RegisterStreamConsumerCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function RegisterStreamConsumerCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  RegisterStreamConsumerCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"RegisterStreamConsumerCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: RegisterStreamConsumerInput.filterSensitiveLog,\n      outputFilterSensitiveLog: RegisterStreamConsumerOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  RegisterStreamConsumerCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1RegisterStreamConsumerCommand(input, context);\n  };\n\n  RegisterStreamConsumerCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1RegisterStreamConsumerCommand(output, context);\n  };\n\n  return RegisterStreamConsumerCommand;\n}($Command);\n\nexport { RegisterStreamConsumerCommand };","map":null,"metadata":{},"sourceType":"module"}