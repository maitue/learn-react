{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StopDeliveryStreamEncryptionInput, StopDeliveryStreamEncryptionOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopDeliveryStreamEncryptionCommand, serializeAws_json1_1StopDeliveryStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Disables server-side encryption (SSE) for the delivery stream. </p>\n *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n *          Firehose first sets the encryption status of the stream to <code>DISABLING</code>, and then\n *          to <code>DISABLED</code>. You can continue to read and write data to your stream while its\n *          status is <code>DISABLING</code>. It can take up to 5 seconds after the encryption status\n *          changes to <code>DISABLED</code> before all records written to the delivery stream are no\n *          longer subject to encryption. To find out whether a record or a batch of records was\n *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n *          <p>To check the encryption state of a delivery stream, use <a>DescribeDeliveryStream</a>. </p>\n *          <p>If SSE is enabled using a customer managed CMK and then you invoke\n *             <code>StopDeliveryStreamEncryption</code>, Kinesis Data Firehose schedules the related\n *          KMS grant for retirement and then retires it after it ensures that it is finished\n *          delivering records to the destination.</p>\n *          <p>The <code>StartDeliveryStreamEncryption</code> and\n *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n *          per delivery stream per 24 hours. For example, you reach the limit if you call\n *             <code>StartDeliveryStreamEncryption</code> 13 times and\n *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n *          24-hour period.</p>\n */\n\nvar StopDeliveryStreamEncryptionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StopDeliveryStreamEncryptionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StopDeliveryStreamEncryptionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StopDeliveryStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"StopDeliveryStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StopDeliveryStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: StopDeliveryStreamEncryptionOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StopDeliveryStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StopDeliveryStreamEncryptionCommand(input, context);\n  };\n\n  StopDeliveryStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StopDeliveryStreamEncryptionCommand(output, context);\n  };\n\n  return StopDeliveryStreamEncryptionCommand;\n}($Command);\n\nexport { StopDeliveryStreamEncryptionCommand };","map":null,"metadata":{},"sourceType":"module"}