{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport { JS } from '@aws-amplify/core';\nvar proto = JS.browserOrNode().isBrowser && window['Element'] ? window['Element'].prototype : null;\nvar nativeMatches = proto ? proto.matches || // @ts-ignore\nproto.matchesSelector || // @ts-ignore\nproto.webkitMatchesSelector || // @ts-ignore\nproto.mozMatchesSelector || // @ts-ignore\nproto.msMatchesSelector || // @ts-ignore\nproto.oMatchesSelector : null;\n/**\n * Tests if a DOM elements matches any of the test DOM elements or selectors.\n * @param {Element} element The DOM element to test.\n * @param {Element|string|Array<Element|string>} test A DOM element, a CSS\n *     selector, or an array of DOM elements or CSS selectors to match against.\n * @return {boolean} True of any part of the test matches.\n */\n\nexport function matches(element, test) {\n  // Validate input.\n  if (element && element.nodeType === 1 && test) {\n    // if test is a string or DOM element test it.\n    if (typeof test === 'string' || test.nodeType === 1) {\n      return element === test || matchesSelector(element,\n      /** @type {string} */\n      test);\n    } else if ('length' in test) {\n      // if it has a length property iterate over the items\n      // and return true if any match.\n      for (var i = 0, item = void 0; item = test[i]; i++) {\n        if (element === item || matchesSelector(element, item)) return true;\n      }\n    }\n  } // Still here? Return false\n\n\n  return false;\n}\n/**\n * Tests whether a DOM element matches a selector. This polyfills the native\n * Element.prototype.matches method across browsers.\n * @param {!Element} element The DOM element to test.\n * @param {string} selector The CSS selector to test element against.\n * @return {boolean} True if the selector matches.\n */\n\nfunction matchesSelector(element, selector) {\n  if (typeof selector !== 'string') return false;\n  if (nativeMatches) return nativeMatches.call(element, selector);\n  var nodes = element.parentNode.querySelectorAll(selector);\n\n  for (var i = 0, node = void 0; node = nodes[i]; i++) {\n    if (node === element) return true;\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}