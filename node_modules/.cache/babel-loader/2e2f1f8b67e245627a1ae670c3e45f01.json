{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType } from '../../types';\nimport { exhaustiveCheck, USER } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType } from '../utils';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\n\nvar MutationProcessor =\n/** @class */\nfunction () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, conflictHandler, errorHandler) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.conflictHandler = conflictHandler;\n    this.errorHandler = errorHandler;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.generateQueries();\n  }\n\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1),\n            createMutation = _a[0];\n\n        var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1),\n            updateMutation = _b[0];\n\n        var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1),\n            deleteMutation = _c[0];\n\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n\n      _this.resume();\n\n      return function () {\n        _this.pause();\n      };\n    });\n    return observable;\n  };\n\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var head, namespaceName, _loop_1, this_1, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.processing || !this.isReady()) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.processing = true;\n            namespaceName = USER;\n\n            _loop_1 = function _loop_1() {\n              var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, _authModeRetry_, error_1, record, hasMore;\n\n              var _a;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                    modelConstructor = this_1.userClasses[model];\n                    result = void 0;\n                    opName = void 0;\n                    modelDefinition = void 0;\n                    _b.label = 1;\n\n                  case 1:\n                    _b.trys.push([1, 4,, 5]);\n\n                    return [4\n                    /*yield*/\n                    , getModelAuthModes({\n                      authModeStrategy: this_1.authModeStrategy,\n                      defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                      modelName: model,\n                      schema: this_1.schema\n                    })];\n\n                  case 2:\n                    modelAuthModes = _b.sent();\n                    operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                    authModeAttempts_1 = 0;\n\n                    _authModeRetry_ = function authModeRetry_1() {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var response, error_2;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              _a.trys.push([0, 2,, 4]);\n\n                              logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                              return [4\n                              /*yield*/\n                              , this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1])];\n\n                            case 1:\n                              response = _a.sent();\n                              logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                              return [2\n                              /*return*/\n                              , response];\n\n                            case 2:\n                              error_2 = _a.sent();\n                              authModeAttempts_1++;\n\n                              if (authModeAttempts_1 >= operationAuthModes_1.length) {\n                                logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                throw error_2;\n                              }\n\n                              logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                              return [4\n                              /*yield*/\n                              , _authModeRetry_()];\n\n                            case 3:\n                              return [2\n                              /*return*/\n                              , _a.sent()];\n\n                            case 4:\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    };\n\n                    return [4\n                    /*yield*/\n                    , _authModeRetry_()];\n\n                  case 3:\n                    _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 4:\n                    error_1 = _b.sent();\n\n                    if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                      return [2\n                      /*return*/\n                      , \"continue\"];\n                    }\n\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 5:\n                    if (!(result === undefined)) return [3\n                    /*break*/\n                    , 7];\n                    logger.debug('done retrying');\n                    return [4\n                    /*yield*/\n                    , this_1.storage.runExclusive(function (storage) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4\n                              /*yield*/\n                              , this.outbox.dequeue(storage)];\n\n                            case 1:\n                              _a.sent();\n\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 6:\n                    _b.sent();\n\n                    return [2\n                    /*return*/\n                    , \"continue\"];\n\n                  case 7:\n                    record = result.data[opName];\n                    hasMore = false;\n                    return [4\n                    /*yield*/\n                    , this_1.storage.runExclusive(function (storage) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              // using runExclusive to prevent possible race condition\n                              // when another record gets enqueued between dequeue and peek\n                              return [4\n                              /*yield*/\n                              , this.outbox.dequeue(storage, record, operation)];\n\n                            case 1:\n                              // using runExclusive to prevent possible race condition\n                              // when another record gets enqueued between dequeue and peek\n                              _a.sent();\n\n                              return [4\n                              /*yield*/\n                              , this.outbox.peek(storage)];\n\n                            case 2:\n                              hasMore = _a.sent() !== undefined;\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 8:\n                    _b.sent();\n\n                    this_1.observer.next({\n                      operation: operation,\n                      modelDefinition: modelDefinition,\n                      model: record,\n                      hasMore: hasMore\n                    });\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 1;\n\n          case 1:\n            _a = this.processing;\n            if (!_a) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.outbox.peek(this.storage)];\n\n          case 2:\n            _a = (head = _b.sent()) !== undefined;\n            _b.label = 3;\n\n          case 3:\n            if (!_a) return [3\n            /*break*/\n            , 5];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 4:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            // pauses itself\n            this.pause();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, serverData, namespace, updatedMutation;\n\n                var _g;\n\n                return __generator(this, function (_h) {\n                  switch (_h.label) {\n                    case 0:\n                      _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      tryWith = {\n                        query: query,\n                        variables: variables,\n                        authMode: authMode\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      _h.label = 1;\n\n                    case 1:\n                      _h.trys.push([1, 3,, 15]);\n\n                      return [4\n                      /*yield*/\n                      , API.graphql(tryWith)];\n\n                    case 2:\n                      result = _h.sent();\n                      return [2\n                      /*return*/\n                      , [result, opName, modelDefinition]];\n\n                    case 3:\n                      err_1 = _h.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3\n                      /*break*/\n                      , 13];\n                      _b = __read(err_1.errors, 1), error = _b[0];\n                      _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n\n                      if (error.errorType === 'Unauthorized') {\n                        throw new NonRetryableError('Unauthorized');\n                      }\n\n                      if (error.message === 'Network Error' || code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                      ) {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        } // TODO: Check errors on different env (react-native or other browsers)\n\n\n                        throw new Error('Network Error');\n                      }\n\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3\n                      /*break*/\n                      , 11]; // TODO: add on ConflictConditionalCheck error query last from server\n\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3\n                      /*break*/\n                      , 4];\n                      retryWith = DISCARD;\n                      return [3\n                      /*break*/\n                      , 7];\n\n                    case 4:\n                      _h.trys.push([4, 6,, 7]);\n\n                      return [4\n                      /*yield*/\n                      , this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n\n                    case 5:\n                      retryWith = _h.sent();\n                      return [3\n                      /*break*/\n                      , 7];\n\n                    case 6:\n                      err_2 = _h.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3\n                      /*break*/\n                      , 15];\n\n                    case 7:\n                      if (!(retryWith === DISCARD)) return [3\n                      /*break*/\n                      , 9];\n                      _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                      return [4\n                      /*yield*/\n                      , API.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        },\n                        authMode: authMode\n                      })];\n\n                    case 8:\n                      serverData = _h.sent();\n                      return [2\n                      /*return*/\n                      , [serverData, opName_1, modelDefinition]];\n\n                    case 9:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4\n                      /*yield*/\n                      , this.storage.save(updatedMutation)];\n\n                    case 10:\n                      _h.sent();\n\n                      throw new NonRetryableError('RetryMutation');\n\n                    case 11:\n                      try {\n                        this.errorHandler({\n                          localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                          message: error.message,\n                          operation: operation,\n                          errorType: error.errorType,\n                          errorInfo: error.errorInfo,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn('failed to execute errorHandler', err);\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2\n                        /*return*/\n                        , error.data ? [{\n                          data: (_g = {}, _g[opName] = error.data, _g)\n                        }, opName, modelDefinition] : []];\n                      }\n\n                      _h.label = 12;\n\n                    case 12:\n                      return [3\n                      /*break*/\n                      , 14];\n\n                    case 13:\n                      // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                      // These errors should not be retried.\n                      throw new NonRetryableError(err_1);\n\n                    case 14:\n                      return [3\n                      /*break*/\n                      , 15];\n\n                    case 15:\n                      if (tryWith) return [3\n                      /*break*/\n                      , 1];\n                      _h.label = 16;\n\n                    case 16:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent])];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n\n    var _a = __read(queriesTuples.find(function (_a) {\n      var _b = __read(_a, 1),\n          transformerMutationType = _b[0];\n\n      return transformerMutationType === operation;\n    }), 3),\n        opName = _a[1],\n        query = _a[2];\n\n    var _b = JSON.parse(data),\n        _version = _b._version,\n        parsedData = __rest(_b, [\"_version\"]);\n\n    var filteredData = operation === TransformerMutationType.DELETE ? {\n      id: parsedData.id\n    } // For DELETE mutations, only ID is sent\n    : Object.values(modelDefinition.fields).filter(function (_a) {\n      var name = _a.name,\n          type = _a.type,\n          association = _a.association; // connections\n\n      if (isModelFieldType(type)) {\n        // BELONGS_TO\n        if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n          return true;\n        } // All other connections\n\n\n        return false;\n      }\n\n      if (operation === TransformerMutationType.UPDATE) {\n        // this limits the update mutation input to changed fields only\n        return parsedData.hasOwnProperty(name);\n      } // scalars and non-model types\n\n\n      return true;\n    }).map(function (_a) {\n      var name = _a.name,\n          type = _a.type,\n          association = _a.association;\n      var fieldName = name;\n      var val = parsedData[name];\n\n      if (isModelFieldType(type) && isTargetNameAssociation(association)) {\n        fieldName = association.targetName;\n        val = parsedData[fieldName];\n      }\n\n      return [fieldName, val];\n    }).reduce(function (acc, _a) {\n      var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n\n      acc[k] = v;\n      return acc;\n    }, {}); // Build mutation variables input object\n\n    var input = __assign(__assign({}, filteredData), {\n      _version: _version\n    });\n\n    var graphQLCondition = JSON.parse(condition);\n\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n\n      default:\n        exhaustiveCheck(operation);\n    }\n  };\n\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n\n  return MutationProcessor;\n}();\n\nexport { MutationProcessor };","map":null,"metadata":{},"sourceType":"module"}