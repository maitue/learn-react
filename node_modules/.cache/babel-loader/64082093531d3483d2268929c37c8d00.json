{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ConsoleLogger as Logger, Credentials, DateUtils, Signer, Platform } from '@aws-amplify/core';\nimport axios from 'axios';\nimport { parse, format } from 'url';\nvar logger = new Logger('RestClient');\n/**\n* HTTP Client for REST requests. Send and receive JSON data.\n* Sign request with AWS credentials if available\n* Usage:\n<pre>\nconst restClient = new RestClient();\nrestClient.get('...')\n    .then(function(data) {\n        console.log(data);\n    })\n    .catch(err => console.log(err));\n</pre>\n*/\n\nvar RestClient =\n/** @class */\nfunction () {\n  /**\n   * @param {RestClientOptions} [options] - Instance options\n   */\n  function RestClient(options) {\n    this._region = 'us-east-1'; // this will be updated by endpoint function\n\n    this._service = 'execute-api'; // this can be updated by endpoint function\n\n    this._custom_header = undefined; // this can be updated by endpoint function\n\n    /**\n     * This weak map provides functionality to let clients cancel\n     * in-flight axios requests. https://github.com/axios/axios#cancellation\n     *\n     * 1. For every axios request, a unique cancel token is generated and added in the request.\n     * 2. Promise for fulfilling the request is then mapped to that unique cancel token.\n     * 3. The promise is returned to the client.\n     * 4. Clients can either wait for the promise to fulfill or call `API.cancel(promise)` to cancel the request.\n     * 5. If `API.cancel(promise)` is called, then the corresponding cancel token is retrieved from the map below.\n     * 6. Promise returned to the client will be in rejected state with the error provided during cancel.\n     * 7. Clients can check if the error is because of cancelling by calling `API.isCancel(error)`.\n     *\n     * For more details, see https://github.com/aws-amplify/amplify-js/pull/3769#issuecomment-552660025\n     */\n\n    this._cancelTokenMap = null;\n    this.Credentials = Credentials;\n    this._options = options;\n    logger.debug('API Options', this._options);\n\n    if (this._cancelTokenMap == null) {\n      this._cancelTokenMap = new WeakMap();\n    }\n  }\n  /**\n  * Update AWS credentials\n  * @param {AWSCredentials} credentials - AWS credentials\n  *\n  updateCredentials(credentials: AWSCredentials) {\n      this.options.credentials = credentials;\n  }\n  */\n\n  /**\n   * Basic HTTP request. Customizable\n   * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information\n   * @param {string} method - Request HTTP method\n   * @param {json} [init] - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  RestClient.prototype.ajax = function (urlOrApiInfo, method, init) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsed_url, url, region, service, custom_header, params, libraryHeaders, userAgent, initParams, isAllResponse, custom_header_obj, _a, _b, search, parsedUrl;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            logger.debug(method, urlOrApiInfo);\n            region = 'us-east-1';\n            service = 'execute-api';\n            custom_header = undefined;\n\n            if (typeof urlOrApiInfo === 'string') {\n              parsed_url = this._parseUrl(urlOrApiInfo);\n              url = urlOrApiInfo;\n            } else {\n              url = urlOrApiInfo.endpoint, custom_header = urlOrApiInfo.custom_header, region = urlOrApiInfo.region, service = urlOrApiInfo.service;\n              parsed_url = this._parseUrl(urlOrApiInfo.endpoint);\n            }\n\n            params = {\n              method: method,\n              url: url,\n              host: parsed_url.host,\n              path: parsed_url.path,\n              headers: {},\n              data: null,\n              responseType: 'json',\n              timeout: 0,\n              cancelToken: null\n            };\n            libraryHeaders = {};\n\n            if (Platform.isReactNative) {\n              userAgent = Platform.userAgent || 'aws-amplify/0.1.x';\n              libraryHeaders = {\n                'User-Agent': userAgent\n              };\n            }\n\n            initParams = Object.assign({}, init);\n            isAllResponse = initParams.response;\n\n            if (initParams.body) {\n              if (typeof FormData === 'function' && initParams.body instanceof FormData) {\n                libraryHeaders['Content-Type'] = 'multipart/form-data';\n                params.data = initParams.body;\n              } else {\n                libraryHeaders['Content-Type'] = 'application/json; charset=UTF-8';\n                params.data = JSON.stringify(initParams.body);\n              }\n            }\n\n            if (initParams.responseType) {\n              params.responseType = initParams.responseType;\n            }\n\n            if (initParams.withCredentials) {\n              params['withCredentials'] = initParams.withCredentials;\n            }\n\n            if (initParams.timeout) {\n              params.timeout = initParams.timeout;\n            }\n\n            if (initParams.cancellableToken) {\n              params.cancelToken = initParams.cancellableToken.token;\n            }\n\n            params['signerServiceInfo'] = initParams.signerServiceInfo;\n            if (!(typeof custom_header === 'function')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , custom_header()];\n\n          case 1:\n            _a = _c.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = undefined;\n            _c.label = 3;\n\n          case 3:\n            custom_header_obj = _a;\n            params.headers = __assign(__assign(__assign({}, libraryHeaders), custom_header_obj), initParams.headers);\n            _b = parse(url, true, true), search = _b.search, parsedUrl = __rest(_b, [\"search\"]);\n            params.url = format(__assign(__assign({}, parsedUrl), {\n              query: __assign(__assign({}, parsedUrl.query), initParams.queryStringParameters || {})\n            })); // Do not sign the request if client has added 'Authorization' header,\n            // which means custom authorizer.\n\n            if (typeof params.headers['Authorization'] !== 'undefined') {\n              params.headers = Object.keys(params.headers).reduce(function (acc, k) {\n                if (params.headers[k]) {\n                  acc[k] = params.headers[k];\n                }\n\n                return acc; // tslint:disable-next-line:align\n              }, {});\n              return [2\n              /*return*/\n              , this._request(params, isAllResponse)];\n            } // Signing the request in case there credentials are available\n\n\n            return [2\n            /*return*/\n            , this.Credentials.get().then(function (credentials) {\n              return _this._signed(__assign({}, params), credentials, isAllResponse, {\n                region: region,\n                service: service\n              }).catch(function (error) {\n                if (DateUtils.isClockSkewError(error)) {\n                  var headers = error.response.headers;\n                  var dateHeader = headers && (headers.date || headers.Date);\n                  var responseDate = new Date(dateHeader);\n                  var requestDate = DateUtils.getDateFromHeaderString(params.headers['x-amz-date']);\n\n                  if (DateUtils.isClockSkewed(requestDate, responseDate)) {\n                    DateUtils.setClockOffset(responseDate.getTime() - requestDate.getTime());\n                    return _this.ajax(urlOrApiInfo, method, init);\n                  }\n                }\n\n                throw error;\n              });\n            }, function (err) {\n              logger.debug('No credentials available, the request will be unsigned');\n              return _this._request(params, isAllResponse);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * GET HTTP request\n   * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information\n   * @param {JSON} init - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  RestClient.prototype.get = function (urlOrApiInfo, init) {\n    return this.ajax(urlOrApiInfo, 'GET', init);\n  };\n  /**\n   * PUT HTTP request\n   * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information\n   * @param {json} init - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  RestClient.prototype.put = function (urlOrApiInfo, init) {\n    return this.ajax(urlOrApiInfo, 'PUT', init);\n  };\n  /**\n   * PATCH HTTP request\n   * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information\n   * @param {json} init - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  RestClient.prototype.patch = function (urlOrApiInfo, init) {\n    return this.ajax(urlOrApiInfo, 'PATCH', init);\n  };\n  /**\n   * POST HTTP request\n   * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information\n   * @param {json} init - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  RestClient.prototype.post = function (urlOrApiInfo, init) {\n    return this.ajax(urlOrApiInfo, 'POST', init);\n  };\n  /**\n   * DELETE HTTP request\n   * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information\n   * @param {json} init - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  RestClient.prototype.del = function (urlOrApiInfo, init) {\n    return this.ajax(urlOrApiInfo, 'DELETE', init);\n  };\n  /**\n   * HEAD HTTP request\n   * @param {string | ApiInfo } urlOrApiInfo - Full request URL or Api information\n   * @param {json} init - Request extra params\n   * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\n   */\n\n\n  RestClient.prototype.head = function (urlOrApiInfo, init) {\n    return this.ajax(urlOrApiInfo, 'HEAD', init);\n  };\n  /**\n   * Cancel an inflight API request\n   * @param {Promise<any>} request - The request promise to cancel\n   * @param {string} [message] - A message to include in the cancelation exception\n   */\n\n\n  RestClient.prototype.cancel = function (request, message) {\n    var source = this._cancelTokenMap.get(request);\n\n    if (source) {\n      source.cancel(message);\n    }\n\n    return true;\n  };\n  /**\n   * Checks to see if an error thrown is from an api request cancellation\n   * @param {any} error - Any error\n   * @return {boolean} - A boolean indicating if the error was from an api request cancellation\n   */\n\n\n  RestClient.prototype.isCancel = function (error) {\n    return axios.isCancel(error);\n  };\n  /**\n   * Retrieves a new and unique cancel token which can be\n   * provided in an axios request to be cancelled later.\n   */\n\n\n  RestClient.prototype.getCancellableToken = function () {\n    return axios.CancelToken.source();\n  };\n  /**\n   * Updates the weakmap with a response promise and its\n   * cancel token such that the cancel token can be easily\n   * retrieved (and used for cancelling the request)\n   */\n\n\n  RestClient.prototype.updateRequestToBeCancellable = function (promise, cancelTokenSource) {\n    this._cancelTokenMap.set(promise, cancelTokenSource);\n  };\n  /**\n   * Getting endpoint for API\n   * @param {string} apiName - The name of the api\n   * @return {string} - The endpoint of the api\n   */\n\n\n  RestClient.prototype.endpoint = function (apiName) {\n    var _this = this;\n\n    var cloud_logic_array = this._options.endpoints;\n    var response = '';\n\n    if (!Array.isArray(cloud_logic_array)) {\n      return response;\n    }\n\n    cloud_logic_array.forEach(function (v) {\n      if (v.name === apiName) {\n        response = v.endpoint;\n\n        if (typeof v.region === 'string') {\n          _this._region = v.region;\n        } else if (typeof _this._options.region === 'string') {\n          _this._region = _this._options.region;\n        }\n\n        if (typeof v.service === 'string') {\n          _this._service = v.service || 'execute-api';\n        } else {\n          _this._service = 'execute-api';\n        }\n\n        if (typeof v.custom_header === 'function') {\n          _this._custom_header = v.custom_header;\n        } else {\n          _this._custom_header = undefined;\n        }\n      }\n    });\n    return response;\n  };\n  /** private methods **/\n\n\n  RestClient.prototype._signed = function (params, credentials, isAllResponse, _a) {\n    var service = _a.service,\n        region = _a.region;\n\n    var signerServiceInfoParams = params.signerServiceInfo,\n        otherParams = __rest(params, [\"signerServiceInfo\"]);\n\n    var endpoint_region = region || this._region || this._options.region;\n    var endpoint_service = service || this._service || this._options.service;\n    var creds = {\n      secret_key: credentials.secretAccessKey,\n      access_key: credentials.accessKeyId,\n      session_token: credentials.sessionToken\n    };\n    var endpointInfo = {\n      region: endpoint_region,\n      service: endpoint_service\n    };\n    var signerServiceInfo = Object.assign(endpointInfo, signerServiceInfoParams);\n    var signed_params = Signer.sign(otherParams, creds, signerServiceInfo);\n\n    if (signed_params.data) {\n      signed_params.body = signed_params.data;\n    }\n\n    logger.debug('Signed Request: ', signed_params);\n    delete signed_params.headers['host'];\n    return axios(signed_params).then(function (response) {\n      return isAllResponse ? response : response.data;\n    }).catch(function (error) {\n      logger.debug(error);\n      throw error;\n    });\n  };\n\n  RestClient.prototype._request = function (params, isAllResponse) {\n    if (isAllResponse === void 0) {\n      isAllResponse = false;\n    }\n\n    return axios(params).then(function (response) {\n      return isAllResponse ? response : response.data;\n    }).catch(function (error) {\n      logger.debug(error);\n      throw error;\n    });\n  };\n\n  RestClient.prototype._parseUrl = function (url) {\n    var parts = url.split('/');\n    return {\n      host: parts[2],\n      path: '/' + parts.slice(3).join('/')\n    };\n  };\n\n  return RestClient;\n}();\n\nexport { RestClient };","map":null,"metadata":{},"sourceType":"module"}