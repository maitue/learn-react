{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateStreamProcessorRequest, CreateStreamProcessorResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateStreamProcessorCommand, serializeAws_json1_1CreateStreamProcessorCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces in a streaming video.</p>\n *         <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. Amazon Rekognition Video sends analysis results to Amazon Kinesis Data Streams.</p>\n *         <p>You provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream. You also specify the\n *             face recognition criteria in <code>Settings</code>. For example, the collection containing faces that you want to recognize.\n *             Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code>\n *             to manage the stream processor. For example, you can start processing the source video by calling <a>StartStreamProcessor</a> with\n *             the <code>Name</code> field. </p>\n *         <p>After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a> to\n *         stop processing. You can delete the stream processor by calling <a>DeleteStreamProcessor</a>.</p>\n */\n\nvar CreateStreamProcessorCommand =\n/** @class */\nfunction (_super) {\n  __extends(CreateStreamProcessorCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CreateStreamProcessorCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CreateStreamProcessorCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"CreateStreamProcessorCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateStreamProcessorRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateStreamProcessorResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CreateStreamProcessorCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateStreamProcessorCommand(input, context);\n  };\n\n  CreateStreamProcessorCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateStreamProcessorCommand(output, context);\n  };\n\n  return CreateStreamProcessorCommand;\n}($Command);\n\nexport { CreateStreamProcessorCommand };","map":null,"metadata":{},"sourceType":"module"}