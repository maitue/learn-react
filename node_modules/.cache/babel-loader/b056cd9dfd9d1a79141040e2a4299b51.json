{"ast":null,"code":"'use strict';\n\nvar nameStartChar = \":A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\nvar nameChar = nameStartChar + \"\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\nvar nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nvar regexName = new RegExp('^' + nameRegexp + '$');\n\nvar getAllMatches = function getAllMatches(string, regex) {\n  var matches = [];\n  var match = regex.exec(string);\n\n  while (match) {\n    var allmatches = [];\n    var len = match.length;\n\n    for (var index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n\n  return matches;\n};\n\nvar isName = function isName(string) {\n  var match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function (v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function (obj) {\n  return Object.keys(obj).length === 0;\n};\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\n\n\nexports.merge = function (target, a, arrayMode) {\n  if (a) {\n    var keys = Object.keys(a); // will return an array of own properties\n\n    var len = keys.length; //don't make it inline\n\n    for (var i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [a[keys[i]]];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\n\nexports.getValue = function (v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}; // const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\n\nexports.buildOptions = function (options, defaultOptions, props) {\n  var newOptions = {};\n\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (var i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n\n  return newOptions;\n};\n/**\n * Check if a tag name should be treated as array\n *\n * @param tagName the node tagname\n * @param arrayMode the array mode option\n * @param parentTagName the parent tag name\n * @returns {boolean} true if node should be parsed as array\n */\n\n\nexports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {\n  if (arrayMode === false) {\n    return false;\n  } else if (arrayMode instanceof RegExp) {\n    return arrayMode.test(tagName);\n  } else if (typeof arrayMode === 'function') {\n    return !!arrayMode(tagName, parentTagName);\n  }\n\n  return arrayMode === \"strict\";\n};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;","map":null,"metadata":{},"sourceType":"script"}