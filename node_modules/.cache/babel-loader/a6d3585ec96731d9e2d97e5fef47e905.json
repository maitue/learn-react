{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { ConfigConsumer } from '../config-provider';\nimport defaultRenderEmpty from '../config-provider/defaultRenderEmpty';\nimport { FormItemInputContext } from '../form/context';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale/default';\nimport { getMergedStatus, getStatusClassNames } from '../_util/statusUtils';\nimport warning from '../_util/warning';\nimport List from './list';\nimport Operation from './operation';\nimport Search from './search';\n\nvar Transfer = /*#__PURE__*/function (_React$Component) {\n  _inherits(Transfer, _React$Component);\n\n  var _super = _createSuper(Transfer);\n\n  function Transfer(props) {\n    var _this;\n\n    _classCallCheck(this, Transfer);\n\n    _this = _super.call(this, props);\n    _this.separatedDataSource = null;\n\n    _this.setStateKeys = function (direction, keys) {\n      if (direction === 'left') {\n        _this.setState(function (_ref) {\n          var sourceSelectedKeys = _ref.sourceSelectedKeys;\n          return {\n            sourceSelectedKeys: typeof keys === 'function' ? keys(sourceSelectedKeys || []) : keys\n          };\n        });\n      } else {\n        _this.setState(function (_ref2) {\n          var targetSelectedKeys = _ref2.targetSelectedKeys;\n          return {\n            targetSelectedKeys: typeof keys === 'function' ? keys(targetSelectedKeys || []) : keys\n          };\n        });\n      }\n    };\n\n    _this.getLocale = function (transferLocale, renderEmpty) {\n      return _extends(_extends(_extends({}, transferLocale), {\n        notFoundContent: renderEmpty('Transfer')\n      }), _this.props.locale);\n    };\n\n    _this.moveTo = function (direction) {\n      var _this$props = _this.props,\n          _this$props$targetKey = _this$props.targetKeys,\n          targetKeys = _this$props$targetKey === void 0 ? [] : _this$props$targetKey,\n          _this$props$dataSourc = _this$props.dataSource,\n          dataSource = _this$props$dataSourc === void 0 ? [] : _this$props$dataSourc,\n          onChange = _this$props.onChange;\n      var _this$state = _this.state,\n          sourceSelectedKeys = _this$state.sourceSelectedKeys,\n          targetSelectedKeys = _this$state.targetSelectedKeys;\n      var moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys; // filter the disabled options\n\n      var newMoveKeys = moveKeys.filter(function (key) {\n        return !dataSource.some(function (data) {\n          return !!(key === data.key && data.disabled);\n        });\n      }); // move items to target box\n\n      var newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(function (targetKey) {\n        return newMoveKeys.indexOf(targetKey) === -1;\n      }); // empty checked keys\n\n      var oppositeDirection = direction === 'right' ? 'left' : 'right';\n\n      _this.setStateKeys(oppositeDirection, []);\n\n      _this.handleSelectChange(oppositeDirection, []);\n\n      onChange === null || onChange === void 0 ? void 0 : onChange(newTargetKeys, direction, newMoveKeys);\n    };\n\n    _this.moveToLeft = function () {\n      return _this.moveTo('left');\n    };\n\n    _this.moveToRight = function () {\n      return _this.moveTo('right');\n    };\n\n    _this.onItemSelectAll = function (direction, selectedKeys, checkAll) {\n      _this.setStateKeys(direction, function (prevKeys) {\n        var mergedCheckedKeys = [];\n\n        if (checkAll) {\n          // Merge current keys with origin key\n          mergedCheckedKeys = Array.from(new Set([].concat(_toConsumableArray(prevKeys), _toConsumableArray(selectedKeys))));\n        } else {\n          // Remove current keys from origin keys\n          mergedCheckedKeys = prevKeys.filter(function (key) {\n            return selectedKeys.indexOf(key) === -1;\n          });\n        }\n\n        _this.handleSelectChange(direction, mergedCheckedKeys);\n\n        return mergedCheckedKeys;\n      });\n    };\n\n    _this.onLeftItemSelectAll = function (selectedKeys, checkAll) {\n      return _this.onItemSelectAll('left', selectedKeys, checkAll);\n    };\n\n    _this.onRightItemSelectAll = function (selectedKeys, checkAll) {\n      return _this.onItemSelectAll('right', selectedKeys, checkAll);\n    };\n\n    _this.handleFilter = function (direction, e) {\n      var onSearch = _this.props.onSearch;\n      var value = e.target.value;\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(direction, value);\n    };\n\n    _this.handleLeftFilter = function (e) {\n      return _this.handleFilter('left', e);\n    };\n\n    _this.handleRightFilter = function (e) {\n      return _this.handleFilter('right', e);\n    };\n\n    _this.handleClear = function (direction) {\n      var onSearch = _this.props.onSearch;\n      onSearch === null || onSearch === void 0 ? void 0 : onSearch(direction, '');\n    };\n\n    _this.handleLeftClear = function () {\n      return _this.handleClear('left');\n    };\n\n    _this.handleRightClear = function () {\n      return _this.handleClear('right');\n    };\n\n    _this.onItemSelect = function (direction, selectedKey, checked) {\n      var _this$state2 = _this.state,\n          sourceSelectedKeys = _this$state2.sourceSelectedKeys,\n          targetSelectedKeys = _this$state2.targetSelectedKeys;\n      var holder = direction === 'left' ? _toConsumableArray(sourceSelectedKeys) : _toConsumableArray(targetSelectedKeys);\n      var index = holder.indexOf(selectedKey);\n\n      if (index > -1) {\n        holder.splice(index, 1);\n      }\n\n      if (checked) {\n        holder.push(selectedKey);\n      }\n\n      _this.handleSelectChange(direction, holder);\n\n      if (!_this.props.selectedKeys) {\n        _this.setStateKeys(direction, holder);\n      }\n    };\n\n    _this.onLeftItemSelect = function (selectedKey, checked) {\n      return _this.onItemSelect('left', selectedKey, checked);\n    };\n\n    _this.onRightItemSelect = function (selectedKey, checked) {\n      return _this.onItemSelect('right', selectedKey, checked);\n    };\n\n    _this.onRightItemRemove = function (selectedKeys) {\n      var _this$props2 = _this.props,\n          _this$props2$targetKe = _this$props2.targetKeys,\n          targetKeys = _this$props2$targetKe === void 0 ? [] : _this$props2$targetKe,\n          onChange = _this$props2.onChange;\n\n      _this.setStateKeys('right', []);\n\n      onChange === null || onChange === void 0 ? void 0 : onChange(targetKeys.filter(function (key) {\n        return !selectedKeys.includes(key);\n      }), 'left', _toConsumableArray(selectedKeys));\n    };\n\n    _this.handleScroll = function (direction, e) {\n      var onScroll = _this.props.onScroll;\n      onScroll === null || onScroll === void 0 ? void 0 : onScroll(direction, e);\n    };\n\n    _this.handleLeftScroll = function (e) {\n      return _this.handleScroll('left', e);\n    };\n\n    _this.handleRightScroll = function (e) {\n      return _this.handleScroll('right', e);\n    }; // eslint-disable-next-line class-methods-use-this\n\n\n    _this.handleListStyle = function (listStyle, direction) {\n      if (typeof listStyle === 'function') {\n        return listStyle({\n          direction: direction\n        });\n      }\n\n      return listStyle;\n    };\n\n    _this.renderTransfer = function (transferLocale) {\n      return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref3) {\n        var getPrefixCls = _ref3.getPrefixCls,\n            renderEmpty = _ref3.renderEmpty,\n            direction = _ref3.direction;\n        return /*#__PURE__*/React.createElement(FormItemInputContext.Consumer, null, function (_ref4) {\n          var _classNames;\n\n          var hasFeedback = _ref4.hasFeedback,\n              contextStatus = _ref4.status;\n          var _this$props3 = _this.props,\n              customizePrefixCls = _this$props3.prefixCls,\n              className = _this$props3.className,\n              disabled = _this$props3.disabled,\n              _this$props3$operatio = _this$props3.operations,\n              operations = _this$props3$operatio === void 0 ? [] : _this$props3$operatio,\n              showSearch = _this$props3.showSearch,\n              footer = _this$props3.footer,\n              style = _this$props3.style,\n              listStyle = _this$props3.listStyle,\n              operationStyle = _this$props3.operationStyle,\n              filterOption = _this$props3.filterOption,\n              render = _this$props3.render,\n              children = _this$props3.children,\n              showSelectAll = _this$props3.showSelectAll,\n              oneWay = _this$props3.oneWay,\n              pagination = _this$props3.pagination,\n              customStatus = _this$props3.status;\n          var prefixCls = getPrefixCls('transfer', customizePrefixCls);\n\n          var locale = _this.getLocale(transferLocale, renderEmpty || defaultRenderEmpty);\n\n          var _this$state3 = _this.state,\n              sourceSelectedKeys = _this$state3.sourceSelectedKeys,\n              targetSelectedKeys = _this$state3.targetSelectedKeys;\n          var mergedStatus = getMergedStatus(contextStatus, customStatus);\n          var mergedPagination = !children && pagination;\n\n          var _this$separateDataSou = _this.separateDataSource(),\n              leftDataSource = _this$separateDataSou.leftDataSource,\n              rightDataSource = _this$separateDataSou.rightDataSource;\n\n          var leftActive = targetSelectedKeys.length > 0;\n          var rightActive = sourceSelectedKeys.length > 0;\n          var cls = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-customize-list\"), !!children), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), getStatusClassNames(prefixCls, mergedStatus, hasFeedback), className);\n\n          var titles = _this.getTitles(locale);\n\n          var selectAllLabels = _this.props.selectAllLabels || [];\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: cls,\n            style: style\n          }, /*#__PURE__*/React.createElement(List, _extends({\n            prefixCls: \"\".concat(prefixCls, \"-list\"),\n            titleText: titles[0],\n            dataSource: leftDataSource,\n            filterOption: filterOption,\n            style: _this.handleListStyle(listStyle, 'left'),\n            checkedKeys: sourceSelectedKeys,\n            handleFilter: _this.handleLeftFilter,\n            handleClear: _this.handleLeftClear,\n            onItemSelect: _this.onLeftItemSelect,\n            onItemSelectAll: _this.onLeftItemSelectAll,\n            render: render,\n            showSearch: showSearch,\n            renderList: children,\n            footer: footer,\n            onScroll: _this.handleLeftScroll,\n            disabled: disabled,\n            direction: direction === 'rtl' ? 'right' : 'left',\n            showSelectAll: showSelectAll,\n            selectAllLabel: selectAllLabels[0],\n            pagination: mergedPagination\n          }, locale)), /*#__PURE__*/React.createElement(Operation, {\n            className: \"\".concat(prefixCls, \"-operation\"),\n            rightActive: rightActive,\n            rightArrowText: operations[0],\n            moveToRight: _this.moveToRight,\n            leftActive: leftActive,\n            leftArrowText: operations[1],\n            moveToLeft: _this.moveToLeft,\n            style: operationStyle,\n            disabled: disabled,\n            direction: direction,\n            oneWay: oneWay\n          }), /*#__PURE__*/React.createElement(List, _extends({\n            prefixCls: \"\".concat(prefixCls, \"-list\"),\n            titleText: titles[1],\n            dataSource: rightDataSource,\n            filterOption: filterOption,\n            style: _this.handleListStyle(listStyle, 'right'),\n            checkedKeys: targetSelectedKeys,\n            handleFilter: _this.handleRightFilter,\n            handleClear: _this.handleRightClear,\n            onItemSelect: _this.onRightItemSelect,\n            onItemSelectAll: _this.onRightItemSelectAll,\n            onItemRemove: _this.onRightItemRemove,\n            render: render,\n            showSearch: showSearch,\n            renderList: children,\n            footer: footer,\n            onScroll: _this.handleRightScroll,\n            disabled: disabled,\n            direction: direction === 'rtl' ? 'left' : 'right',\n            showSelectAll: showSelectAll,\n            selectAllLabel: selectAllLabels[1],\n            showRemove: oneWay,\n            pagination: mergedPagination\n          }, locale)));\n        });\n      });\n    };\n\n    var _props$selectedKeys = props.selectedKeys,\n        selectedKeys = _props$selectedKeys === void 0 ? [] : _props$selectedKeys,\n        _props$targetKeys = props.targetKeys,\n        targetKeys = _props$targetKeys === void 0 ? [] : _props$targetKeys;\n    _this.state = {\n      sourceSelectedKeys: selectedKeys.filter(function (key) {\n        return targetKeys.indexOf(key) === -1;\n      }),\n      targetSelectedKeys: selectedKeys.filter(function (key) {\n        return targetKeys.indexOf(key) > -1;\n      })\n    };\n    return _this;\n  }\n\n  _createClass(Transfer, [{\n    key: \"getTitles\",\n    value: function getTitles(transferLocale) {\n      var _a;\n\n      return (_a = this.props.titles) !== null && _a !== void 0 ? _a : transferLocale.titles;\n    }\n  }, {\n    key: \"handleSelectChange\",\n    value: function handleSelectChange(direction, holder) {\n      var _this$state4 = this.state,\n          sourceSelectedKeys = _this$state4.sourceSelectedKeys,\n          targetSelectedKeys = _this$state4.targetSelectedKeys;\n      var onSelectChange = this.props.onSelectChange;\n\n      if (!onSelectChange) {\n        return;\n      }\n\n      if (direction === 'left') {\n        onSelectChange(holder, targetSelectedKeys);\n      } else {\n        onSelectChange(sourceSelectedKeys, holder);\n      }\n    }\n  }, {\n    key: \"separateDataSource\",\n    value: function separateDataSource() {\n      var _this$props4 = this.props,\n          dataSource = _this$props4.dataSource,\n          rowKey = _this$props4.rowKey,\n          _this$props4$targetKe = _this$props4.targetKeys,\n          targetKeys = _this$props4$targetKe === void 0 ? [] : _this$props4$targetKe;\n      var leftDataSource = [];\n      var rightDataSource = new Array(targetKeys.length);\n      dataSource.forEach(function (record) {\n        if (rowKey) {\n          record = _extends(_extends({}, record), {\n            key: rowKey(record)\n          });\n        } // rightDataSource should be ordered by targetKeys\n        // leftDataSource should be ordered by dataSource\n\n\n        var indexOfKey = targetKeys.indexOf(record.key);\n\n        if (indexOfKey !== -1) {\n          rightDataSource[indexOfKey] = record;\n        } else {\n          leftDataSource.push(record);\n        }\n      });\n      return {\n        leftDataSource: leftDataSource,\n        rightDataSource: rightDataSource\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(LocaleReceiver, {\n        componentName: \"Transfer\",\n        defaultLocale: defaultLocale.Transfer\n      }, this.renderTransfer);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref5) {\n      var selectedKeys = _ref5.selectedKeys,\n          targetKeys = _ref5.targetKeys,\n          pagination = _ref5.pagination,\n          children = _ref5.children;\n\n      if (selectedKeys) {\n        var mergedTargetKeys = targetKeys || [];\n        return {\n          sourceSelectedKeys: selectedKeys.filter(function (key) {\n            return !mergedTargetKeys.includes(key);\n          }),\n          targetSelectedKeys: selectedKeys.filter(function (key) {\n            return mergedTargetKeys.includes(key);\n          })\n        };\n      }\n\n      process.env.NODE_ENV !== \"production\" ? warning(!pagination || !children, 'Transfer', '`pagination` not support customize render list.') : void 0;\n      return null;\n    }\n  }]);\n\n  return Transfer;\n}(React.Component); // For high-level customized Transfer @dqaria\n\n\nTransfer.List = List;\nTransfer.Operation = Operation;\nTransfer.Search = Search;\nTransfer.defaultProps = {\n  dataSource: [],\n  locale: {},\n  showSearch: false,\n  listStyle: function listStyle() {}\n};\nexport default Transfer;","map":null,"metadata":{},"sourceType":"module"}