{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport RcSegmented from 'rc-segmented';\nimport { ConfigContext } from '../config-provider';\nimport SizeContext from '../config-provider/SizeContext';\n\nfunction isSegmentedLabeledOptionWithIcon(option) {\n  return _typeof(option) === 'object' && !!(option === null || option === void 0 ? void 0 : option.icon);\n}\n\nvar Segmented = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      block = props.block,\n      options = props.options,\n      _props$size = props.size,\n      customSize = _props$size === void 0 ? 'middle' : _props$size,\n      restProps = __rest(props, [\"prefixCls\", \"className\", \"block\", \"options\", \"size\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('segmented', customizePrefixCls); // ===================== Size =====================\n\n  var size = React.useContext(SizeContext);\n  var mergedSize = customSize || size; // syntactic sugar to support `icon` for Segmented Item\n\n  var extendedOptions = React.useMemo(function () {\n    return options.map(function (option) {\n      if (isSegmentedLabeledOptionWithIcon(option)) {\n        var icon = option.icon,\n            label = option.label,\n            restOption = __rest(option, [\"icon\", \"label\"]);\n\n        return _extends(_extends({}, restOption), {\n          label: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"\".concat(prefixCls, \"-item-icon\")\n          }, icon), label && /*#__PURE__*/React.createElement(\"span\", null, label))\n        });\n      }\n\n      return option;\n    });\n  }, [options, prefixCls]);\n  return /*#__PURE__*/React.createElement(RcSegmented, _extends({}, restProps, {\n    className: classNames(className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-block\"), block), _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), mergedSize === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), mergedSize === 'large'), _classNames)),\n    options: extendedOptions,\n    ref: ref,\n    prefixCls: prefixCls,\n    direction: direction\n  }));\n});\nSegmented.displayName = 'Segmented';\nSegmented.defaultProps = {\n  options: []\n};\nexport default Segmented;","map":null,"metadata":{},"sourceType":"module"}