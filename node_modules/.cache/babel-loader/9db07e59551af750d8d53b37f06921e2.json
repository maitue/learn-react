{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddleware = function useRegionalEndpointMiddleware(config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return [2\n              /*return*/\n              , next(__assign({}, args))];\n              if (!(request.hostname === \"s3.amazonaws.com\")) return [3\n              /*break*/\n              , 1];\n              request.hostname = \"s3.us-east-1.amazonaws.com\";\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              _a = \"aws-global\";\n              return [4\n              /*yield*/\n              , config.region()];\n\n            case 2:\n              if (_a === _b.sent()) {\n                request.hostname = \"s3.amazonaws.com\";\n              }\n\n              _b.label = 3;\n\n            case 3:\n              return [2\n              /*return*/\n              , next(__assign({}, args))];\n          }\n        });\n      });\n    };\n  };\n};\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true\n};\n/**\n * @internal\n */\n\nexport var getUseRegionalEndpointPlugin = function getUseRegionalEndpointPlugin(config) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}