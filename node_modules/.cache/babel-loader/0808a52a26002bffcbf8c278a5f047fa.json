{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\n\nexport function fromCognitoIdentityPool(_a) {\n  var _this = this;\n\n  var accountId = _a.accountId,\n      _b = _a.cache,\n      cache = _b === void 0 ? localStorage() : _b,\n      client = _a.client,\n      customRoleArn = _a.customRoleArn,\n      identityPoolId = _a.identityPoolId,\n      logins = _a.logins,\n      _c = _a.userIdentifier,\n      userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined : _c;\n  var cacheKey = userIdentifier ? \"aws:cognito-identity-credentials:\" + identityPoolId + \":\" + userIdentifier : undefined;\n\n  var _provider = function provider() {\n    return __awaiter(_this, void 0, void 0, function () {\n      var identityId, _a, _b, IdentityId, _c, _d, _e, _f;\n\n      var _g;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _a = cacheKey;\n            if (!_a) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , cache.getItem(cacheKey)];\n\n          case 1:\n            _a = _h.sent();\n            _h.label = 2;\n\n          case 2:\n            identityId = _a;\n            if (!!identityId) return [3\n            /*break*/\n            , 7];\n            _d = (_c = client).send;\n            _e = GetIdCommand.bind;\n            _g = {\n              AccountId: accountId,\n              IdentityPoolId: identityPoolId\n            };\n            if (!logins) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , resolveLogins(logins)];\n\n          case 3:\n            _f = _h.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            _f = undefined;\n            _h.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];\n\n          case 6:\n            _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;\n            identityId = IdentityId;\n\n            if (cacheKey) {\n              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () {});\n            }\n\n            _h.label = 7;\n\n          case 7:\n            _provider = fromCognitoIdentity({\n              client: client,\n              customRoleArn: customRoleArn,\n              logins: logins,\n              identityId: identityId\n            });\n            return [2\n            /*return*/\n            , _provider()];\n        }\n      });\n    });\n  };\n\n  return function () {\n    return _provider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(function () {});\n          }\n\n          throw err;\n        });\n      });\n    });\n  };\n}\n\nfunction throwOnMissingId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":null,"metadata":{},"sourceType":"module"}