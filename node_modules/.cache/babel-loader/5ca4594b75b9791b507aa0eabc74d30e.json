{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SubscribeToShardInput, SubscribeToShardOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1SubscribeToShardCommand, serializeAws_json1_1SubscribeToShardCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This operation establishes an HTTP/2 connection between the consumer you specify in\n *             the <code>ConsumerARN</code> parameter and the shard you specify in the\n *                 <code>ShardId</code> parameter. After the connection is successfully established,\n *             Kinesis Data Streams pushes records from the shard to the consumer over this connection.\n *             Before you call this operation, call <a>RegisterStreamConsumer</a> to\n *             register the consumer with Kinesis Data Streams.</p>\n *         <p>When the <code>SubscribeToShard</code> call succeeds, your consumer starts receiving\n *             events of type <a>SubscribeToShardEvent</a> over the HTTP/2 connection for up\n *             to 5 minutes, after which time you need to call <code>SubscribeToShard</code> again to\n *             renew the subscription if you want to continue to receive records.</p>\n *         <p>You can make one call to <code>SubscribeToShard</code> per second per registered\n *             consumer per shard. For example, if you have a 4000 shard stream and two registered\n *             stream consumers, you can make one <code>SubscribeToShard</code> request per second for\n *             each combination of shard and registered consumer, allowing you to subscribe both\n *             consumers to all 4000 shards in one second. </p>\n *         <p>If you call <code>SubscribeToShard</code> again with the same <code>ConsumerARN</code>\n *             and <code>ShardId</code> within 5 seconds of a successful call, you'll get a\n *                 <code>ResourceInUseException</code>. If you call <code>SubscribeToShard</code> 5\n *             seconds or more after a successful call, the first connection will expire and the second\n *             call will take over the subscription.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n */\n\nvar SubscribeToShardCommand =\n/** @class */\nfunction (_super) {\n  __extends(SubscribeToShardCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SubscribeToShardCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SubscribeToShardCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"SubscribeToShardCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SubscribeToShardInput.filterSensitiveLog,\n      outputFilterSensitiveLog: SubscribeToShardOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SubscribeToShardCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SubscribeToShardCommand(input, context);\n  };\n\n  SubscribeToShardCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SubscribeToShardCommand(output, context);\n  };\n\n  return SubscribeToShardCommand;\n}($Command);\n\nexport { SubscribeToShardCommand };","map":null,"metadata":{},"sourceType":"module"}