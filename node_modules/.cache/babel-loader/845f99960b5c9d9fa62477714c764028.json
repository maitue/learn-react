{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UpdateDestinationInput, UpdateDestinationOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1UpdateDestinationCommand, serializeAws_json1_1UpdateDestinationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Updates the specified destination of the specified delivery stream.</p>\n *\n *          <p>Use this operation to change the destination type (for example, to replace the Amazon\n *          S3 destination with Amazon Redshift) or change the parameters associated with a destination\n *          (for example, to change the bucket name of the Amazon S3 destination). The update might not\n *          occur immediately. The target delivery stream remains active while the configurations are\n *          updated, so data writes to the delivery stream can continue during this process. The\n *          updated configurations are usually effective within a few minutes.</p>\n *          <p>Switching between Amazon ES and other services is not supported. For an Amazon ES\n *          destination, you can only update to another Amazon ES destination.</p>\n *          <p>If the destination type is the same, Kinesis Data Firehose merges the configuration\n *          parameters specified with the destination configuration that already exists on the delivery\n *          stream. If any of the parameters are not specified in the call, the existing values are\n *          retained. For example, in the Amazon S3 destination, if <a>EncryptionConfiguration</a> is not specified, then the existing\n *             <code>EncryptionConfiguration</code> is maintained on the destination.</p>\n *          <p>If the destination type is not the same, for example, changing the destination from\n *          Amazon S3 to Amazon Redshift, Kinesis Data Firehose does not merge any parameters. In this\n *          case, all parameters must be specified.</p>\n *\n *          <p>Kinesis Data Firehose uses <code>CurrentDeliveryStreamVersionId</code> to avoid race\n *          conditions and conflicting merges. This is a required field, and the service updates the\n *          configuration only if the existing configuration has a version ID that matches. After the\n *          update is applied successfully, the version ID is updated, and can be retrieved using <a>DescribeDeliveryStream</a>. Use the new version ID to set\n *             <code>CurrentDeliveryStreamVersionId</code> in the next call.</p>\n */\n\nvar UpdateDestinationCommand =\n/** @class */\nfunction (_super) {\n  __extends(UpdateDestinationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function UpdateDestinationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  UpdateDestinationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"UpdateDestinationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: UpdateDestinationInput.filterSensitiveLog,\n      outputFilterSensitiveLog: UpdateDestinationOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  UpdateDestinationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1UpdateDestinationCommand(input, context);\n  };\n\n  UpdateDestinationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1UpdateDestinationCommand(output, context);\n  };\n\n  return UpdateDestinationCommand;\n}($Command);\n\nexport { UpdateDestinationCommand };","map":null,"metadata":{},"sourceType":"module"}