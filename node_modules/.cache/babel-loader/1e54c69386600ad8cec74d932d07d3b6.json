{"ast":null,"code":"import { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\nvar S3RequestPresigner =\n/** @class */\nfunction () {\n  function S3RequestPresigner(options) {\n    var resolvedOptions = __assign({\n      // Allow `signingName` because we want to support usecase of supply client's resolved config\n      // directly. Where service equals signingName.\n      service: options.signingName || options.service || \"s3\",\n      uriEscapePath: options.uriEscapePath || false\n    }, options);\n\n    this.signer = new SignatureV4(resolvedOptions);\n  }\n\n  S3RequestPresigner.prototype.presign = function (requestToSign, _a) {\n    if (_a === void 0) {\n      _a = {};\n    }\n\n    var _b = _a.unsignableHeaders,\n        unsignableHeaders = _b === void 0 ? new Set() : _b,\n        _c = _a.unhoistableHeaders,\n        unhoistableHeaders = _c === void 0 ? new Set() : _c,\n        options = __rest(_a, [\"unsignableHeaders\", \"unhoistableHeaders\"]);\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_d) {\n        unsignableHeaders.add(\"content-type\"); // S3 requires SSE headers to be signed in headers instead of query\n        // See: https://github.com/aws/aws-sdk-js-v3/issues/1576\n\n        Object.keys(requestToSign.headers).map(function (header) {\n          return header.toLowerCase();\n        }).filter(function (header) {\n          return header.startsWith(\"x-amz-server-side-encryption\");\n        }).forEach(function (header) {\n          unhoistableHeaders.add(header);\n        });\n        requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\n\n        if (!requestToSign.headers[\"host\"]) {\n          requestToSign.headers.host = requestToSign.hostname;\n        }\n\n        return [2\n        /*return*/\n        , this.signer.presign(requestToSign, __assign({\n          expiresIn: 900,\n          unsignableHeaders: unsignableHeaders,\n          unhoistableHeaders: unhoistableHeaders\n        }, options))];\n      });\n    });\n  };\n\n  return S3RequestPresigner;\n}();\n\nexport { S3RequestPresigner };","map":null,"metadata":{},"sourceType":"module"}