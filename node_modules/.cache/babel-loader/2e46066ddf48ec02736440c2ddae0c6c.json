{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketVersioningRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketVersioningCommand, serializeAws_restXmlPutBucketVersioningCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the versioning state of an existing bucket. To set the versioning state, you must\n *          be the bucket owner.</p>\n *          <p>You can set the versioning state with one of the following values:</p>\n *\n *          <p>\n *             <b>Enabled</b>—Enables versioning for the objects in the\n *          bucket. All objects added to the bucket receive a unique version ID.</p>\n *\n *          <p>\n *             <b>Suspended</b>—Disables versioning for the objects in the\n *          bucket. All objects added to the bucket receive the version ID null.</p>\n *\n *          <p>If the versioning state has never been set on a bucket, it has no versioning state; a\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html\">GetBucketVersioning</a> request does not return a versioning state value.</p>\n *\n *          <p>If the bucket owner enables MFA Delete in the bucket versioning configuration, the\n *          bucket owner must include the <code>x-amz-mfa request</code> header and the\n *             <code>Status</code> and the <code>MfaDelete</code> request elements in a request to set\n *          the versioning state of the bucket.</p>\n *\n *          <important>\n *             <p>If you have an object expiration lifecycle policy in your non-versioned bucket and\n *             you want to maintain the same permanent delete behavior when you enable versioning, you\n *             must add a noncurrent expiration policy. The noncurrent expiration lifecycle policy will\n *             manage the deletes of the noncurrent object versions in the version-enabled bucket. (A\n *             version-enabled bucket maintains one current and zero or more noncurrent object\n *             versions.) For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html#lifecycle-and-other-bucket-config\">Lifecycle and Versioning</a>.</p>\n *          </important>\n *\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html\">CreateBucket</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html\">DeleteBucket</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html\">GetBucketVersioning</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar PutBucketVersioningCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutBucketVersioningCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutBucketVersioningCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutBucketVersioningCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketVersioningCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketVersioningRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutBucketVersioningCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketVersioningCommand(input, context);\n  };\n\n  PutBucketVersioningCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketVersioningCommand(output, context);\n  };\n\n  return PutBucketVersioningCommand;\n}($Command);\n\nexport { PutBucketVersioningCommand };","map":null,"metadata":{},"sourceType":"module"}