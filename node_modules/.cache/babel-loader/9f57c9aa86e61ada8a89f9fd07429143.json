{"ast":null,"code":"/**\n * Given an input string, splits based on the delimiter after a given\n * number of delimiters has been encountered.\n *\n * @param value The input string to split.\n * @param delimiter The delimiter to split on.\n * @param numDelimiters The number of delimiters to have encountered to split.\n */\nexport function splitEvery(value, delimiter, numDelimiters) {\n  // Fail if we don't have a clear number to split on.\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n\n  var segments = value.split(delimiter); // Short circuit extra logic for the simple case.\n\n  if (numDelimiters === 1) {\n    return segments;\n  }\n\n  var compoundSegments = [];\n  var currentSegment = \"\";\n\n  for (var i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      // Start a new segment.\n      currentSegment = segments[i];\n    } else {\n      // Compound the current segment with the delimiter.\n      currentSegment += delimiter + segments[i];\n    }\n\n    if ((i + 1) % numDelimiters === 0) {\n      // We encountered the right number of delimiters, so add the entry.\n      compoundSegments.push(currentSegment); // And reset the current segment.\n\n      currentSegment = \"\";\n    }\n  } // Handle any leftover segment portion.\n\n\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n\n  return compoundSegments;\n}","map":null,"metadata":{},"sourceType":"module"}