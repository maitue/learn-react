{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport API from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport { buildGraphQLOperation, getModelAuthModes, getClientSideAuthError, getForbiddenError, predicateToGraphQLFilter } from '../utils';\nimport { jitteredExponentialRetry, ConsoleLogger as Logger, Hub, NonRetryableError } from '@aws-amplify/core';\nimport { ModelPredicateCreator } from '../../predicates';\nvar DEFAULT_PAGINATION_LIMIT = 1000;\nvar DEFAULT_MAX_RECORDS_TO_SYNC = 10000;\nvar opResultDefaults = {\n  items: [],\n  nextToken: null,\n  startedAt: null\n};\nvar logger = new Logger('DataStore');\n\nvar SyncProcessor =\n/** @class */\nfunction () {\n  function SyncProcessor(schema, maxRecordsToSync, syncPageSize, syncPredicates, amplifyConfig, authModeStrategy) {\n    if (maxRecordsToSync === void 0) {\n      maxRecordsToSync = DEFAULT_MAX_RECORDS_TO_SYNC;\n    }\n\n    if (syncPageSize === void 0) {\n      syncPageSize = DEFAULT_PAGINATION_LIMIT;\n    }\n\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.maxRecordsToSync = maxRecordsToSync;\n    this.syncPageSize = syncPageSize;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.typeQuery = new WeakMap();\n    this.generateQueries();\n  }\n\n  SyncProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'LIST'), 1),\n            _b = __read(_a[0]),\n            opNameQuery = _b.slice(1);\n\n        _this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  };\n\n  SyncProcessor.prototype.graphqlFilterFromPredicate = function (model) {\n    if (!this.syncPredicates) {\n      return null;\n    }\n\n    var predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n\n    if (!predicatesGroup) {\n      return null;\n    }\n\n    return predicateToGraphQLFilter(predicatesGroup);\n  };\n\n  SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit, filter) {\n    if (limit === void 0) {\n      limit = null;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, opName, query, variables, modelAuthModes, readAuthModes, authModeAttempts, _authModeRetry, data, _b, opResult, items, newNextToken, startedAt;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = __read(this.typeQuery.get(modelDefinition), 2), opName = _a[0], query = _a[1];\n            variables = {\n              limit: limit,\n              nextToken: nextToken,\n              lastSync: lastSync,\n              filter: filter\n            };\n            return [4\n            /*yield*/\n            , getModelAuthModes({\n              authModeStrategy: this.authModeStrategy,\n              defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n              modelName: modelDefinition.name,\n              schema: this.schema\n            })];\n\n          case 1:\n            modelAuthModes = _c.sent();\n            readAuthModes = modelAuthModes.READ;\n            authModeAttempts = 0;\n\n            _authModeRetry = function authModeRetry() {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_1, authMode;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 4]);\n\n                      logger.debug(\"Attempting sync with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4\n                      /*yield*/\n                      , this.jitteredRetry({\n                        query: query,\n                        variables: variables,\n                        opName: opName,\n                        modelDefinition: modelDefinition,\n                        authMode: readAuthModes[authModeAttempts]\n                      })];\n\n                    case 1:\n                      response = _b.sent();\n                      logger.debug(\"Sync successful with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [2\n                      /*return*/\n                      , response];\n\n                    case 2:\n                      error_1 = _b.sent();\n                      authModeAttempts++;\n\n                      if (authModeAttempts >= readAuthModes.length) {\n                        authMode = readAuthModes[authModeAttempts - 1];\n                        logger.debug(\"Sync failed with authMode: \" + authMode, error_1);\n\n                        if (getClientSideAuthError(error_1) || getForbiddenError(error_1)) {\n                          // return empty list of data so DataStore will continue to sync other models\n                          logger.warn(\"User is unauthorized to query \" + opName + \" with auth mode \" + authMode + \". No data could be returned.\");\n                          return [2\n                          /*return*/\n                          , {\n                            data: (_a = {}, _a[opName] = opResultDefaults, _a)\n                          }];\n                        }\n\n                        throw error_1;\n                      }\n\n                      logger.debug(\"Sync failed with authMode: \" + readAuthModes[authModeAttempts - 1] + \". Retrying with authMode: \" + readAuthModes[authModeAttempts]);\n                      return [4\n                      /*yield*/\n                      , _authModeRetry()];\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      , _b.sent()];\n\n                    case 4:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            return [4\n            /*yield*/\n            , _authModeRetry()];\n\n          case 2:\n            data = _c.sent().data;\n            _b = opName, opResult = data[_b];\n            items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n            return [2\n            /*return*/\n            , {\n              nextToken: newNextToken,\n              startedAt: startedAt,\n              items: items\n            }];\n        }\n      });\n    });\n  }; // Partial data private feature flag. Not a public API. This will be removed in a future release.\n\n\n  SyncProcessor.prototype.partialDataFeatureFlagEnabled = function () {\n    try {\n      var flag = sessionStorage.getItem('datastorePartialData');\n      return Boolean(flag);\n    } catch (e) {\n      return false;\n    }\n  };\n\n  SyncProcessor.prototype.jitteredRetry = function (_a) {\n    var query = _a.query,\n        variables = _a.variables,\n        opName = _a.opName,\n        modelDefinition = _a.modelDefinition,\n        authMode = _a.authMode;\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(function (query, variables) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var error_2, clientOrForbiddenErrorMessage, hasItems, result, unauthorized, result;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , API.graphql({\n                        query: query,\n                        variables: variables,\n                        authMode: authMode\n                      })];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _a.sent()];\n\n                    case 2:\n                      error_2 = _a.sent();\n                      clientOrForbiddenErrorMessage = getClientSideAuthError(error_2) || getForbiddenError(error_2);\n\n                      if (clientOrForbiddenErrorMessage) {\n                        throw new NonRetryableError(clientOrForbiddenErrorMessage);\n                      }\n\n                      hasItems = Boolean(error_2 && error_2.data && error_2.data[opName] && error_2.data[opName].items);\n\n                      if (this.partialDataFeatureFlagEnabled()) {\n                        if (hasItems) {\n                          result = error_2;\n                          result.data[opName].items = result.data[opName].items.filter(function (item) {\n                            return item !== null;\n                          });\n\n                          if (error_2.errors) {\n                            Hub.dispatch('datastore', {\n                              event: 'syncQueriesPartialSyncError',\n                              data: {\n                                errors: error_2.errors,\n                                modelName: modelDefinition.name\n                              }\n                            });\n                          }\n\n                          return [2\n                          /*return*/\n                          , result];\n                        } else {\n                          throw error_2;\n                        }\n                      }\n\n                      unauthorized = error_2 && error_2.errors && error_2.errors.some(function (err) {\n                        return err.errorType === 'Unauthorized';\n                      });\n\n                      if (unauthorized) {\n                        result = error_2;\n\n                        if (hasItems) {\n                          result.data[opName].items = result.data[opName].items.filter(function (item) {\n                            return item !== null;\n                          });\n                        } else {\n                          result.data[opName] = __assign(__assign({}, opResultDefaults), result.data[opName]);\n                        }\n\n                        logger.warn('queryError', \"User is unauthorized to query \" + opName + \", some items could not be returned.\");\n                        return [2\n                        /*return*/\n                        , result];\n                      } else {\n                        throw error_2;\n                      }\n\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [query, variables])];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  SyncProcessor.prototype.start = function (typesLastSync) {\n    var _this = this;\n\n    var processing = true;\n    var maxRecordsToSync = this.maxRecordsToSync !== undefined ? this.maxRecordsToSync : DEFAULT_MAX_RECORDS_TO_SYNC;\n    var syncPageSize = this.syncPageSize !== undefined ? this.syncPageSize : DEFAULT_PAGINATION_LIMIT;\n    var parentPromises = new Map();\n    var observable = new Observable(function (observer) {\n      var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n        var e_1, _a;\n\n        try {\n          for (var _b = __values(Array.from(namespace.modelTopologicalOrdering.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var modelName = _c.value;\n            var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n            map.set(namespace.models[modelName], typeLastSync);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n\n        return map;\n      }, new Map());\n      var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function (_a) {\n        var _b = __read(_a, 1),\n            syncable = _b[0].syncable;\n\n        return syncable;\n      }).map(function (_a) {\n        var _b = __read(_a, 2),\n            modelDefinition = _b[0],\n            _c = __read(_b[1], 2),\n            namespace = _c[0],\n            lastSync = _c[1];\n\n        return __awaiter(_this, void 0, void 0, function () {\n          var done, nextToken, startedAt, items, recordsReceived, filter, parents, promises, promise;\n\n          var _this = this;\n\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                done = false;\n                nextToken = null;\n                startedAt = null;\n                items = null;\n                recordsReceived = 0;\n                filter = this.graphqlFilterFromPredicate(modelDefinition);\n                parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                promises = parents.map(function (parent) {\n                  return parentPromises.get(namespace + \"_\" + parent);\n                });\n                promise = new Promise(function (res) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var limit;\n\n                    var _a;\n\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , Promise.all(promises)];\n\n                        case 1:\n                          _b.sent();\n\n                          _b.label = 2;\n\n                        case 2:\n                          if (!processing) {\n                            return [2\n                            /*return*/\n                            ];\n                          }\n\n                          limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                          return [4\n                          /*yield*/\n                          , this.retrievePage(modelDefinition, lastSync, nextToken, limit, filter)];\n\n                        case 3:\n                          _a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt;\n                          recordsReceived += items.length;\n                          done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                          observer.next({\n                            namespace: namespace,\n                            modelDefinition: modelDefinition,\n                            items: items,\n                            done: done,\n                            startedAt: startedAt,\n                            isFullSync: !lastSync\n                          });\n                          _b.label = 4;\n\n                        case 4:\n                          if (!done) return [3\n                          /*break*/\n                          , 2];\n                          _b.label = 5;\n\n                        case 5:\n                          res();\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                });\n                parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                return [4\n                /*yield*/\n                , promise];\n\n              case 1:\n                _d.sent();\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n      Promise.all(allModelsReady).then(function () {\n        observer.complete();\n      });\n      return function () {\n        processing = false;\n      };\n    });\n    return observable;\n  };\n\n  return SyncProcessor;\n}();\n\nexport { SyncProcessor };","map":null,"metadata":{},"sourceType":"module"}