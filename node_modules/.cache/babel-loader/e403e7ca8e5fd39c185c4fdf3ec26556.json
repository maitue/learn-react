{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetBucketAccelerateConfigurationOutput, GetBucketAccelerateConfigurationRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlGetBucketAccelerateConfigurationCommand, serializeAws_restXmlGetBucketAccelerateConfigurationCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This implementation of the GET operation uses the <code>accelerate</code> subresource to\n *          return the Transfer Acceleration state of a bucket, which is either <code>Enabled</code> or\n *             <code>Suspended</code>. Amazon S3 Transfer Acceleration is a bucket-level feature that\n *          enables you to perform faster data transfers to and from Amazon S3.</p>\n *          <p>To use this operation, you must have permission to perform the\n *             <code>s3:GetAccelerateConfiguration</code> action. The bucket owner has this permission\n *          by default. The bucket owner can grant this permission to others. For more information\n *          about permissions, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources\">Permissions Related to Bucket Subresource Operations</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html\">Managing Access Permissions to your Amazon S3\n *             Resources</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n *          <p>You set the Transfer Acceleration state of an existing bucket to <code>Enabled</code> or\n *             <code>Suspended</code> by using the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAccelerateConfiguration.html\">PutBucketAccelerateConfiguration</a> operation. </p>\n *          <p>A GET <code>accelerate</code> request does not return a state value for a bucket that\n *          has no transfer acceleration state. A bucket has no Transfer Acceleration state if a state\n *          has never been set on the bucket. </p>\n *\n *          <p>For more information about transfer acceleration, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\">Transfer Acceleration</a> in the\n *          Amazon Simple Storage Service Developer Guide.</p>\n *          <p class=\"title\">\n *             <b>Related Resources</b>\n *          </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketAccelerateConfiguration.html\">PutBucketAccelerateConfiguration</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar GetBucketAccelerateConfigurationCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetBucketAccelerateConfigurationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetBucketAccelerateConfigurationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetBucketAccelerateConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"GetBucketAccelerateConfigurationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetBucketAccelerateConfigurationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetBucketAccelerateConfigurationOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetBucketAccelerateConfigurationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlGetBucketAccelerateConfigurationCommand(input, context);\n  };\n\n  GetBucketAccelerateConfigurationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlGetBucketAccelerateConfigurationCommand(output, context);\n  };\n\n  return GetBucketAccelerateConfigurationCommand;\n}($Command);\n\nexport { GetBucketAccelerateConfigurationCommand };","map":null,"metadata":{},"sourceType":"module"}