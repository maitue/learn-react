{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this; // Check if state is fulfilled to resolve onFullfilment promise\n\n\n    logger.debug('postContent state', data.dialogState);\n\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n    }\n\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, params, postTextCommand, data, err_1, content, messageType, postContentCommand, data, audioArray, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 6];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            postTextCommand = new PostTextCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postTextCommand)];\n\n          case 3:\n            data = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , data];\n\n          case 4:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            return [3\n            /*break*/\n            , 11];\n\n          case 6:\n            content = message.content, messageType = message.options.messageType;\n\n            if (messageType === 'voice') {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'audio/x-l16; sample-rate=16000',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            } else {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'text/plain; charset=utf-8',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            }\n\n            logger.debug('postContent to lex', message);\n            _a.label = 7;\n\n          case 7:\n            _a.trys.push([7, 10,, 11]);\n\n            postContentCommand = new PostContentCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postContentCommand)];\n\n          case 8:\n            data = _a.sent();\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 9:\n            audioArray = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , __assign(__assign({}, data), {\n              audioStream: audioArray\n            })];\n\n          case 10:\n            err_2 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":null,"metadata":{},"sourceType":"module"}