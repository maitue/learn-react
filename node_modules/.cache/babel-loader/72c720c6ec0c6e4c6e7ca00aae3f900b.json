{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartTextTranslationJobRequest, StartTextTranslationJobResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartTextTranslationJobCommand, serializeAws_json1_1StartTextTranslationJobCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts an asynchronous batch translation job. Batch translation jobs can be used to\n *       translate large volumes of text across multiple documents at once. For more information, see\n *         <a>async</a>.</p>\n *\n *          <p>Batch translation jobs can be described with the <a>DescribeTextTranslationJob</a> operation, listed with the <a>ListTextTranslationJobs</a> operation, and stopped with the <a>StopTextTranslationJob</a> operation.</p>\n *          <note>\n *             <p>Amazon Translate does not support batch translation of multiple source languages at once.</p>\n *          </note>\n */\n\nvar StartTextTranslationJobCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartTextTranslationJobCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartTextTranslationJobCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartTextTranslationJobCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TranslateClient\";\n    var commandName = \"StartTextTranslationJobCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartTextTranslationJobRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartTextTranslationJobResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartTextTranslationJobCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartTextTranslationJobCommand(input, context);\n  };\n\n  StartTextTranslationJobCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartTextTranslationJobCommand(output, context);\n  };\n\n  return StartTextTranslationJobCommand;\n}($Command);\n\nexport { StartTextTranslationJobCommand };","map":null,"metadata":{},"sourceType":"module"}