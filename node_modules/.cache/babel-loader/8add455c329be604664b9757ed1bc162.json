{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport CloseOutlined from \"@ant-design/icons/es/icons/CloseOutlined\";\nimport classNames from 'classnames';\nimport RcDrawer from 'rc-drawer';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport { NoFormStyle } from '../form/context';\nimport { getTransitionName } from '../_util/motion';\nimport { tuple } from '../_util/type';\nimport warning from '../_util/warning';\nvar SizeTypes = tuple('default', 'large');\nvar defaultPushState = {\n  distance: 180\n};\n\nfunction Drawer(props) {\n  var width = props.width,\n      height = props.height,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'default' : _props$size,\n      _props$closable = props.closable,\n      closable = _props$closable === void 0 ? true : _props$closable,\n      _props$mask = props.mask,\n      mask = _props$mask === void 0 ? true : _props$mask,\n      _props$push = props.push,\n      push = _props$push === void 0 ? defaultPushState : _props$push,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? /*#__PURE__*/React.createElement(CloseOutlined, null) : _props$closeIcon,\n      bodyStyle = props.bodyStyle,\n      drawerStyle = props.drawerStyle,\n      className = props.className,\n      visible = props.visible,\n      open = props.open,\n      children = props.children,\n      style = props.style,\n      title = props.title,\n      headerStyle = props.headerStyle,\n      onClose = props.onClose,\n      footer = props.footer,\n      footerStyle = props.footerStyle,\n      customizePrefixCls = props.prefixCls,\n      customizeGetContainer = props.getContainer,\n      extra = props.extra,\n      afterVisibleChange = props.afterVisibleChange,\n      _afterOpenChange = props.afterOpenChange,\n      rest = __rest(props, [\"width\", \"height\", \"size\", \"closable\", \"mask\", \"push\", \"closeIcon\", \"bodyStyle\", \"drawerStyle\", \"className\", \"visible\", \"open\", \"children\", \"style\", \"title\", \"headerStyle\", \"onClose\", \"footer\", \"footerStyle\", \"prefixCls\", \"getContainer\", \"extra\", \"afterVisibleChange\", \"afterOpenChange\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPopupContainer = _React$useContext.getPopupContainer,\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('drawer', customizePrefixCls);\n  var getContainer = // 有可能为 false，所以不能直接判断\n  customizeGetContainer === undefined && getPopupContainer ? function () {\n    return getPopupContainer(document.body);\n  } : customizeGetContainer;\n  var closeIconNode = closable && /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: onClose,\n    \"aria-label\": \"Close\",\n    className: \"\".concat(prefixCls, \"-close\")\n  }, closeIcon);\n  [['visible', 'open'], ['afterVisibleChange', 'afterOpenChange']].forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        deprecatedName = _ref2[0],\n        newName = _ref2[1];\n\n    process.env.NODE_ENV !== \"production\" ? warning(!(deprecatedName in props), 'Drawer', \"`\".concat(deprecatedName, \"` is deprecated which will be removed in next major version, please use `\").concat(newName, \"` instead.\")) : void 0;\n  });\n\n  function renderHeader() {\n    if (!title && !closable) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(\"\".concat(prefixCls, \"-header\"), _defineProperty({}, \"\".concat(prefixCls, \"-header-close-only\"), closable && !title && !extra)),\n      style: headerStyle\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-header-title\")\n    }, closeIconNode, title && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-title\")\n    }, title)), extra && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-extra\")\n    }, extra));\n  }\n\n  function renderFooter() {\n    if (!footer) {\n      return null;\n    }\n\n    var footerClassName = \"\".concat(prefixCls, \"-footer\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: footerClassName,\n      style: footerStyle\n    }, footer);\n  }\n\n  var drawerClassName = classNames(_defineProperty({\n    'no-mask': !mask\n  }, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), className); // ============================ Size ============================\n\n  var mergedWidth = React.useMemo(function () {\n    return width !== null && width !== void 0 ? width : size === 'large' ? 736 : 378;\n  }, [width, size]);\n  var mergedHeight = React.useMemo(function () {\n    return height !== null && height !== void 0 ? height : size === 'large' ? 736 : 378;\n  }, [height, size]); // =========================== Motion ===========================\n\n  var maskMotion = {\n    motionName: getTransitionName(prefixCls, 'mask-motion'),\n    motionAppear: true,\n    motionEnter: true,\n    motionLeave: true,\n    motionDeadline: 500\n  };\n\n  var panelMotion = function panelMotion(motionPlacement) {\n    return {\n      motionName: getTransitionName(prefixCls, \"panel-motion-\".concat(motionPlacement)),\n      motionAppear: true,\n      motionEnter: true,\n      motionLeave: true,\n      motionDeadline: 500\n    };\n  }; // =========================== Render ===========================\n\n\n  return /*#__PURE__*/React.createElement(NoFormStyle, {\n    status: true,\n    override: true\n  }, /*#__PURE__*/React.createElement(RcDrawer, _extends({\n    prefixCls: prefixCls,\n    onClose: onClose\n  }, rest, {\n    open: open || visible,\n    mask: mask,\n    push: push,\n    width: mergedWidth,\n    height: mergedHeight,\n    rootClassName: drawerClassName,\n    getContainer: getContainer,\n    afterOpenChange: function afterOpenChange(isOpen) {\n      _afterOpenChange === null || _afterOpenChange === void 0 ? void 0 : _afterOpenChange(isOpen);\n      afterVisibleChange === null || afterVisibleChange === void 0 ? void 0 : afterVisibleChange(isOpen);\n    },\n    maskMotion: maskMotion,\n    motion: panelMotion,\n    rootStyle: style\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-wrapper-body\"),\n    style: _extends({}, drawerStyle)\n  }, renderHeader(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-body\"),\n    style: bodyStyle\n  }, children), renderFooter())));\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  Drawer.displayName = 'Drawer';\n}\n\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module"}