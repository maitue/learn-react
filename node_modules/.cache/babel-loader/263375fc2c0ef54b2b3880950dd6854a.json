{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetSegmentDetectionRequest, GetSegmentDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetSegmentDetectionCommand, serializeAws_json1_1GetSegmentDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the segment detection results of a Amazon Rekognition Video analysis started by <a>StartSegmentDetection</a>.</p>\n *          <p>Segment detection with Amazon Rekognition Video is an asynchronous operation. You start segment detection by\n *       calling <a>StartSegmentDetection</a> which returns a job identifier (<code>JobId</code>).\n *       When the segment detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartSegmentDetection</code>. To get the results\n *       of the segment detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *       if so, call <code>GetSegmentDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *       of <code>StartSegmentDetection</code>.</p>\n *          <p>\n *             <code>GetSegmentDetection</code> returns detected segments in an array (<code>Segments</code>)\n *       of <a>SegmentDetection</a> objects. <code>Segments</code> is sorted by the segment types\n *       specified in the <code>SegmentTypes</code> input parameter of <code>StartSegmentDetection</code>.\n *     Each element of the array includes the detected segment, the precentage confidence in the acuracy\n *       of the detected segment, the type of the segment, and the frame in which the segment was detected.</p>\n *          <p>Use <code>SelectedSegmentTypes</code> to find out the type of segment detection requested in the\n *     call to <code>StartSegmentDetection</code>.</p>\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of segment detections returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *       a pagination token for getting the next set of results. To get the next page of results, call <code>GetSegmentDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *       call to <code>GetSegmentDetection</code>.</p>\n *\n *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n */\n\nvar GetSegmentDetectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetSegmentDetectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetSegmentDetectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetSegmentDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetSegmentDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetSegmentDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetSegmentDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetSegmentDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetSegmentDetectionCommand(input, context);\n  };\n\n  GetSegmentDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetSegmentDetectionCommand(output, context);\n  };\n\n  return GetSegmentDetectionCommand;\n}($Command);\n\nexport { GetSegmentDetectionCommand };","map":null,"metadata":{},"sourceType":"module"}