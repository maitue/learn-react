{"ast":null,"code":"'use strict';\n\nvar util = require('./util');\n\nvar buildOptions = require('./util').buildOptions;\n\nvar xmlNode = require('./xmlNode');\n\nvar regx = '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'.replace(/NAME/g, util.nameRegexp); //const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n//polyfill\n\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\n\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nvar defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false,\n  //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true,\n  //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  tagValueProcessor: function tagValueProcessor(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function attrValueProcessor(a, attrName) {\n    return a;\n  },\n  stopNodes: [] //decodeStrict: false,\n\n};\nexports.defaultOptions = defaultOptions;\nvar props = ['attributeNamePrefix', 'attrNodeName', 'textNodeName', 'ignoreAttributes', 'ignoreNameSpace', 'allowBooleanAttributes', 'parseNodeValue', 'parseAttributeValue', 'arrayMode', 'trimValues', 'cdataTagName', 'cdataPositionChar', 'tagValueProcessor', 'attrValueProcessor', 'parseTrueNumberOnly', 'stopNodes'];\nexports.props = props;\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\n\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    var tags = tagname.split(':');\n    var prefix = tagname.charAt(0) === '/' ? '/' : '';\n\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, parseTrueNumberOnly) {\n  if (shouldParse && typeof val === 'string') {\n    var parsed;\n\n    if (val.trim() === '' || isNaN(val)) {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = Number.parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = Number.parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = Number.parseInt(val, 10);\n      }\n\n      if (parseTrueNumberOnly) {\n        parsed = String(parsed) === val ? parsed : val;\n      }\n    }\n\n    return parsed;\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n} //TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\n\n\nvar attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' '); //attrStr = attrStr || attrStr.trim();\n\n    var matches = util.getAllMatches(attrStr, attrsRegx);\n    var len = matches.length; //don't make it inline\n\n    var attrs = {};\n\n    for (var i = 0; i < len; i++) {\n      var attrName = resolveNameSpace(matches[i][1], options);\n\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.parseTrueNumberOnly);\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n\n    if (options.attrNodeName) {\n      var attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n\n    return attrs;\n  }\n}\n\nvar getTraversalObj = function getTraversalObj(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  var xmlObj = new xmlNode('!xml');\n  var currentNode = xmlObj;\n  var textData = \"\"; //function match(xmlData){\n\n  for (var i = 0; i < xmlData.length; i++) {\n    var ch = xmlData[i];\n\n    if (ch === '<') {\n      if (xmlData[i + 1] === '/') {\n        //Closing Tag\n        var closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\");\n        var tagName = xmlData.substring(i + 2, closeIndex).trim();\n\n        if (options.ignoreNameSpace) {\n          var colonIndex = tagName.indexOf(\":\");\n\n          if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n          }\n        }\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n\n\n        if (currentNode) {\n          if (currentNode.val) {\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData, options);\n          } else {\n            currentNode.val = processTagValue(tagName, textData, options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = [];\n\n          if (currentNode.attrsMap == undefined) {\n            currentNode.attrsMap = {};\n          }\n\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);\n        }\n\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\");\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\");\n      } else if (xmlData.substr(i + 1, 2) === '!D') {\n        var _closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\");\n\n        var tagExp = xmlData.substring(i, _closeIndex);\n\n        if (tagExp.indexOf(\"[\") >= 0) {\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        } else {\n          i = _closeIndex;\n        }\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        var _closeIndex2 = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n\n        var _tagExp = xmlData.substring(i + 9, _closeIndex2); //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n\n\n        if (textData) {\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData, options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          var childNode = new xmlNode(options.cdataTagName, currentNode, _tagExp);\n          currentNode.addChild(childNode); //for backtracking\n\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar; //add rest value to parent node\n\n          if (_tagExp) {\n            childNode.val = _tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (_tagExp || '');\n        }\n\n        i = _closeIndex2 + 2;\n      } else {\n        //Opening tag\n        var result = closingIndexForOpeningTag(xmlData, i + 1);\n        var _tagExp2 = result.data;\n        var _closeIndex3 = result.index;\n\n        var separatorIndex = _tagExp2.indexOf(\" \");\n\n        var _tagName = _tagExp2;\n        var shouldBuildAttributesMap = true;\n\n        if (separatorIndex !== -1) {\n          _tagName = _tagExp2.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          _tagExp2 = _tagExp2.substr(separatorIndex + 1);\n        }\n\n        if (options.ignoreNameSpace) {\n          var _colonIndex = _tagName.indexOf(\":\");\n\n          if (_colonIndex !== -1) {\n            _tagName = _tagName.substr(_colonIndex + 1);\n            shouldBuildAttributesMap = _tagName !== result.data.substr(_colonIndex + 1);\n          }\n        } //save text to parent node\n\n\n        if (currentNode && textData) {\n          if (currentNode.tagname !== '!xml') {\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData, options);\n          }\n        }\n\n        if (_tagExp2.length > 0 && _tagExp2.lastIndexOf(\"/\") === _tagExp2.length - 1) {\n          //selfClosing tag\n          if (_tagName[_tagName.length - 1] === \"/\") {\n            //remove trailing '/'\n            _tagName = _tagName.substr(0, _tagName.length - 1);\n            _tagExp2 = _tagName;\n          } else {\n            _tagExp2 = _tagExp2.substr(0, _tagExp2.length - 1);\n          }\n\n          var _childNode = new xmlNode(_tagName, currentNode, '');\n\n          if (_tagName !== _tagExp2) {\n            _childNode.attrsMap = buildAttributesMap(_tagExp2, options);\n          }\n\n          currentNode.addChild(_childNode);\n        } else {\n          //opening tag\n          var _childNode2 = new xmlNode(_tagName, currentNode);\n\n          if (options.stopNodes.length && options.stopNodes.includes(_childNode2.tagname)) {\n            _childNode2.startIndex = _closeIndex3;\n          }\n\n          if (_tagName !== _tagExp2 && shouldBuildAttributesMap) {\n            _childNode2.attrsMap = buildAttributesMap(_tagExp2, options);\n          }\n\n          currentNode.addChild(_childNode2);\n          currentNode = _childNode2;\n        }\n\n        textData = \"\";\n        i = _closeIndex3;\n      }\n    } else {\n      textData += xmlData[i];\n    }\n  }\n\n  return xmlObj;\n};\n\nfunction closingIndexForOpeningTag(data, i) {\n  var attrBoundary;\n  var tagExp = \"\";\n\n  for (var index = i; index < data.length; index++) {\n    var ch = data[index];\n\n    if (attrBoundary) {\n      if (ch === attrBoundary) attrBoundary = \"\"; //reset\n    } else if (ch === '\"' || ch === \"'\") {\n      attrBoundary = ch;\n    } else if (ch === '>') {\n      return {\n        data: tagExp,\n        index: index\n      };\n    } else if (ch === '\\t') {\n      ch = \" \";\n    }\n\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg) {\n  var closingIndex = xmlData.indexOf(str, i);\n\n  if (closingIndex === -1) {\n    throw new Error(errMsg);\n  } else {\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;","map":null,"metadata":{},"sourceType":"script"}