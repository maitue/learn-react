{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectProtectiveEquipmentRequest, DetectProtectiveEquipmentResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectProtectiveEquipmentCommand, serializeAws_json1_1DetectProtectiveEquipmentCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects Personal Protective Equipment (PPE) worn by people detected in an image. Amazon Rekognition can detect the\n *          following types of PPE.</p>\n *          <ul>\n *             <li>\n *                <p>Face cover</p>\n *             </li>\n *             <li>\n *                <p>Hand cover</p>\n *             </li>\n *             <li>\n *                <p>Head cover</p>\n *             </li>\n *          </ul>\n *\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket.\n *          The image must be either a PNG or JPG formatted file. </p>\n *\n *          <p>\n *             <code>DetectProtectiveEquipment</code> detects PPE worn by up to 15 persons detected in an image.</p>\n *          <p>For each person detected in the image the API returns an array of body parts (face, head, left-hand, right-hand).\n *          For each body part, an array of detected items of PPE is returned, including an indicator of whether or not the PPE\n *          covers the body part. The API returns the confidence it has in each detection\n *          (person, PPE, body part and body part coverage). It also returns a bounding box (<a>BoundingBox</a>) for each detected\n *          person and each detected item of PPE. </p>\n *          <p>You can optionally request a summary of detected PPE items with the <code>SummarizationAttributes</code> input parameter.\n *          The summary provides the following information. </p>\n *          <ul>\n *             <li>\n *                <p>The persons detected as wearing all of the types of PPE that you specify.</p>\n *             </li>\n *             <li>\n *                <p>The persons detected as not wearing all of the types PPE that you specify.</p>\n *             </li>\n *             <li>\n *                <p>The persons detected where PPE adornment could not be determined. </p>\n *             </li>\n *          </ul>\n *          <p>This is a stateless API operation. That is, the operation does not persist any data.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:DetectProtectiveEquipment</code> action. </p>\n */\n\nvar DetectProtectiveEquipmentCommand =\n/** @class */\nfunction (_super) {\n  __extends(DetectProtectiveEquipmentCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DetectProtectiveEquipmentCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DetectProtectiveEquipmentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectProtectiveEquipmentCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectProtectiveEquipmentRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectProtectiveEquipmentResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DetectProtectiveEquipmentCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectProtectiveEquipmentCommand(input, context);\n  };\n\n  DetectProtectiveEquipmentCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectProtectiveEquipmentCommand(output, context);\n  };\n\n  return DetectProtectiveEquipmentCommand;\n}($Command);\n\nexport { DetectProtectiveEquipmentCommand };","map":null,"metadata":{},"sourceType":"module"}