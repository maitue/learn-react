{"ast":null,"code":"'use strict';\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar $fill = require('../internals/array-fill');\n\nvar toBigInt = require('../internals/to-big-int');\n\nvar classof = require('../internals/classof');\n\nvar call = require('../internals/function-call');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar fails = require('../internals/fails');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar slice = uncurryThis(''.slice); // V8 ~ Chrome < 59, Safari < 14.1, FF < 55, Edge <=18\n\nvar CONVERSION_BUG = fails(function () {\n  var count = 0; // eslint-disable-next-line es-x/no-typed-arrays -- safe\n\n  new Int8Array(2).fill({\n    valueOf: function valueOf() {\n      return count++;\n    }\n  });\n  return count !== 1;\n}); // `%TypedArray%.prototype.fill` method\n// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill\n\nexportTypedArrayMethod('fill', function fill(value\n/* , start, end */\n) {\n  var length = arguments.length;\n  aTypedArray(this);\n  var actualValue = slice(classof(this), 0, 3) === 'Big' ? toBigInt(value) : +value;\n  return call($fill, this, actualValue, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);\n}, CONVERSION_BUG);","map":null,"metadata":{},"sourceType":"script"}