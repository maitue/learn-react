{"ast":null,"code":"var $ = require('../internals/export');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar apply = require('../internals/function-apply');\n\nvar call = require('../internals/function-call');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar fails = require('../internals/fails');\n\nvar isArray = require('../internals/is-array');\n\nvar isCallable = require('../internals/is-callable');\n\nvar isObject = require('../internals/is-object');\n\nvar isSymbol = require('../internals/is-symbol');\n\nvar arraySlice = require('../internals/array-slice');\n\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\n\nvar $stringify = getBuiltIn('JSON', 'stringify');\nvar exec = uncurryThis(/./.exec);\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar replace = uncurryThis(''.replace);\nvar numberToString = uncurryThis(1.0.toString);\nvar tester = /[\\uD800-\\uDFFF]/g;\nvar low = /^[\\uD800-\\uDBFF]$/;\nvar hi = /^[\\uDC00-\\uDFFF]$/;\nvar WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function () {\n  var symbol = getBuiltIn('Symbol')(); // MS Edge converts symbol values to JSON as {}\n\n  return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null\n  || $stringify({\n    a: symbol\n  }) != '{}' // V8 throws on boxed symbols\n  || $stringify(Object(symbol)) != '{}';\n}); // https://github.com/tc39/proposal-well-formed-stringify\n\nvar ILL_FORMED_UNICODE = fails(function () {\n  return $stringify(\"\\uDF06\\uD834\") !== \"\\\"\\\\udf06\\\\ud834\\\"\" || $stringify(\"\\uDEAD\") !== \"\\\"\\\\udead\\\"\";\n});\n\nvar stringifyWithSymbolsFix = function stringifyWithSymbolsFix(it, replacer) {\n  var args = arraySlice(arguments);\n  var $replacer = replacer;\n  if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n\n  if (!isArray(replacer)) replacer = function replacer(key, value) {\n    if (isCallable($replacer)) value = call($replacer, this, key, value);\n    if (!isSymbol(value)) return value;\n  };\n  args[1] = replacer;\n  return apply($stringify, null, args);\n};\n\nvar fixIllFormed = function fixIllFormed(match, offset, string) {\n  var prev = charAt(string, offset - 1);\n  var next = charAt(string, offset + 1);\n\n  if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {\n    return \"\\\\u\" + numberToString(charCodeAt(match, 0), 16);\n  }\n\n  return match;\n};\n\nif ($stringify) {\n  // `JSON.stringify` method\n  // https://tc39.es/ecma262/#sec-json.stringify\n  $({\n    target: 'JSON',\n    stat: true,\n    arity: 3,\n    forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE\n  }, {\n    // eslint-disable-next-line no-unused-vars -- required for `.length`\n    stringify: function stringify(it, replacer, space) {\n      var args = arraySlice(arguments);\n      var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);\n      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}