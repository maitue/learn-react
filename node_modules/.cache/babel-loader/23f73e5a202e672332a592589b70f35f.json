{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { browserOrNode, isWebWorker } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\n\nvar ReachabilityNavigator =\n/** @class */\nfunction () {\n  function ReachabilityNavigator() {}\n\n  ReachabilityNavigator.prototype.networkMonitor = function (netInfo) {\n    if (browserOrNode().isNode) {\n      return Observable.from([{\n        online: true\n      }]);\n    }\n\n    var globalObj = isWebWorker() ? self : window;\n    return new Observable(function (observer) {\n      observer.next({\n        online: globalObj.navigator.onLine\n      });\n\n      var notifyOnline = function notifyOnline() {\n        return observer.next({\n          online: true\n        });\n      };\n\n      var notifyOffline = function notifyOffline() {\n        return observer.next({\n          online: false\n        });\n      };\n\n      globalObj.addEventListener('online', notifyOnline);\n      globalObj.addEventListener('offline', notifyOffline);\n\n      ReachabilityNavigator._observers.push(observer);\n\n      return function () {\n        globalObj.removeEventListener('online', notifyOnline);\n        globalObj.removeEventListener('offline', notifyOffline);\n        ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function (_observer) {\n          return _observer !== observer;\n        });\n      };\n    });\n  }; // expose observers to simulate offline mode for integration testing\n\n\n  ReachabilityNavigator._observerOverride = function (status) {\n    var e_1, _a;\n\n    var _loop_1 = function _loop_1(observer) {\n      if (observer.closed) {\n        ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function (_observer) {\n          return _observer !== observer;\n        });\n        return \"continue\";\n      }\n\n      observer.next(status);\n    };\n\n    try {\n      for (var _b = __values(ReachabilityNavigator._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var observer = _c.value;\n\n        _loop_1(observer);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  ReachabilityNavigator._observers = [];\n  return ReachabilityNavigator;\n}();\n\nexport default ReachabilityNavigator;","map":null,"metadata":{},"sourceType":"module"}