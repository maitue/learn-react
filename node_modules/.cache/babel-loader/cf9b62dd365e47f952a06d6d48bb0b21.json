{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DescribeVoicesInput, DescribeVoicesOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1DescribeVoicesCommand, serializeAws_restJson1DescribeVoicesCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns the list of voices that are available for use when requesting speech synthesis.\n *       Each voice speaks a specified language, is either male or female, and is identified by an ID,\n *       which is the ASCII version of the voice name. </p>\n *\n *          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID\n *       for the voice you want from the list of voices returned by\n *       <code>DescribeVoices</code>.</p>\n *\n *          <p>For example, you want your news reader application to read news in a specific language,\n *       but giving a user the option to choose the voice. Using the <code>DescribeVoices</code>\n *       operation you can provide the user with a list of available voices to select from.</p>\n *\n *          <p> You can optionally specify a language code to filter the available voices. For\n *       example, if you specify <code>en-US</code>, the operation returns a list of all available US\n *       English voices. </p>\n *          <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code>\n *       action.</p>\n */\n\nvar DescribeVoicesCommand =\n/** @class */\nfunction (_super) {\n  __extends(DescribeVoicesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DescribeVoicesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DescribeVoicesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"DescribeVoicesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DescribeVoicesInput.filterSensitiveLog,\n      outputFilterSensitiveLog: DescribeVoicesOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DescribeVoicesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1DescribeVoicesCommand(input, context);\n  };\n\n  DescribeVoicesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1DescribeVoicesCommand(output, context);\n  };\n\n  return DescribeVoicesCommand;\n}($Command);\n\nexport { DescribeVoicesCommand };","map":null,"metadata":{},"sourceType":"module"}