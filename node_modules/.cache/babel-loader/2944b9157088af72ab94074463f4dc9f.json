{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutRecordBatchInput, PutRecordBatchOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordBatchCommand, serializeAws_json1_1PutRecordBatchCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Writes multiple data records into a delivery stream in a single call, which can\n *          achieve higher throughput per producer than when writing single records. To write single\n *          data records into a delivery stream, use <a>PutRecord</a>. Applications using\n *          these operations are referred to as producers.</p>\n *          <p>For information about service quota, see <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/limits.html\">Amazon Kinesis Data Firehose\n *          Quota</a>.</p>\n *          <p>Each <a>PutRecordBatch</a> request supports up to 500 records. Each record\n *          in the request can be as large as 1,000 KB (before 64-bit encoding), up to a limit of 4 MB\n *          for the entire request. These limits cannot be changed.</p>\n *          <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000\n *          KB in size, and any kind of data. For example, it could be a segment from a log file,\n *          geographic location data, website clickstream data, and so on.</p>\n *          <p>Kinesis Data Firehose buffers records before delivering them to the destination. To\n *          disambiguate the data blobs at the destination, a common solution is to use delimiters in\n *          the data, such as a newline (<code>\\n</code>) or some other character unique within the\n *          data. This allows the consumer application to parse individual data items when reading the\n *          data from the destination.</p>\n *          <p>The <a>PutRecordBatch</a> response includes a count of failed records,\n *             <code>FailedPutCount</code>, and an array of responses, <code>RequestResponses</code>.\n *          Even if the <a>PutRecordBatch</a> call succeeds, the value of\n *             <code>FailedPutCount</code> may be greater than 0, indicating that there are records for\n *          which the operation didn't succeed. Each entry in the <code>RequestResponses</code> array\n *          provides additional information about the processed record. It directly correlates with a\n *          record in the request array using the same ordering, from the top to the bottom. The\n *          response array always includes the same number of records as the request array.\n *             <code>RequestResponses</code> includes both successfully and unsuccessfully processed\n *          records. Kinesis Data Firehose tries to process all records in each <a>PutRecordBatch</a> request. A single record failure does not stop the processing\n *          of subsequent records. </p>\n *          <p>A successfully processed record includes a <code>RecordId</code> value, which is\n *          unique for the record. An unsuccessfully processed record includes <code>ErrorCode</code>\n *          and <code>ErrorMessage</code> values. <code>ErrorCode</code> reflects the type of error,\n *          and is one of the following values: <code>ServiceUnavailableException</code> or\n *             <code>InternalFailure</code>. <code>ErrorMessage</code> provides more detailed\n *          information about the error.</p>\n *          <p>If there is an internal server error or a timeout, the write might have completed or\n *          it might have failed. If <code>FailedPutCount</code> is greater than 0, retry the request,\n *          resending only those records that might have failed processing. This minimizes the possible\n *          duplicate records and also reduces the total bytes sent (and corresponding charges). We\n *          recommend that you handle any duplicates at the destination.</p>\n *          <p>If <a>PutRecordBatch</a> throws <code>ServiceUnavailableException</code>,\n *          back off and retry. If the exception persists, it is possible that the throughput limits\n *          have been exceeded for the delivery stream.</p>\n *\n *          <p>Data records sent to Kinesis Data Firehose are stored for 24 hours from the time they\n *          are added to a delivery stream as it attempts to send the records to the destination. If\n *          the destination is unreachable for more than 24 hours, the data is no longer\n *          available.</p>\n *          <important>\n *             <p>Don't concatenate two or more base64 strings to form the data fields of your records.\n *             Instead, concatenate the raw data, then perform base64 encoding.</p>\n *          </important>\n */\n\nvar PutRecordBatchCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutRecordBatchCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutRecordBatchCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutRecordBatchCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"PutRecordBatchCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutRecordBatchInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordBatchOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutRecordBatchCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutRecordBatchCommand(input, context);\n  };\n\n  PutRecordBatchCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutRecordBatchCommand(output, context);\n  };\n\n  return PutRecordBatchCommand;\n}($Command);\n\nexport { PutRecordBatchCommand };","map":null,"metadata":{},"sourceType":"module"}