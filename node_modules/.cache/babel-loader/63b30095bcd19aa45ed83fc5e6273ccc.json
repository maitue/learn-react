{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StopStreamEncryptionInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopStreamEncryptionCommand, serializeAws_json1_1StopStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Disables server-side encryption for a specified stream. </p>\n *         <p>Stopping encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Stopping encryption normally takes a\n *             few seconds to complete, but it can take minutes. You can continue to read and write\n *             data to your stream while its status is <code>UPDATING</code>. Once the status of the\n *             stream is <code>ACTIVE</code>, records written to the stream are no longer encrypted by\n *             Kinesis Data Streams. </p>\n *         <p>API Limits: You can successfully disable server-side encryption 25 times in a\n *             rolling 24-hour period. </p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are no longer subject to encryption.\n *             After you disabled encryption, you can verify that encryption is not applied by\n *             inspecting the API response from <code>PutRecord</code> or\n *             <code>PutRecords</code>.</p>\n */\n\nvar StopStreamEncryptionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StopStreamEncryptionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StopStreamEncryptionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StopStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"StopStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StopStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StopStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StopStreamEncryptionCommand(input, context);\n  };\n\n  StopStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StopStreamEncryptionCommand(output, context);\n  };\n\n  return StopStreamEncryptionCommand;\n}($Command);\n\nexport { StopStreamEncryptionCommand };","map":null,"metadata":{},"sourceType":"module"}