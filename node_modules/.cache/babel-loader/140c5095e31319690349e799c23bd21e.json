{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand, serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect\n *          token for a user authenticated by your backend authentication process. Supplying multiple\n *          logins will create an implicit linked account. You can only specify one developer provider\n *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer\n *          provider is the \"domain\" by which Cognito will refer to your users.</p>\n *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity\n *          and to link new logins (that is, user credentials issued by a public provider or developer\n *          provider) to an existing identity. When you want to create a new identity, the\n *             <code>IdentityId</code> should be null. When you want to associate a new login with an\n *          existing authenticated/unauthenticated identity, you can do so by providing the existing\n *             <code>IdentityId</code>. This API will create the identity in the specified\n *             <code>IdentityPoolId</code>.</p>\n *          <p>You must use AWS Developer credentials to call this API.</p>\n */\n\nvar GetOpenIdTokenForDeveloperIdentityCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetOpenIdTokenForDeveloperIdentityCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetOpenIdTokenForDeveloperIdentityCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CognitoIdentityClient\";\n    var commandName = \"GetOpenIdTokenForDeveloperIdentityCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);\n  };\n\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);\n  };\n\n  return GetOpenIdTokenForDeveloperIdentityCommand;\n}($Command);\n\nexport { GetOpenIdTokenForDeveloperIdentityCommand };","map":null,"metadata":{},"sourceType":"module"}