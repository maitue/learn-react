{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketMetricsConfigurationRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketMetricsConfigurationCommand, serializeAws_restXmlPutBucketMetricsConfigurationCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets a metrics configuration (specified by the metrics configuration ID) for the bucket.\n *          You can have up to 1,000 metrics configurations per bucket. If you're updating an existing\n *          metrics configuration, note that this is a full replacement of the existing metrics\n *          configuration. If you don't include the elements you want to keep, they are erased.</p>\n *\n *          <p>To use this operation, you must have permissions to perform the\n *             <code>s3:PutMetricsConfiguration</code> action. The bucket owner has this permission by\n *          default. The bucket owner can grant this permission to others. For more information about\n *          permissions, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources\">Permissions Related to Bucket Subresource Operations</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html\">Managing Access Permissions to Your Amazon S3\n *             Resources</a>.</p>\n *\n *          <p>For information about CloudWatch request metrics for Amazon S3, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html\">Monitoring Metrics with Amazon\n *             CloudWatch</a>.</p>\n *\n *          <p>The following operations are related to\n *          <code>PutBucketMetricsConfiguration</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucketMetricsConfiguration.html\">DeleteBucketMetricsConfiguration</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketMetricsConfiguration.html\">PutBucketMetricsConfiguration</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBucketMetricsConfigurations.html\">ListBucketMetricsConfigurations</a>\n *                </p>\n *             </li>\n *          </ul>\n *\n *\n *\n *\n *\n *\n *          <p>\n *             <code>GetBucketLifecycle</code> has the following special error:</p>\n *          <ul>\n *             <li>\n *                <p>Error code: <code>TooManyConfigurations</code>\n *                </p>\n *                <ul>\n *                   <li>\n *                      <p>Description: You are attempting to create a new configuration but have\n *                      already reached the 1,000-configuration limit.</p>\n *                   </li>\n *                   <li>\n *                      <p>HTTP Status Code: HTTP 400 Bad Request</p>\n *                   </li>\n *                </ul>\n *             </li>\n *          </ul>\n */\n\nvar PutBucketMetricsConfigurationCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutBucketMetricsConfigurationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutBucketMetricsConfigurationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutBucketMetricsConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketMetricsConfigurationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketMetricsConfigurationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutBucketMetricsConfigurationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketMetricsConfigurationCommand(input, context);\n  };\n\n  PutBucketMetricsConfigurationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketMetricsConfigurationCommand(output, context);\n  };\n\n  return PutBucketMetricsConfigurationCommand;\n}($Command);\n\nexport { PutBucketMetricsConfigurationCommand };","map":null,"metadata":{},"sourceType":"module"}