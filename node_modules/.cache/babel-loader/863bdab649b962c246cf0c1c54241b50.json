{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StopSentimentDetectionJobRequest, StopSentimentDetectionJobResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopSentimentDetectionJobCommand, serializeAws_json1_1StopSentimentDetectionJobCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Stops a sentiment detection job in progress.</p>\n *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n *       is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the\n *         <code>STOPPED</code> state.</p>\n *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n *       Internal Request Exception. </p>\n *          <p>When a job is stopped, any documents already processed are written to the output\n *       location.</p>\n */\n\nvar StopSentimentDetectionJobCommand =\n/** @class */\nfunction (_super) {\n  __extends(StopSentimentDetectionJobCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StopSentimentDetectionJobCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StopSentimentDetectionJobCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"ComprehendClient\";\n    var commandName = \"StopSentimentDetectionJobCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StopSentimentDetectionJobRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StopSentimentDetectionJobResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StopSentimentDetectionJobCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StopSentimentDetectionJobCommand(input, context);\n  };\n\n  StopSentimentDetectionJobCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StopSentimentDetectionJobCommand(output, context);\n  };\n\n  return StopSentimentDetectionJobCommand;\n}($Command);\n\nexport { StopSentimentDetectionJobCommand };","map":null,"metadata":{},"sourceType":"module"}