{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartStreamEncryptionInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartStreamEncryptionCommand, serializeAws_json1_1StartStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables or updates server-side encryption using an AWS KMS key for a specified\n *             stream. </p>\n *         <p>Starting encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Updating or applying encryption\n *             normally takes a few seconds to complete, but it can take minutes. You can continue to\n *             read and write data to your stream while its status is <code>UPDATING</code>. Once the\n *             status of the stream is <code>ACTIVE</code>, encryption begins for records written to\n *             the stream. </p>\n *         <p>API Limits: You can successfully apply a new AWS KMS key for server-side encryption\n *             25 times in a rolling 24-hour period.</p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are encrypted. After you enable\n *             encryption, you can verify that encryption is applied by inspecting the API response\n *             from <code>PutRecord</code> or <code>PutRecords</code>.</p>\n */\n\nvar StartStreamEncryptionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartStreamEncryptionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartStreamEncryptionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"StartStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartStreamEncryptionCommand(input, context);\n  };\n\n  StartStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartStreamEncryptionCommand(output, context);\n  };\n\n  return StartStreamEncryptionCommand;\n}($Command);\n\nexport { StartStreamEncryptionCommand };","map":null,"metadata":{},"sourceType":"module"}