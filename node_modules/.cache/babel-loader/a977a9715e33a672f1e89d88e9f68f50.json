{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectCustomLabelsRequest, DetectCustomLabelsResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectCustomLabelsCommand, serializeAws_json1_1DetectCustomLabelsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects custom labels in a supplied image by using an Amazon Rekognition Custom Labels model. </p>\n *          <p>You specify which version of a model version to use by using the <code>ProjectVersionArn</code> input\n *       parameter. </p>\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in\n *          an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, passing\n *          image bytes is not supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p> For each object that the model version detects on an image, the API returns a\n *          (<code>CustomLabel</code>) object in an array (<code>CustomLabels</code>).\n *          Each <code>CustomLabel</code> object provides the label name (<code>Name</code>), the level\n *          of confidence that the image contains the object (<code>Confidence</code>), and\n *          object location information, if it exists,  for the label on the image (<code>Geometry</code>). </p>\n *          <p>During training model calculates a threshold value that determines\n *          if a prediction for a label is true. By default, <code>DetectCustomLabels</code> doesn't\n *          return labels whose confidence value is below the model's calculated threshold value.  To filter\n *          labels that are returned, specify a value for <code>MinConfidence</code> that is higher than the\n *          model's calculated threshold. You can get the model's calculated threshold from the model's\n *          training results shown in the Amazon Rekognition Custom Labels console.\n *          To get all labels, regardless of confidence, specify a <code>MinConfidence</code>\n *          value of 0. </p>\n *          <p>You can also add the <code>MaxResults</code> parameter\n *            to limit the number of labels returned. </p>\n *\n *          <p>This is a stateless API operation. That is, the operation does not persist any\n *          data.</p>\n *          <p>This operation requires permissions to perform the\n *          <code>rekognition:DetectCustomLabels</code> action. </p>\n */\n\nvar DetectCustomLabelsCommand =\n/** @class */\nfunction (_super) {\n  __extends(DetectCustomLabelsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DetectCustomLabelsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DetectCustomLabelsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectCustomLabelsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectCustomLabelsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectCustomLabelsResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DetectCustomLabelsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectCustomLabelsCommand(input, context);\n  };\n\n  DetectCustomLabelsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectCustomLabelsCommand(output, context);\n  };\n\n  return DetectCustomLabelsCommand;\n}($Command);\n\nexport { DetectCustomLabelsCommand };","map":null,"metadata":{},"sourceType":"module"}