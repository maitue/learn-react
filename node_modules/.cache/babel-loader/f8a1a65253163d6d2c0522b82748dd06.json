{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\nvar isClockSkewed = function isClockSkewed(newServerTime, systemClockOffset) {\n  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n};\n\nvar getSkewCorrectedDate = function getSkewCorrectedDate(systemClockOffset) {\n  return new Date(Date.now() + systemClockOffset);\n};\n\nexport function awsAuthMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;\n\n        var _d;\n\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2\n              /*return*/\n              , next(args)];\n              if (!(typeof options.signer === \"function\")) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , options.signer()];\n\n            case 1:\n              _a = _e.sent();\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              _a = options.signer;\n              _e.label = 3;\n\n            case 3:\n              signer = _a;\n              _b = next;\n              _c = [__assign({}, args)];\n              _d = {};\n              return [4\n              /*yield*/\n              , signer.sign(args.request, {\n                signingDate: new Date(Date.now() + options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n\n            case 4:\n              return [4\n              /*yield*/\n              , _b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];\n\n            case 5:\n              output = _e.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n\n              if (dateHeader) {\n                serverTime = Date.parse(dateHeader);\n\n                if (isClockSkewed(serverTime, options.systemClockOffset)) {\n                  options.systemClockOffset = serverTime - Date.now();\n                }\n              }\n\n              return [2\n              /*return*/\n              , output];\n          }\n        });\n      });\n    };\n  };\n}\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function getAwsAuthPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}