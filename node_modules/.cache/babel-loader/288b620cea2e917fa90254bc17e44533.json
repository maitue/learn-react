{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SearchFacesRequest, SearchFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1SearchFacesCommand, serializeAws_json1_1SearchFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>For a given input face ID, searches for matching faces in the collection the face\n *       belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with\n *       faces in the specified collection. </p>\n *          <note>\n *             <p>You can also search faces without indexing faces by using the\n *           <code>SearchFacesByImage</code> operation.</p>\n *          </note>\n *\n *          <p>\n *      The operation response returns\n *       an array of faces that match, ordered by similarity score with the highest\n *       similarity first. More specifically, it is an\n *       array of metadata for each face match that is found. Along with the metadata, the response also\n *       includes a <code>confidence</code> value for each face match, indicating the confidence\n *       that the specific face matches the input face.\n *     </p>\n *\n *          <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>\n *       action.</p>\n */\n\nvar SearchFacesCommand =\n/** @class */\nfunction (_super) {\n  __extends(SearchFacesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SearchFacesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SearchFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"SearchFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SearchFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SearchFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SearchFacesCommand(input, context);\n  };\n\n  SearchFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SearchFacesCommand(output, context);\n  };\n\n  return SearchFacesCommand;\n}($Command);\n\nexport { SearchFacesCommand };","map":null,"metadata":{},"sourceType":"module"}