{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutLexiconInput, PutLexiconOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1PutLexiconCommand, serializeAws_restJson1PutLexiconCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Stores a pronunciation lexicon in an AWS Region. If a lexicon with the same name\n *       already exists in the region, it is overwritten by the new lexicon. Lexicon operations have\n *       eventual consistency, therefore, it might take some time before the lexicon is available to\n *       the SynthesizeSpeech operation.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n *         Lexicons</a>.</p>\n */\n\nvar PutLexiconCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutLexiconCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutLexiconCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutLexiconCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"PutLexiconCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutLexiconInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutLexiconOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutLexiconCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1PutLexiconCommand(input, context);\n  };\n\n  PutLexiconCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1PutLexiconCommand(output, context);\n  };\n\n  return PutLexiconCommand;\n}($Command);\n\nexport { PutLexiconCommand };","map":null,"metadata":{},"sourceType":"module"}