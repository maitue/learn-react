{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TextractClient } from \"./TextractClient\";\nimport { AnalyzeDocumentCommand } from \"./commands/AnalyzeDocumentCommand\";\nimport { DetectDocumentTextCommand } from \"./commands/DetectDocumentTextCommand\";\nimport { GetDocumentAnalysisCommand } from \"./commands/GetDocumentAnalysisCommand\";\nimport { GetDocumentTextDetectionCommand } from \"./commands/GetDocumentTextDetectionCommand\";\nimport { StartDocumentAnalysisCommand } from \"./commands/StartDocumentAnalysisCommand\";\nimport { StartDocumentTextDetectionCommand } from \"./commands/StartDocumentTextDetectionCommand\";\n/**\n * <p>Amazon Textract detects and analyzes text in documents and converts it\n *          into machine-readable text. This is the API reference documentation for\n *          Amazon Textract.</p>\n */\n\nvar Textract =\n/** @class */\nfunction (_super) {\n  __extends(Textract, _super);\n\n  function Textract() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Textract.prototype.analyzeDocument = function (args, optionsOrCb, cb) {\n    var command = new AnalyzeDocumentCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Textract.prototype.detectDocumentText = function (args, optionsOrCb, cb) {\n    var command = new DetectDocumentTextCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Textract.prototype.getDocumentAnalysis = function (args, optionsOrCb, cb) {\n    var command = new GetDocumentAnalysisCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Textract.prototype.getDocumentTextDetection = function (args, optionsOrCb, cb) {\n    var command = new GetDocumentTextDetectionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Textract.prototype.startDocumentAnalysis = function (args, optionsOrCb, cb) {\n    var command = new StartDocumentAnalysisCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  Textract.prototype.startDocumentTextDetection = function (args, optionsOrCb, cb) {\n    var command = new StartDocumentTextDetectionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return Textract;\n}(TextractClient);\n\nexport { Textract };","map":null,"metadata":{},"sourceType":"module"}