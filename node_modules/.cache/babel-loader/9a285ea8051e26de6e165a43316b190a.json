{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { v1 as uuid } from 'uuid';\nimport { ConsoleLogger as Logger, JS } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nvar PERSONALIZE_CACHE = '_awsct';\nvar PERSONALIZE_CACHE_USERID = '_awsct_uid';\nvar PERSONALIZE_CACHE_SESSIONID = '_awsct_sid';\nvar DEFAULT_CACHE_PREFIX = 'peronslize';\nvar TIMER_INTERVAL = 30 * 1000;\nvar DELIMITER = '.';\nvar CACHE_EXPIRY_IN_DAYS = 7;\nvar logger = new Logger('AmazonPersonalizeProvider');\n\nvar SessionInfoManager =\n/** @class */\nfunction () {\n  function SessionInfoManager(prefixKey) {\n    if (prefixKey === void 0) {\n      prefixKey = '';\n    }\n\n    this._isBrowser = JS.browserOrNode().isBrowser;\n    this._timerKey = uuid().substr(0, 15);\n\n    this._refreshTimer();\n  }\n\n  SessionInfoManager.prototype._refreshTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var that = this;\n    this._timer = setInterval(function () {\n      that._timerKey = uuid().substr(0, 15);\n    }, TIMER_INTERVAL);\n  };\n\n  SessionInfoManager.prototype.storeValue = function (key, value) {\n    var today = new Date();\n    var expire = new Date();\n    expire.setTime(today.getTime() + 3600000 * 24 * CACHE_EXPIRY_IN_DAYS);\n    Cache.setItem(this._getCachePrefix(key), value, {\n      expires: expire.getTime()\n    });\n  };\n\n  SessionInfoManager.prototype.retrieveValue = function (key) {\n    return Cache.getItem(this._getCachePrefix(key));\n  };\n\n  SessionInfoManager.prototype._getCachePrefix = function (key) {\n    if (this._isBrowser) {\n      return key + DELIMITER + window.location.host;\n    }\n\n    return DEFAULT_CACHE_PREFIX;\n  };\n\n  SessionInfoManager.prototype.getTimerKey = function () {\n    return this._timerKey;\n  };\n\n  SessionInfoManager.prototype.updateSessionInfo = function (userId, sessionInfo) {\n    var existUserId = sessionInfo.userId;\n    var existSessionId = sessionInfo.sessionId;\n\n    if (this._isRequireNewSession(userId, existUserId, existSessionId)) {\n      var newSessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, newSessionId);\n      sessionInfo.sessionId = newSessionId;\n    } else if (this._isRequireUpdateSessionInfo(userId, existUserId, existSessionId)) {\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n    }\n\n    sessionInfo.userId = userId;\n  };\n\n  SessionInfoManager.prototype._isRequireUpdateSessionInfo = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // anonymouse => sign in : hasSession && s_userId == null && curr_userId !=null\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    return !isNoCachedSession && isEmpty(cachedSessionUserId) && !isEmpty(userId);\n  };\n\n  SessionInfoManager.prototype.retrieveSessionInfo = function (trackingId) {\n    var sessionInfo = {};\n    sessionInfo.trackingId = trackingId;\n    sessionInfo.sessionId = this.retrieveValue(PERSONALIZE_CACHE_SESSIONID);\n    sessionInfo.userId = this.retrieveValue(PERSONALIZE_CACHE_USERID);\n\n    if (isEmpty(sessionInfo.sessionId)) {\n      sessionInfo.sessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, sessionInfo.sessionId);\n    }\n\n    this.storeValue(PERSONALIZE_CACHE, trackingId);\n    return sessionInfo;\n  };\n\n  SessionInfoManager.prototype._isRequireNewSession = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // new session => 1. no cached session info 2. signOut: s_userId !=null && curr_userId ==null\n    // 3. switch account: s_userId !=null && curr_userId !=null && s_userId != curr_userId\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    var isSignoutCase = isEmpty(userId) && !isEmpty(cachedSessionUserId);\n    var isSwitchUserCase = !isEmpty(userId) && !isEmpty(cachedSessionUserId) && !isEqual(userId, cachedSessionUserId);\n    return isNoCachedSession || isSignoutCase || isSwitchUserCase;\n  };\n\n  return SessionInfoManager;\n}();\n\nexport { SessionInfoManager };","map":null,"metadata":{},"sourceType":"module"}