{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetFaceDetectionRequest, GetFaceDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetFaceDetectionCommand, serializeAws_json1_1GetFaceDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets face detection results for a Amazon Rekognition Video analysis started by <a>StartFaceDetection</a>.</p>\n *          <p>Face detection with Amazon Rekognition Video is an asynchronous operation. You start face detection by calling <a>StartFaceDetection</a>\n *      which returns a job identifier (<code>JobId</code>). When the face detection operation finishes, Amazon Rekognition Video publishes a completion status to\n *      the Amazon Simple Notification Service topic registered in the initial call to <code>StartFaceDetection</code>. To get the results\n *      of the face detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      If so, call  <a>GetFaceDetection</a> and pass the job identifier\n *      (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p>\n *          <p>\n *             <code>GetFaceDetection</code> returns an array of detected faces (<code>Faces</code>) sorted by the time the faces were detected. </p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n *    of results. To get the next page of results, call <code>GetFaceDetection</code> and populate the <code>NextToken</code> request parameter with the token\n *     value returned from the previous call to <code>GetFaceDetection</code>.</p>\n */\n\nvar GetFaceDetectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetFaceDetectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetFaceDetectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetFaceDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetFaceDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetFaceDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetFaceDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetFaceDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetFaceDetectionCommand(input, context);\n  };\n\n  GetFaceDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetFaceDetectionCommand(output, context);\n  };\n\n  return GetFaceDetectionCommand;\n}($Command);\n\nexport { GetFaceDetectionCommand };","map":null,"metadata":{},"sourceType":"module"}