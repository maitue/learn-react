{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport DrawerPanel from './DrawerPanel';\nimport DrawerContext from './context';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { parseWidthHeight } from './util';\nvar sentinelStyle = {\n  width: 0,\n  height: 0,\n  overflow: 'hidden',\n  outline: 'none',\n  position: 'absolute'\n};\nexport default function DrawerPopup(props) {\n  var _ref, _pushConfig$distance, _pushConfig, _classNames;\n\n  var prefixCls = props.prefixCls,\n      open = props.open,\n      placement = props.placement,\n      inline = props.inline,\n      push = props.push,\n      forceRender = props.forceRender,\n      autoFocus = props.autoFocus,\n      keyboard = props.keyboard,\n      scrollLocker = props.scrollLocker,\n      rootClassName = props.rootClassName,\n      rootStyle = props.rootStyle,\n      zIndex = props.zIndex,\n      className = props.className,\n      style = props.style,\n      motion = props.motion,\n      width = props.width,\n      height = props.height,\n      children = props.children,\n      contentWrapperStyle = props.contentWrapperStyle,\n      mask = props.mask,\n      maskClosable = props.maskClosable,\n      maskMotion = props.maskMotion,\n      maskClassName = props.maskClassName,\n      maskStyle = props.maskStyle,\n      afterOpenChange = props.afterOpenChange,\n      onClose = props.onClose; // ================================ Refs ================================\n\n  var panelRef = React.useRef();\n  var sentinelStartRef = React.useRef();\n  var sentinelEndRef = React.useRef();\n\n  var onPanelKeyDown = function onPanelKeyDown(event) {\n    var keyCode = event.keyCode,\n        shiftKey = event.shiftKey;\n\n    switch (keyCode) {\n      // Tab active\n      case KeyCode.TAB:\n        {\n          if (keyCode === KeyCode.TAB) {\n            if (!shiftKey && document.activeElement === sentinelEndRef.current) {\n              var _sentinelStartRef$cur;\n\n              (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 ? void 0 : _sentinelStartRef$cur.focus({\n                preventScroll: true\n              });\n            } else if (shiftKey && document.activeElement === sentinelStartRef.current) {\n              var _sentinelEndRef$curre;\n\n              (_sentinelEndRef$curre = sentinelEndRef.current) === null || _sentinelEndRef$curre === void 0 ? void 0 : _sentinelEndRef$curre.focus({\n                preventScroll: true\n              });\n            }\n          }\n\n          break;\n        }\n      // Close\n\n      case KeyCode.ESC:\n        {\n          if (onClose && keyboard) {\n            onClose(event);\n          }\n\n          break;\n        }\n    }\n  }; // ========================== Control ===========================\n  // Auto Focus\n\n\n  React.useEffect(function () {\n    if (open && autoFocus) {\n      var _panelRef$current;\n\n      (_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.focus({\n        preventScroll: true\n      });\n    }\n  }, [open, autoFocus]); // ============================ Push ============================\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pushed = _React$useState2[0],\n      setPushed = _React$useState2[1];\n\n  var parentContext = React.useContext(DrawerContext); // Merge push distance\n\n  var pushConfig;\n\n  if (push === false) {\n    pushConfig = {\n      distance: 0\n    };\n  } else if (push === true) {\n    pushConfig = {};\n  } else {\n    pushConfig = push || {};\n  }\n\n  var pushDistance = (_ref = (_pushConfig$distance = (_pushConfig = pushConfig) === null || _pushConfig === void 0 ? void 0 : _pushConfig.distance) !== null && _pushConfig$distance !== void 0 ? _pushConfig$distance : parentContext === null || parentContext === void 0 ? void 0 : parentContext.pushDistance) !== null && _ref !== void 0 ? _ref : 180;\n  var mergedContext = React.useMemo(function () {\n    return {\n      pushDistance: pushDistance,\n      push: function push() {\n        setPushed(true);\n      },\n      pull: function pull() {\n        setPushed(false);\n      }\n    };\n  }, [pushDistance]); // ========================= ScrollLock =========================\n  // Tell parent to push\n\n  React.useEffect(function () {\n    if (open) {\n      var _parentContext$push;\n\n      parentContext === null || parentContext === void 0 ? void 0 : (_parentContext$push = parentContext.push) === null || _parentContext$push === void 0 ? void 0 : _parentContext$push.call(parentContext);\n    } else {\n      var _parentContext$pull;\n\n      parentContext === null || parentContext === void 0 ? void 0 : (_parentContext$pull = parentContext.pull) === null || _parentContext$pull === void 0 ? void 0 : _parentContext$pull.call(parentContext);\n    }\n  }, [open]); // Lock window scroll\n\n  React.useEffect(function () {\n    if (open && mask) {\n      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();\n    }\n  }, [open, mask]); // Clean up\n\n  React.useEffect(function () {\n    return function () {\n      var _parentContext$pull2;\n\n      scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();\n      parentContext === null || parentContext === void 0 ? void 0 : (_parentContext$pull2 = parentContext.pull) === null || _parentContext$pull2 === void 0 ? void 0 : _parentContext$pull2.call(parentContext);\n    };\n  }, []); // ============================ Mask ============================\n\n  var maskNode = mask && /*#__PURE__*/React.createElement(CSSMotion, _extends({\n    key: \"mask\"\n  }, maskMotion, {\n    visible: open\n  }), function (_ref2, maskRef) {\n    var motionMaskClassName = _ref2.className,\n        motionMaskStyle = _ref2.style;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(\"\".concat(prefixCls, \"-mask\"), motionMaskClassName, maskClassName),\n      style: _objectSpread(_objectSpread({}, motionMaskStyle), maskStyle),\n      onClick: maskClosable ? onClose : undefined,\n      ref: maskRef\n    });\n  }); // =========================== Panel ============================\n\n  var motionProps = typeof motion === 'function' ? motion(placement) : motion;\n  var wrapperStyle = {};\n\n  if (pushed && pushDistance) {\n    switch (placement) {\n      case 'top':\n        wrapperStyle.transform = \"translateY(\".concat(pushDistance, \"px)\");\n        break;\n\n      case 'bottom':\n        wrapperStyle.transform = \"translateY(\".concat(-pushDistance, \"px)\");\n        break;\n\n      case 'left':\n        wrapperStyle.transform = \"translateX(\".concat(pushDistance, \"px)\");\n        break;\n\n      default:\n        wrapperStyle.transform = \"translateX(\".concat(-pushDistance, \"px)\");\n        break;\n    }\n  }\n\n  if (placement === 'left' || placement === 'right') {\n    wrapperStyle.width = parseWidthHeight(width);\n  } else {\n    wrapperStyle.height = parseWidthHeight(height);\n  }\n\n  var panelNode = /*#__PURE__*/React.createElement(CSSMotion, _extends({\n    key: \"panel\"\n  }, motionProps, {\n    visible: open,\n    forceRender: forceRender,\n    onVisibleChanged: function onVisibleChanged(nextVisible) {\n      afterOpenChange === null || afterOpenChange === void 0 ? void 0 : afterOpenChange(nextVisible);\n\n      if (!nextVisible) {\n        scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock();\n      }\n    },\n    removeOnLeave: false,\n    leavedClassName: \"\".concat(prefixCls, \"-content-wrapper-hidden\")\n  }), function (_ref3, motionRef) {\n    var motionClassName = _ref3.className,\n        motionStyle = _ref3.style;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames(\"\".concat(prefixCls, \"-content-wrapper\"), motionClassName),\n      style: _objectSpread(_objectSpread(_objectSpread({}, wrapperStyle), motionStyle), contentWrapperStyle)\n    }, /*#__PURE__*/React.createElement(DrawerPanel, {\n      containerRef: motionRef,\n      prefixCls: prefixCls,\n      className: className,\n      style: style\n    }, children));\n  }); // =========================== Render ===========================\n\n  var containerStyle = _objectSpread({}, rootStyle);\n\n  if (zIndex) {\n    containerStyle.zIndex = zIndex;\n  }\n\n  return /*#__PURE__*/React.createElement(DrawerContext.Provider, {\n    value: mergedContext\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, \"\".concat(prefixCls, \"-\").concat(placement), rootClassName, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-open\"), open), _defineProperty(_classNames, \"\".concat(prefixCls, \"-inline\"), inline), _classNames)),\n    style: containerStyle,\n    tabIndex: -1,\n    ref: panelRef,\n    onKeyDown: onPanelKeyDown\n  }, maskNode, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStartRef,\n    style: sentinelStyle,\n    \"aria-hidden\": \"true\",\n    \"data-sentinel\": \"start\"\n  }), panelNode, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEndRef,\n    style: sentinelStyle,\n    \"aria-hidden\": \"true\",\n    \"data-sentinel\": \"end\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}