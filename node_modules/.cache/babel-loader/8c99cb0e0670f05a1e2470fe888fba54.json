{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SearchFacesByImageRequest, SearchFacesByImageResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1SearchFacesByImageCommand, serializeAws_json1_1SearchFacesByImageCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>For a given input image, first detects the largest face in the image, and then searches\n *       the specified collection for matching faces. The operation compares the features of the input\n *       face with faces in the specified collection. </p>\n *          <note>\n *             <p>To search for all faces in an input image, you might first call the <a>IndexFaces</a> operation, and then use the face IDs returned in subsequent\n *         calls to the <a>SearchFaces</a> operation. </p>\n *             <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes\n *         in the response to make face crops, which then you can pass in to the\n *           <code>SearchFacesByImage</code> operation. </p>\n *          </note>\n *\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p>\n *       The response returns an array of faces that match, ordered by similarity score with the\n *       highest similarity first. More specifically, it is an\n *       array of metadata for each face match found. Along with the metadata, the response also\n *       includes a <code>similarity</code> indicating how similar the face is\n *       to the input face.\n *\n *       In the response, the operation also returns the bounding\n *       box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition\n *       used for the input image.\n *     </p>\n *\n *          <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that donâ€™t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.\n *       Use <code>QualityFilter</code> to set the quality bar for\n *       filtering by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default\n *       value is <code>NONE</code>.</p>\n *          <note>\n *             <p>To use quality filtering, you need a collection associated with version 3 of the\n *       face model or higher. To get the version of the face model associated with a collection, call\n *       <a>DescribeCollection</a>. </p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>\n *       action.</p>\n */\n\nvar SearchFacesByImageCommand =\n/** @class */\nfunction (_super) {\n  __extends(SearchFacesByImageCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SearchFacesByImageCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SearchFacesByImageCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"SearchFacesByImageCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SearchFacesByImageRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesByImageResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SearchFacesByImageCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SearchFacesByImageCommand(input, context);\n  };\n\n  SearchFacesByImageCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SearchFacesByImageCommand(output, context);\n  };\n\n  return SearchFacesByImageCommand;\n}($Command);\n\nexport { SearchFacesByImageCommand };","map":null,"metadata":{},"sourceType":"module"}