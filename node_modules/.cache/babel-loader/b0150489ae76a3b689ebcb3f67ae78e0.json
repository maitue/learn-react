{"ast":null,"code":"var global = require('../internals/global');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\n\nvar regExpFlags = require('../internals/regexp-flags');\n\nvar fails = require('../internals/fails'); // babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError\n\n\nvar RegExp = global.RegExp;\nvar RegExpPrototype = RegExp.prototype;\nvar FORCED = DESCRIPTORS && fails(function () {\n  var INDICES_SUPPORT = true;\n\n  try {\n    RegExp('.', 'd');\n  } catch (error) {\n    INDICES_SUPPORT = false;\n  }\n\n  var O = {}; // modern V8 bug\n\n  var calls = '';\n  var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';\n\n  var addGetter = function addGetter(key, chr) {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty(O, key, {\n      get: function get() {\n        calls += chr;\n        return true;\n      }\n    });\n  };\n\n  var pairs = {\n    dotAll: 's',\n    global: 'g',\n    ignoreCase: 'i',\n    multiline: 'm',\n    sticky: 'y'\n  };\n  if (INDICES_SUPPORT) pairs.hasIndices = 'd';\n\n  for (var key in pairs) {\n    addGetter(key, pairs[key]);\n  } // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n\n\n  var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);\n  return result !== expected || calls !== expected;\n}); // `RegExp.prototype.flags` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\n\nif (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {\n  configurable: true,\n  get: regExpFlags\n});","map":null,"metadata":{},"sourceType":"script"}