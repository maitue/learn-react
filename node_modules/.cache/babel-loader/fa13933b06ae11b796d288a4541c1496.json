{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateStreamInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1CreateStreamCommand, serializeAws_json1_1CreateStreamCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates a Kinesis data stream. A stream captures and transports data records that\n *             are continuously emitted from different data sources or <i>producers</i>.\n *             Scale-out within a stream is explicitly supported by means of shards, which are uniquely\n *             identified groups of data records in a stream.</p>\n *         <p>You specify and control the number of shards that a stream is composed of. Each\n *             shard can support reads up to five transactions per second, up to a maximum data read\n *             total of 2 MiB per second. Each shard can support writes up to 1,000 records per second,\n *             up to a maximum data write total of 1 MiB per second. If the amount of data input\n *             increases or decreases, you can add or remove shards.</p>\n *         <p>The stream name identifies the stream. The name is scoped to the AWS account used\n *             by the application. It is also scoped by AWS Region. That is, two streams in two\n *             different accounts can have the same name, and two streams in the same account, but in\n *             two different Regions, can have the same name.</p>\n *         <p>\n *             <code>CreateStream</code> is an asynchronous operation. Upon receiving a\n *                 <code>CreateStream</code> request, Kinesis Data Streams immediately returns and sets\n *             the stream status to <code>CREATING</code>. After the stream is created, Kinesis Data\n *             Streams sets the stream status to <code>ACTIVE</code>. You should perform read and write\n *             operations only on an <code>ACTIVE</code> stream. </p>\n *         <p>You receive a <code>LimitExceededException</code> when making a\n *                 <code>CreateStream</code> request when you try to do one of the following:</p>\n *         <ul>\n *             <li>\n *\n *                 <p>Have more than five streams in the <code>CREATING</code> state at any point\n *                     in time.</p>\n *             </li>\n *             <li>\n *\n *                 <p>Create more shards than are authorized for your account.</p>\n *             </li>\n *          </ul>\n *         <p>For the default shard limit for an AWS account, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Amazon Kinesis Data Streams\n *                 Limits</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>. To increase this limit, <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\">contact AWS\n *             Support</a>.</p>\n *         <p>You can use <code>DescribeStream</code> to check the stream status, which is\n *             returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <a>CreateStream</a> has a limit of five transactions per second per\n *             account.</p>\n */\n\nvar CreateStreamCommand =\n/** @class */\nfunction (_super) {\n  __extends(CreateStreamCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CreateStreamCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CreateStreamCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"CreateStreamCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateStreamInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function outputFilterSensitiveLog(output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CreateStreamCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CreateStreamCommand(input, context);\n  };\n\n  CreateStreamCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CreateStreamCommand(output, context);\n  };\n\n  return CreateStreamCommand;\n}($Command);\n\nexport { CreateStreamCommand };","map":null,"metadata":{},"sourceType":"module"}