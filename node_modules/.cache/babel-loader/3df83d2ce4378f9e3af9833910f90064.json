{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RecognizeCelebritiesRequest, RecognizeCelebritiesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1RecognizeCelebritiesCommand, serializeAws_json1_1RecognizeCelebritiesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns an array of celebrities recognized in the input image.  For more information, see Recognizing Celebrities\n *     in the Amazon Rekognition Developer Guide. </p>\n *          <p>\n *             <code>RecognizeCelebrities</code> returns the 64 largest faces in the image. It lists\n *       recognized celebrities in the <code>CelebrityFaces</code> array and unrecognized faces in the\n *         <code>UnrecognizedFaces</code> array. <code>RecognizeCelebrities</code> doesn't return\n *       celebrities whose faces aren't among the largest 64 faces in the image.</p>\n *\n *          <p>For each celebrity recognized, <code>RecognizeCelebrities</code> returns a\n *         <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity\n *       name, ID, URL links to additional information, match confidence, and a\n *         <code>ComparedFace</code> object that you can use to locate the celebrity's face on the\n *       image.</p>\n *          <p>Amazon Rekognition doesn't retain information about which images a celebrity has been recognized\n *       in. Your application must store this information and use the <code>Celebrity</code> ID\n *       property as a unique identifier for the celebrity. If you don't store the celebrity name or\n *       additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the\n *       ID to identify the celebrity in a call to the <a>GetCelebrityInfo</a>\n *       operation.</p>\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *\n *\n *\n *\n *          <p>For an example, see Recognizing Celebrities in an Image in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the\n *         <code>rekognition:RecognizeCelebrities</code> operation.</p>\n */\n\nvar RecognizeCelebritiesCommand =\n/** @class */\nfunction (_super) {\n  __extends(RecognizeCelebritiesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function RecognizeCelebritiesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  RecognizeCelebritiesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"RecognizeCelebritiesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: RecognizeCelebritiesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: RecognizeCelebritiesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  RecognizeCelebritiesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1RecognizeCelebritiesCommand(input, context);\n  };\n\n  RecognizeCelebritiesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1RecognizeCelebritiesCommand(output, context);\n  };\n\n  return RecognizeCelebritiesCommand;\n}($Command);\n\nexport { RecognizeCelebritiesCommand };","map":null,"metadata":{},"sourceType":"module"}