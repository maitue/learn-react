{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger, Parser } from '@aws-amplify/core';\nimport { AWSS3Provider } from './providers';\nimport axios from 'axios';\nvar logger = new Logger('StorageClass');\nvar DEFAULT_PROVIDER = 'AWSS3';\n/**\n * Provide storage methods to use AWS S3\n */\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\n   * Initialize Storage\n   * @param {Object} config - Configuration object for storage\n   */\n  function Storage() {\n    this._config = {};\n    this._pluggables = [];\n    this._cancelTokenSourceMap = new WeakMap();\n    logger.debug('Storage Options', this._config);\n    this.get = this.get.bind(this);\n    this.put = this.put.bind(this);\n    this.remove = this.remove.bind(this);\n    this.list = this.list.bind(this);\n  }\n\n  Storage.prototype.getModuleName = function () {\n    return 'Storage';\n  };\n  /**\n   * add plugin into Storage category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  Storage.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Storage') {\n      this._pluggables.push(pluggable);\n\n      var config = {};\n      config = pluggable.configure(this._config[pluggable.getProviderName()]);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Storage.prototype.getPluggable = function (providerName) {\n    var pluggable = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Storage.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * Configure Storage\n   * @param {Object} config - Configuration object for storage\n   * @return {Object} - Current configuration\n   */\n\n\n  Storage.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Storage');\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    var storageKeysFromConfig = Object.keys(amplifyConfig.Storage);\n    var storageArrayKeys = ['bucket', 'region', 'level', 'track', 'customPrefix', 'serverSideEncryption', 'SSECustomerAlgorithm', 'SSECustomerKey', 'SSECustomerKeyMD5', 'SSEKMSKeyId'];\n\n    var isInStorageArrayKeys = function isInStorageArrayKeys(k) {\n      return storageArrayKeys.some(function (x) {\n        return x === k;\n      });\n    };\n\n    var checkConfigKeysFromArray = function checkConfigKeysFromArray(k) {\n      return k.find(function (k) {\n        return isInStorageArrayKeys(k);\n      });\n    };\n\n    if (storageKeysFromConfig && checkConfigKeysFromArray(storageKeysFromConfig) && !amplifyConfig.Storage[DEFAULT_PROVIDER]) {\n      amplifyConfig.Storage[DEFAULT_PROVIDER] = {};\n    }\n\n    Object.entries(amplifyConfig.Storage).map(function (_a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      if (key && isInStorageArrayKeys(key) && value !== undefined) {\n        amplifyConfig.Storage[DEFAULT_PROVIDER][key] = value;\n        delete amplifyConfig.Storage[key];\n      }\n    }); // only update new values for each provider\n\n    Object.keys(amplifyConfig.Storage).forEach(function (providerName) {\n      if (typeof amplifyConfig.Storage[providerName] !== 'string') {\n        _this._config[providerName] = __assign(__assign({}, _this._config[providerName]), amplifyConfig.Storage[providerName]);\n      }\n    });\n\n    this._pluggables.forEach(function (pluggable) {\n      pluggable.configure(_this._config[pluggable.getProviderName()]);\n    });\n\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AWSS3Provider());\n    }\n\n    return this._config;\n  };\n\n  Storage.prototype.getCancellableTokenSource = function () {\n    return axios.CancelToken.source();\n  };\n\n  Storage.prototype.updateRequestToBeCancellable = function (request, cancelTokenSource) {\n    this._cancelTokenSourceMap.set(request, cancelTokenSource);\n  };\n  /**\n   * Cancels an inflight request\n   *\n   * @param {Promise<any>} request - The request to cancel\n   * @param {string} [message] - A message to include in the cancelation exception\n   */\n\n\n  Storage.prototype.cancel = function (request, message) {\n    var cancelTokenSource = this._cancelTokenSourceMap.get(request);\n\n    if (cancelTokenSource) {\n      cancelTokenSource.cancel(message);\n    } else {\n      logger.debug('The request does not map to any cancel token');\n    }\n  };\n  /**\n   * Get a presigned URL of the file or the object data when download:true\n   *\n   * @param {string} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public, download: true|false }\n   * @return - A promise resolves to either a presigned url or the object\n   */\n\n\n  Storage.prototype.get = function (key, config) {\n    var _a = (config || {}).provider,\n        provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n    var responsePromise = prov.get(key, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n    this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n    return responsePromise;\n  };\n\n  Storage.prototype.isCancelError = function (error) {\n    return axios.isCancel(error);\n  };\n  /**\n   * Put a file in storage bucket specified to configure method\n   * @param {string} key - key of the object\n   * @param {Object} object - File to be put in bucket\n   * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n   *  progressCallback: function }\n   * @return - promise resolves to object on success\n   */\n\n\n  Storage.prototype.put = function (key, object, config) {\n    var _a = (config || {}).provider,\n        provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n\n    var prov = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === provider;\n    });\n\n    if (prov === undefined) {\n      logger.debug('No plugin found with providerName', provider);\n      return Promise.reject('No plugin found in Storage for the provider');\n    }\n\n    var cancelTokenSource = this.getCancellableTokenSource();\n    var responsePromise = prov.put(key, object, __assign(__assign({}, config), {\n      cancelTokenSource: cancelTokenSource\n    }));\n    this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);\n    return responsePromise;\n  };\n  /**\n   * Remove the object for specified key\n   * @param {string} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public }\n   * @return - Promise resolves upon successful removal of the object\n   */\n\n\n  Storage.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, provider, prov;\n\n      return __generator(this, function (_b) {\n        _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n        prov = this._pluggables.find(function (pluggable) {\n          return pluggable.getProviderName() === provider;\n        });\n\n        if (prov === undefined) {\n          logger.debug('No plugin found with providerName', provider);\n          return [2\n          /*return*/\n          , Promise.reject('No plugin found in Storage for the provider')];\n        }\n\n        return [2\n        /*return*/\n        , prov.remove(key, config)];\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {String} path - the path that contains objects\n   * @param {Object} [config] - { level : private|protected|public, maxKeys: NUMBER }\n   * @return - Promise resolves to list of keys for all objects in path\n   */\n\n\n  Storage.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, provider, prov;\n\n      return __generator(this, function (_b) {\n        _a = (config || {}).provider, provider = _a === void 0 ? DEFAULT_PROVIDER : _a;\n        prov = this._pluggables.find(function (pluggable) {\n          return pluggable.getProviderName() === provider;\n        });\n\n        if (prov === undefined) {\n          logger.debug('No plugin found with providerName', provider);\n          return [2\n          /*return*/\n          , Promise.reject('No plugin found in Storage for the provider')];\n        }\n\n        return [2\n        /*return*/\n        , prov.list(path, config)];\n      });\n    });\n  };\n\n  return Storage;\n}();\n\nexport { Storage };\n/**\n * @deprecated use named import\n */\n\nexport default Storage;","map":null,"metadata":{},"sourceType":"module"}